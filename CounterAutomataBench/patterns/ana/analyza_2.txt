(?<=\\Q$sep\\E)
(?<=\\Q$separator\\E)
(?<=\\Q$var\\E)
(?<=\\s
(?<=\\S)(
(?<=\\S[.;]|.\\?|.!)\\p{Blank}+
(?<=\\s{3}min-links\\s)(?P<value>.+)$
(?<=\\s|[\\x{2000}-\\x{200A}])
(?<=\\s|\\b)\\pL|[()]
(?<=\\s|^)(?<!\\\\)([*_]{1,3})(.*?)(?!\\\\)\\1(?=[\\s[:punct:]]|$)
(?<=\u00d8\u00a3\\N{ARABIC FATHA})\u00d8\u00a5
(?<=\u00d8\u00a7\u00d8\u00a6\\N{ARABIC FATHA})a
(?<=\\w)\"(?=\\pP)
(?<=^\\{|,)(([^,\"{]*)|\\s*\"((?:[^\"\\\\]|\\\\(?:.|[0-9]+|x[0-9a-f]+))*)\"\\s*)(,|(?<!^\\{)(?=\\}$))
(?<=^|
(?<=^|;|<\\?php\\s|<\\?\\s)(\\h*\\$(\\w+)\\s*=)(\\s*(['\"].*?['\"]|.*?)\\s*;)
(?<=^|;|<\\?php\\s|<\\?\\s)(\\h*define\\s*\\(\\s*['\"](\\w*?)['\"]\\s*)(,\\s*(['\"].*?['\"]|.*?)\\s*)((?:,\\s*(?:true|false)\\s*)?\\)\\s*;)
(?<=^|[\n (])(?P<element>[\\w]+?://.*?[^ \"\n\r\t<]*)
(?<=^|[\n ])(?P<content>([a-z0-9&\\-_.]+?)@([\\w\\-]+\\.([\\w\\-\\.]+\\.)*[\\w]+))
(?<=^|\\n)\\h?>\\h?(.*?(?:\\n+|$))
(?<=^|\\s)(['\"]?)(.+?)(?<!\\\\)\\1(?=$|\\s)
(?<=^|\\s|[\\x{2000}-\\x{200A}]|/|-|\\(|\\[|\\{|\\||\"|^'|\\s'|\u2018|\u201c)(.)
(?<=^spanning-tree\\smst\\s
(?<={)@(?P<name>[a-zA-Z]+)
(?<={)\\s?sec\\s?=\\s?+\\d+
(?<={{)[^\\s{}]++(?=}})
(?<=a
(?<=A\\\\H\\{\\}|\\\\H\\{a\\})aN
(?<=A\\\\H{}|\\\\H{a})aN
(?<=a+b+))
(?<=accounts/)\\p{XDigit}+[^/]
(?<=STATE)\\s*\\{(?P<st_txt>[^}]+)(?=\\})
(?<a)
(?<A>a)\\g<A>
(?<AB>a)\\2
(?<AB>a)\\k<\\u0041\\u0042>
(?<address>
(?<anchor>\\\\s*anchor\\\\s*=\\\\s*\\\\<
(?<annotation>
(?<api_key>^(\\h){8}-(\\h){4}-(\\h){4}-(\\h){4}-(\\h){12})\\:(?<secret>\\w+)$
(?<app>[^ ]+)[ ]{1,}environ(ment|)(?<env>([ ]{1,}(staging|production)))[ ]{1,}(?<hosts>(
(?<app>[^ ]+)[ ]{1,}revision(?<env>([ ]{1,}(staging|production)))[ ]{1,}(?<hosts>(
(?<app>[^ ]+)[ ]{1,}setup(?<env>([ ]{1,}(staging|production)))[ ]{1,}(?<hosts>(
(?<attribute>\\S+)=[\"']?(?P<value>(?:.(?![\"']?\\s+(?:\\S+)=|[>\"']))+.)[\"']?
(?<backslashesToEscape>(?:\\\\\\\\)+)|(?<stripBackslash>\\\\\\n)|(?<whitespacesToCollapse>\\s*\\n\\s*)
(?<branch>[^ ]+)[ ]{1,}to[ ]{1,}(?<app>[^ ]+)(?<env>([ ]{1,}(staging|production)))[ ]{1,}(?<hosts>(
(?<branch>[^ ]+)[ ]{1,}to[ ]{1,}(?<app>[^ ]+)(?<env>([ ]{1,}(staging|production)))[ ]{1,}force[ ]{1,}(?<hosts>(
(?<class>([a-zA-Z]\\w+(\\\\)*){1,})\\:\\:(?<method>\\w+)(?<this>\\:this)*
(?<color>#\\h{6}|#\\h{3})
(?<com.example.foo>x)
(?<conid>[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(\\.\\g<conid>)?)
(?<day>
(?<encoding>
(?<foo bar > should not grab this bracket> x)
(?<foo>a)\\Q(?<bar>b)(?<baz>c)(d)  [  \\E(?<named>e)  \\Q]\\E
(?<foo>foo.)bar\\g<foo>
(?<foo>xyz)abc\\k<bar>
(?<func>.+?)\\s+\n                   \\Qfailed with error\\E\\s+\n                   (?<httpcode>\\d{3})\\s+\n                   (?<errtext>.+?)\\s+\n                   at\\s+\n                   (?<file>.+?)\\s+\n                   line\\s+\n                   (?<line>\\d+)
(?<gefr??ig>x)
(?<height:\\s*>)(\\d+)(?=px)
(?<hour>
(?<hour>\\d++)\n                  (?:\n                   : (?<minute>\\d++)\n                   (?:\n                    : (?<second>\\d++)\n                   )?\n                  )?\n                  (?: \\s*+ (?<suffix>[ap]) (\\.?)m\\g{-1})?\n                 
(?<charset>
(?<indent>\\s*(-\\s*)?)(?<name>(\\\"[^:]+\\\")|[^:]+):\\s*(?<value>[^ ].*+)?
(?<indent>^\\ {
(?<issue>
(?<key>
(?<key>[a-z0-9\\.\\_\\-\\:]+)=(?<value>[\\d\\.e\\-\\+]+|''|'.+?(?<!\\\\)')
(?<link-extension>(?<param>
(?<locale>
(?<Lorem ipsum dolor sit amet,\\n consectetur adipisicing elit>x)
(?<measure>[a-zA-Z0-9\\-!$%^&*()_+|@#~`{}\\[\\]:\";'?,.\\/\\s]+)\\s*(?<operand>
(?<media>(?:@media[^{]+)?){(?:(?:[^{}]+)|(?R))*}
(?<message>
(?<month>
(?<n_part>n)(?<g_part>g(
(?<name>[a-z0-9A-Z_\\[\\]]+)?\\s*(?<required>
(?<named>x)(?idsumx-idsumx)(?=b)(?!x)
(?<paren>\\((?:[^()]|\\g<paren>)*\\))$
(?<qr1>[\"'])(?<req1>
(?<re>\\{(?:(?>[^{}]+)|\\g<re>)*\\})
(?<rel>\\\\s*rel\\\\s*=\\\\s*(?<rel-relationship>
(?<relation>
(?<relations>
(?<relationship>
(?<rev>\\\\s*rev\\\\s*=\\\\s*
(?<scope_name>
(?<start>[^<]*)?(?<broken>(?:(?:<\\/\\w+(?:\\s+\\w+=\\\"[^\\\"]+\\\")*+)(?:[^<]+)>)+)(?<end>.*)
(?<subspecs>(?:\\{.+?(?<!(?<!(\\$|\\\\))(\\$|\\\\))\\})*)
(?<subspecs>(?:\\{.+?(?<!(\\$|\\\\))\\})*)
(?<suffix>
(?<T0>\\Q[\\E)(?<T1>\\d+)(?<T2>-)(?<T3>\\d+)(?<T4>\\])
(?<time>(\\[?[h]\\]?+:)?[m]+(:?ss|:?s)?)
(?<title>\\\\s*title\\\\s*=\\\\s*
(?<token>%
(?<token>%<[^>]+>
(?<url>(?<protocol>https?)\\:\\/\\/(?<domain>[A-Za-z0-9\\-\\.]+)(?<path>\\/[A-Za-z0-9\\/\\.\\/\\+\\?\\&\\-\\_\\%\\=\\~\\:\\;]+)?+)
(?<width:\\s*>)(\\d+)(?=px)
(?<year>
(?<zone_space> )?(?<zone>(?<zone_off>
(?=   # if we have ahead... (not scanned, just checked\n        </ref>        |     # <ref> closed\n        }}            |     # or template closed\n        (?<!\\])\\](?!\\])     # or ext.link closed,\n                            # the madness with look-ahead/behind means\n                            # \"match single bracket but not double\"\n      )
(?=   # if we have ahead... (not scanned, just checked\n        </ref>        |     # <ref> closed\n        }}            |     # or template closed\n        \\]\\]                # or int.link closed\n      )
(?=   # if we have ahead... (not scanned, just checked\n        </ref>        |     # <ref> closed\n        }}\n      )
(?=
(?= ( \\( (?> [^()]++ | (?1) )* \\) ) )
(?=(
(?=(?:\\n\\s*)?<\\/
(?=(?:\\W|^)
(?=(?<regex>(?#simple syntax)\\$(?<name>
(?=(?<regex>(?#simple syntax)\\$(?<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)(?:\\[(?<index>[a-zA-Z0-9_\\x7f-\\xff]+|\\$\\g<name>)\\]|->\\g<name>(?<_1>\\(.*?\\))?)?|(?#simple syntax with braces)\\$\\{(?:\\g<name>(?<indices>\\[(?:\\g<index>|'(?:\\\\.|[^'\\\\])*'|\"(?:\\g<regex>|\\\\.|[^\"\\\\])*\")\\])?|\\g<complex>|\\$\\{\\g<complex>\\})\\}|(?#complex syntax)\\{(?<complex>\\$(?<segment>\\g<name>(?<_2>\\g<indices>*|\\(.*?\\))?)(?:->\\g<segment>)*|\\$\\g<complex>|\\$\\{\\g<complex>\\})\\}))\\{
(?=(?<regex>(?#simple syntax)\\$(?<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)(?:\\[(?<index>[a-zA-Z0-9_\\x7f-\\xff]+|\\$\\g<name>)\\]|->\\g<name>(\\(.*?\\))?)?|(?#simple syntax with braces)\\$\\{(?:\\g<name>(?<indices>\\[(?:\\g<index>|'(?:\\\\.|[^'\\\\])*'|\"(?:\\g<regex>|\\\\.|[^\"\\\\])*\")\\])?|\\g<complex>|\\$\\{\\g<complex>\\})\\}|(?#complex syntax)\\{(?<complex>\\$(?<segment>\\g<name>(\\g<indices>*|\\(.*?\\))?)(?:->\\g<segment>)*|\\$\\g<complex>|\\$\\{\\g<complex>\\})\\}))\\{
(?=([a-z][a-zA-Z\\d@_]*+|'[^']*+')\\s*+(\\(|:\\s*+([a-z][a-zA-Z\\d@_]*+|'[^']*+')\\s*+\\())
(?=(M\\w{
(?=.)(\\X)
(?=.)[^\"'\\\\]+?((?!.)|(?=[\"'\\\\]))
(?=[
(?=[$`\\\\])
(?=[&\\\\]|
(?=[()\\\\])
(?=[;(\\s]|
(?=[;\\s]|
(?=[;\\s<]|
(?=[\"\\\\])
(?=[\"'])(?:\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"|'[^'\\\\]*(?:\\\\[\\s\\S][^'\\\\]*)*')
(?=['\\\\])
(?=[\\Q_%#&{}\\E])
(?=[^\\\\])(?<_1>\")
(?=[^\\\\])(\")
(?=[^\\\\]?)#(\\d)*
(?=[^\\\\]?)@
(?=[A-Z])|\\s*\\_\\s*|\\s*\\-\\s*|\\s+
(?=[A-Z])|\\s*\\_\\s*|\\s+
(?=[a-z][a-zA-Z\\d@_]*+\\s*+(?<_1>\\(|:\\s*+[a-z][a-zA-Z\\d@_]*+\\s*+\\())
(?=[a-z][a-zA-Z\\d@_]*+\\s*+(\\(|:\\s*+[a-z][a-zA-Z\\d@_]*+\\s*+\\())
-(?=[a-zA-Z+!\\-_?*~
(?=[a-zA-Z+!\\-_?0-9*~
(?=\")|(?=\\\\)|(?=\\:)|(?=\\#\")
(?=\\\\)
(?=\\b(
(?=\\p{IsUpper}\\p{IsLower})
(?=\\P{sc=Adlm})\\p{scx=Adlm}
(?=\\P{sc=Arab})\\p{scx=Arab}
(?=\\P{sc=Armn})\\p{scx=Armn}
(?=\\P{sc=Beng})\\p{scx=Beng}
(?=\\P{sc=Bopo})\\p{scx=Bopo}
(?=\\P{sc=Bugi})\\p{scx=Bugi}
(?=\\P{sc=Buhd})\\p{scx=Buhd}
(?=\\P{sc=Cakm})\\p{scx=Cakm}
(?=\\P{sc=Copt})\\p{scx=Copt}
(?=\\P{sc=Cprt})\\p{scx=Cprt}
(?=\\P{sc=Cyrl})\\p{scx=Cyrl}
(?=\\P{sc=Deva})\\p{scx=Deva}
(?=\\P{sc=Dogr})\\p{scx=Dogr}
(?=\\P{sc=Dupl})\\p{scx=Dupl}
(?=\\P{sc=Geor})\\p{scx=Geor}
(?=\\P{sc=Glag})\\p{scx=Glag}
(?=\\P{sc=Gong})\\p{scx=Gong}
(?=\\P{sc=Gran})\\p{scx=Gran}
(?=\\P{sc=Grek})\\p{scx=Grek}
(?=\\P{sc=Gujr})\\p{scx=Gujr}
(?=\\P{sc=Guru})\\p{scx=Guru}
(?=\\P{sc=Hang})\\p{scx=Hang}
(?=\\P{sc=Hani})\\p{scx=Hani}
(?=\\P{sc=Hano})\\p{scx=Hano}
(?=\\P{sc=Hira})\\p{scx=Hira}
(?=\\P{sc=Java})\\p{scx=Java}
(?=\\P{sc=Kali})\\p{scx=Kali}
(?=\\P{sc=Kana})\\p{scx=Kana}
(?=\\P{sc=Khoj})\\p{scx=Khoj}
(?=\\P{sc=Knda})\\p{scx=Knda}
(?=\\P{sc=Kthi})\\p{scx=Kthi}
(?=\\P{sc=Latn})\\p{scx=Latn}
(?=\\P{sc=Limb})\\p{scx=Limb}
(?=\\P{sc=Lina})\\p{scx=Lina}
(?=\\P{sc=Linb})\\p{scx=Linb}
(?=\\P{sc=Mahj})\\p{scx=Mahj}
(?=\\P{sc=Mand})\\p{scx=Mand}
(?=\\P{sc=Mani})\\p{scx=Mani}
(?=\\P{sc=Mlym})\\p{scx=Mlym}
(?=\\P{sc=Modi})\\p{scx=Modi}
(?=\\P{sc=Mong})\\p{scx=Mong}
(?=\\P{sc=Mult})\\p{scx=Mult}
(?=\\P{sc=Mymr})\\p{scx=Mymr}
(?=\\P{sc=Orya})\\p{scx=Orya}
(?=\\P{sc=Perm})\\p{scx=Perm}
(?=\\P{sc=Phag})\\p{scx=Phag}
(?=\\P{sc=Phlp})\\p{scx=Phlp}
(?=\\P{sc=Rohg})\\p{scx=Rohg}
(?=\\P{sc=Shrd})\\p{scx=Shrd}
(?=\\P{sc=Sind})\\p{scx=Sind}
(?=\\P{sc=Sinh})\\p{scx=Sinh}
(?=\\P{sc=Sogd})\\p{scx=Sogd}
(?=\\P{sc=Sylo})\\p{scx=Sylo}
(?=\\P{sc=Syrc})\\p{scx=Syrc}
(?=\\P{sc=Tagb})\\p{scx=Tagb}
(?=\\P{sc=Takr})\\p{scx=Takr}
(?=\\P{sc=Tale})\\p{scx=Tale}
(?=\\P{sc=Taml})\\p{scx=Taml}
(?=\\P{sc=Telu})\\p{scx=Telu}
(?=\\P{sc=Tglg})\\p{scx=Tglg}
(?=\\P{sc=Thaa})\\p{scx=Thaa}
(?=\\P{sc=Tirh})\\p{scx=Tirh}
(?=\\P{sc=Yiii})\\p{scx=Yiii}
(?=\\p{Unified_Ideograph=True})(?!\\p{Block=CJK_Unified_Ideographs})(?!\\p{Block=CJK_Compatibility_Ideographs})
(?=\\p{Unified_Ideograph=True})(?:\\p{Block=CJK_Unified_Ideographs}|\\p{Block=CJK_Compatibility_Ideographs})
(?=\\p{Upper})
(?=\\R$)
(?=\\s*(?:[^,\\{\\[\\}\\]\\s]+|\"(?:[^\"\\\\]|\\\\.)*\")\\s*:)
(?=^
(?=^(?:(?:\u2702-{6})+|^
(?=^(?:(?:\u2702-{6})+|_{10}|
(?=^.+\\n
(?=^\\s*+-\\s*+define\\s*+\\(\\s*+[a-zA-Z\\d@_]++\\s*+\\()
(?=<
(?=<(
(?=<(?P<tag>[a-zA-Z]+)(?P<attr>.*?)(?P<end>/)?>(?:(?P<inner>.*?)</\\s*(?P=tag)\\s*>)?)
(?=<\\/
(?=c)_a++
(?=EI(?:[
(?>
(?>((\")((?:[^\"\\\\]|\\\\.)*)(\"))|((')((?:[^'\\\\]|\\\\.)*)('))|([-a-zA-Z0-9_.]+))
(?>(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)(?>%c'))(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>(?>\\\\)(?>.)|[^'])*)(?>(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)(?>'))
(?>(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)(?>%c\"))(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>(?>\\\\)(?>.)|[^\"])*)(?>(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)(?>\"))
(?>(?>(?>[[:space:]])+|(?>[;#])(?>(?>[^\\n])*))*)((?>\")(?>(?>(?>\\\\)(?>.)|[^\"])*)(?>\"))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>%\\()(?>(?>(?>\\\\)(?>.)|[^)])*)(?>\\)))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>%\\[)(?>(?>(?>\\\\)(?>.)|[^\\]])*)(?>\\]))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>%\\{)(?>(?>(?>\\\\)(?>.)|[^}])*)(?>\\}))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>%<)(?>(?>(?>\\\\)(?>.)|[^>])*)(?>>))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>')(?>(?>(?>\\\\)(?>.)|[^'])*)(?>'))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>\")(?>(?>(?>\\\\)(?>.)|[^\"])*)(?>\"))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>\\[)(?>(?>(?!\\])(?>(?>\\[:)(?>(?>alnum)(?![[:alnum:]_])|(?>alpha)(?![[:alnum:]_])|(?>ascii)(?![[:alnum:]_])|(?>blank)(?![[:alnum:]_])|(?>cntrl)(?![[:alnum:]_])|(?>digit)(?![[:alnum:]_])|(?>graph)(?![[:alnum:]_])|(?>lower)(?![[:alnum:]_])|(?>print)(?![[:alnum:]_])|(?>punct)(?![[:alnum:]_])|(?>space)(?![[:alnum:]_])|(?>upper)(?![[:alnum:]_])|(?>xdigit)(?![[:alnum:]_]))(?>:\\])|(?>(?>\\\\)(?>[0-3])(?>[0-7])(?>[0-7])|(?>\\\\x)(?>[[:xdigit:]])(?>[[:xdigit:]])|(?>\\\\)(?>.)|[^\\\\\\]])(?>(?>(?>\\-)(?>(?>\\\\)(?>[0-3])(?>[0-7])(?>[0-7])|(?>\\\\x)(?>[[:xdigit:]])(?>[[:xdigit:]])|(?>\\\\)(?>.)|[^\\\\\\]]))?)))+)(?>\\]))
(?>(?>(?>[[:space:]])+|(?>\\#)(?>(?>[^\\n])*))*)((?>`)(?>(?>(?>\\\\)(?>.)|[^`])*)(?>`))
(?>(?>(?>[[:space:]])+|(?>\\/\\*)(?>(?>(?!\\*\\/)(?>.))*)(?>\\*\\/)|(?>\\/\\/)(?>(?>[^\\n])*))*)((?>\")(?>(?>(?!\"|\\\\|[[:cntrl:]])(?>.)|(?>\\\\)(?>[\"\\\\\\/bfnrt]|(?>u)(?>[[:xdigit:]])(?>[[:xdigit:]])(?>[[:xdigit:]])(?>[[:xdigit:]])))*)(?>\"))
(?>.*(?:\\n\\-.*){
(?>[^;']|(''|(?>'([^']|\\')*[^\\\\]')))+;
'(?>[^']++|'')*+'|[\\d-.]++
(?>\\\\(?>[CM]-|c)?)
(?>\\\\)(?>.)
(?>\n               (?>\\r?)\\n|\n               (?>\\r*)(?>
(?><<-'((?:\\w+_|)
(?><<-(\"?)((?:\\w+_|)
(?>aa|a)(?>aa|a)(X)\\k<-1>
(?i)(%macro)\\s+(
(?i)(%mend)(?:\\s+(?:(\u00a72)|(
(?i)(/providers/(?P<child_namespace>[^/]*))?/(?P<child_type>[^/]*)/(?P<child_name>[^/]*)
(?i)(?:(?P<hours>[0-9.]+)\\s*(?:hours?)|(?P<mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*)Z?$
(?i)(?:(namespace)|[a-z0-9_]+)?(\\\\)(?=.*?[^a-z_0-9\\\\])
(?i)(?:\\b|T)(?P<hour>\\d{1,2})[:](?P<min>\\d{2})(?:[:](?P<sec>\\d{2})(?P<fractional>[.]\\d+)?)?(?:[^\\d]|\\z)
(?i)(?<_1>\\[)\\s*(?<_2>-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*(?<_3>[~|^$*]?=)\\s*(?:(?<_4>-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|(?<_5>(?>(?<_6>['\"])(?:[^\\\\]|\\\\.)*?(?<_7>\\k<_6>)))))?\\s*(?<_8>\\])
(?i)(?=[^$a-z0-9_\\\\])
(?i)(?=[^a-z_0-9\\\\])
(?i)(?=[a-z0-9_\\\\]+)
(?i)(?=[a-z0-9_]*[^a-z0-9_\\\\])
(?i)(?=\\\\?[a-z_0-9]+\\\\)
(?i)(?=\\s*$|[^a-z0-9_\\\\])
(?i)(?P<day>\\d{1,2})(?:st|nd|rd|th)?[\\s\\p{Z}]+(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<year>(\\d{4})|(\\d{2}))
(?i)(?P<day>\\d{1,2})-(?P<month>\\p{L}{3,})-(?P<year>(\\d{4})|(\\d{2}))
(?i)(?P<dayname>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<day>\\d{1,2})(?:st|nd|rd|th)?[\\s\\p{Z}]+(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<year>(\\d{4})|(\\d{2}))
(?i)(?P<dayname>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<day>\\d{1,2})(?:st|nd|rd|th)?
(?i)(?P<dayname>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<day>\\d{1,2})(?:st|nd|rd|th)?[.,\\s\\p{Z}]+(?P<year>(\\d{4})|(\\d{2}))
(?i)(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<day>\\d{1,2})(?:st|nd|rd|th)?
(?i)(?P<month>\\p{L}{3,})[.,\\s\\p{Z}]+(?P<day>\\d{1,2})(?:st|nd|rd|th)?[.,\\s\\p{Z}]+(?P<year>(\\d{4})|(\\d{2}))
(?i)(?P<month>\\p{L}{3,})[\\s\\p{Z}]+(?P<year>\\d{4})
(?i)(?P<op>[\u00d7*/^v+-])?\\s*((?P<num>\\d*)d(?P<sides>[f%]|\\d+)(?P<explode>!)?(?P<max>[<>]\\d{1,4})?(?P<keep>k-?\\d{1,3})?|(?P<alt>\\d{1,5})(?P<fudge>f)?)( for (?P<for>[^,;]+))?
(?i)(?P<x1>\\d{1,2})[/.-](?P<x2>\\d{1,2})[/.-](?P<x3>\\d{2})
(?i)(?P<x1>\\d{1,2})[/.-](?P<x2>\\d{1,2})[/.-](?P<year>\\d{4})
(?i)(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})
(?i)(?P<year>\\d{4})/(?P<month>\\d{1,2})/(?P<day>\\d{1,2})
(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\])
(?i)(\\\\)
(?i)(\\\\)?(?=\\b[a-z_][a-z_0-9]*\\s*\\()
(?i)(\\\\)?\\b(st(dClass|reamWrapper)|R(RD(Graph|Creator|Updater)|untimeException|e(sourceBundle|cursive(RegexIterator|Ca(chingIterator|llbackFilterIterator)|TreeIterator|Iterator(Iterator)?|DirectoryIterator|FilterIterator|ArrayIterator)|flect(ion(Method|Class|ZendExtension|Object|P(arameter|roperty)|Extension|Function(Abstract)?)?|or)|gexIterator)|angeException)|G(ender\\Gender|lobIterator|magick(Draw|Pixel)?)|X(sltProcessor|ML(Reader|Writer)|SLTProcessor)|M(ysqlndUh(Connection|PreparedStatement)|ongo(Re(sultException|gex)|Grid(fsFile|FS(Cursor|File)?)|BinData|C(o(de|llection)|ursor(Exception)?|lient)|Timestamp|I(nt(32|64)|d)|D(B(Ref)?|ate)|Pool|Log)?|u(tex|ltipleIterator)|e(ssageFormatter|mcache(d)?))|Bad(MethodCallException|FunctionCallException)|tidy(Node)?|S(tackable|impleXML(Iterator|Element)|oap(Server|Header|Client|Param|Var|Fault)|NMP|CA(_(SoapProxy|LocalProxy))?|p(hinxClient|oofchecker|l(M(inHeap|axHeap)|S(tack|ubject)|Heap|T(ype|empFileObject)|Ob(server|jectStorage)|DoublyLinkedList|PriorityQueue|Enum|Queue|Fi(le(Info|Object)|xedArray)))|e(ssionHandler(Interface)?|ekableIterator|rializable)|DO_(Model_(ReflectionDataObject|Type|Property)|Sequence|D(ata(Object|Factory)|AS_(Relational|XML(_Document)?|Setting|ChangeSummary|Data(Object|Factory)))|Exception|List)|wish(Result(s)?|Search)?|VM(Model)?|QLite(Result|3(Result|Stmt)?|Database|Unbuffered)|AM(Message|Connection))|H(ttp(Re(sponse|quest(Pool)?)|Message|InflateStream|DeflateStream|QueryString)|aru(Image|Outline|D(oc|estination)|Page|Encoder|Font|Annotation))|Yaf_(R(oute(_(Re(write|gex)|Map|S(tatic|imple|upervar)|Interface)|r)|e(sponse_Abstract|quest_(Simple|Http|Abstract)|gistry))|Session|Con(troller_Abstract|fig_(Simple|Ini|Abstract))|Dispatcher|Plugin_Abstract|Exception|View_(Simple|Interface)|Loader|A(ction_Abstract|pplication))|N(o(RewindIterator|rmalizer)|umberFormatter)|C(o(nd|untable|llator)|a(chingIterator|llbackFilterIterator))|T(hread|okyoTyrant(Table|Iterator|Query)?|ra(nsliterator|versable))|I(n(tlDateFormatter|validArgumentException|finiteIterator)|terator(Iterator|Aggregate)?|magick(Draw|Pixel(Iterator)?)?)|php_user_filter|ZipArchive|O(CI-(Collection|Lob)|ut(erIterator|Of(RangeException|BoundsException))|verflowException)|D(irectory(Iterator)?|omainException|OM(XPath|N(ode(list)?|amedNodeMap)|C(haracterData|omment|dataSection)|Text|Implementation|Document(Fragment)?|ProcessingInstruction|E(ntityReference|lement)|Attr)|ate(Time(Zone)?|Interval|Period))|Un(derflowException|expectedValueException)|JsonSerializable|finfo|P(har(Data|FileInfo)?|DO(Statement)?|arentIterator)|E(v(S(tat|ignal)|Ch(ild|eck)|Timer|I(o|dle)|P(eriodic|repare)|Embed|Fork|Watcher|Loop)?|rrorException|xception|mptyIterator)|V(8Js(Exception)?|arnish(Stat|Log|Admin))|KTaglib_(MPEG_(File|AudioProperties)|Tag|ID3v2_(Tag|Frame|AttachedPictureFrame))|QuickHash(StringIntHash|Int(S(tringHash|et)|Hash))|Fil(terIterator|esystemIterator)|mysqli(_(stmt|driver|warning|result))?|W(orker|eak(Map|ref))|L(imitIterator|o(cale|gicException)|ua(Closure)?|engthException|apack)|A(MQP(C(hannel|onnection)|E(nvelope|xchange)|Queue)|ppendIterator|PCIterator|rray(Iterator|Object|Access)))\\b
(?i)(\\[)\\s*(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*([~|^$*]?=)\\s*(?:(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|((?>(['\"])(?:[^\\\\]|\\\\.)*?(\\6)))))?\\s*(\\])
(?i)/subscriptions/(?P<subscription>[^/]*)(/resourceGroups/(?P<resource_group>[^/]*))?(/providers/(?P<namespace>[^/]*)/(?P<type>[^/]*)/(?P<name>[^/]*)(?P<children>.*))?
(?i)[\\w\\-]+((?P<h>(\\.h(h|xx|\\+\\+|pp)?)?)|(?P<c>\\.((c(c|xx|\\+\\+|pp)?)|ipp)))$
(?i)\"csrf_token\"\\s*:\\s*\"(?P<csrftoken>\\w+?)\"
(?i)\"rhx_gis\"\\s*:\\s*\"(?P<rhx_gis>[a-f0-9]+)\"
(?i)\\[(\\[[\\w_,.+%$
(?i)\\A[A-Z0-9_][A-Z0-9\\-\\_]*\\z
(?i)\\b(?P<trigger>(1Z ?[0-9A-Z]{3} ?[0-9A-Z]{3} ?[0-9A-Z]{2} ?[0-9A-Z]{4} ?[0-9A-Z]{3} ?[0-9A-Z]|T\\d{3} ?\\d{4} ?\\d{3}|\\d{22}))\\b
(?i)\\b(?P<trigger>[0-9]{10}|[0-9]{12}|[0-9]{15}|[0-9]{20})\\b
(?i)\\b(?P<trigger>[A-Za-z]{2}[0-9]+US)\\b
(?i)\\b(?P<trigger>\\d{30}\\b)|(\\b91\\d+\\b)|(\\b\\d{20})\\b
(?i)\\b(?P<trigger>91[0-9]+)\\b
(?i)\\b(?P<trigger>E\\D{1}\\d{9}\\D{2}$|^9\\d{15,21})\\b
(?i)\\b(new)\\s+(?:(\\$
(?i)\\s*(?:(?:(?P<xcol>[A-Z])(?P<xrow>[1-9][0-9]*))|(?P<col>[A-Z])|(?P<row>[1-9][0-9]*))\\s*$
(?i)\\s*(?=[a-z_0-9\\\\])
(?i)\\\\u([\\da-f]{4})
(?i)^((([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\\\.([a-z]|\\\\d|[!#\\\\$%&'\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\\\x22)((((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(([\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x7f]|\\\\x21|[\\\\x23-\\\\x5b]|[\\\\x5d-\\\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\\\\\([\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0d-\\\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\\\x20|\\\\x09)*(\\\\x0d\\\\x0a))?(\\\\x20|\\\\x09)+)?(\\\\x22)))@((([a-z]|\\\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\\\d|-|\\\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$
(?i)^((?P<scheme>http[s]?)://)?(?P<host>[0-9a-z-_.]+)(:(?P<port>\\d+))?(?P<path>(/)?(wsman)?)?
(?i)^(.*?)[^a-z0-9](?P<airdate>(\\d{2})[^a-z0-9](\\d{2})[^a-z0-9](19|20)(\\d{2}))[^a-z0-9]
(?i)^(.*?)[^a-z0-9](?P<airdate>(19|20)(\\d{2})[.\\/-](\\d{2})[.\\/-](\\d{2}))[^a-z0-9]
(?i)^(.*?)[^a-z0-9](?P<season>\\d{1,2})x(?P<episode>\\d{1,3})[^a-z0-9]
(?i)^(.*?)[^a-z0-9]s(?P<season>\\d{1,2})[^a-z0-9]
(?i)^(.*?)[^a-z0-9]s(?P<season>\\d{1,2})[^a-z0-9]?d\\d{1}[^a-z0-9]
(?i)^(.*?)[^a-z0-9]s(?P<season>\\d{1,2})[^a-z0-9]?e(?P<episode>\\d{1,3})(?:[e-])(?P<lastepisode>\\d{1,3})[^a-z0-9]
(?i)^(.*?)[^a-z0-9]s(?P<season>\\d{1,2})[^a-z0-9]?e(?P<episode>\\d{1,3})[abr]?[^a-z0-9]
(?i)^(.*?)[^a-z0-9]s(?P<season>\\d{2})[^a-z0-9]?e(?P<episode>\\d{2})e?(\\d{2})[^a-z0-9]
(?i)^(\\\\\\\\\\\\\\\\[\\\\?\\\\.]\\\\\\\\GLOBALROOT\\\\\\\\Device\\\\\\\\[^/\\\\\\\\]+)([/\\\\\\\\]?.*)
(?i)^(-|\\\"|?|?|'|?|?|?|?|?|?|?|?|?|?||who|[\\d]+|year| years|post|life|age|January|February|March|April|May|June|July|August|September|October|November|December)$
(?i)^[\\s]*FROM[ \\f\\r\\t\\v]+(?P<image>[^ \\f\\r\\t\\v\\n#]+)
(?i)^[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}|\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?$
(?i)^\\s*(namespace)\\b\\s+(?=([a-z0-9_\\\\]+\\s*($|[;{]|(\\/[\\/*])))|$)
(?i)^\\s*+(INSERT (INTO)?\\s*(\\w+\\.)?\\w+\\s*(\\([^\\)]*\\))?\\s*VALUES?)\\s*(\\([^\\)]*\\))\\s*(ON DUPLICATE KEY UPDATE.+)?
(?i)^karma:?\\s+(?:for\\s+)?([\\d\\pL]+)\\??$
(?i)<a href=\\\"(?P<url>.+?)#md5=.+?\\\">(?P<filename>.+?)</a>
(?i)<a href=\\\"(?P<url>.+?)\\\"\\s+rel=\\\"download\">(?P<version>.+?) download_url</a>
(?i)<meta.*charset=\"?\\s*(?P<charset>[a-zA-Z0-9_.:-]+)\\s*\"
(?i)<meta.*charset=\"?\\s*(?P<charset>[a-zA-Z0-9_.:-]+)\\s*\"?
(?i)c:\\\\program
(?i:
(?idsumx-idsumx)(?=b)(?!x)(?<named>x)
(?im)<(?P<tag>(/*\\s*|\\?*|\\!*)(figcaption|expression|blockquote|plaintext|textarea|progress|optgroup|noscript|noframes|menuitem|frameset|fieldset|!DOCTYPE|datalist|colgroup|behavior|basefont|summary|section|isindex|details|caption|bgsound|article|address|acronym|strong|strike|source|select|script|output|option|object|legend|keygen|ilayer|iframe|header|footer|figure|dialog|center|canvas|button|applet|video|track|title|thead|tfoot|tbody|table|style|small|param|meter|layer|label|input|frame|embed|blink|audio|aside|alert|time|span|samp|ruby|meta|menu|mark|main|link|html|head|form|font|code|cite|body|base|area|abbr|xss|xml|wbr|var|svg|sup|sub|pre|nav|map|kbd|ins|img|div|dir|dfn|del|col|big|bdo|bdi|!--|ul|tt|tr|th|td|rt|rp|ol|li|hr|em|dt|dl|dd|br|u|s|q|p|i|b|a|(h[0-9]+)))([^><]*)([><]*)
(?ims)(?P<tag><(/*\\s*|\\?*|\\!*)(figcaption|expression|blockquote|plaintext|textarea|progress|optgroup|noscript|noframes|menuitem|frameset|fieldset|!DOCTYPE|datalist|colgroup|behavior|basefont|summary|section|isindex|details|caption|bgsound|article|address|acronym|strong|strike|source|select|script|output|option|object|legend|keygen|ilayer|iframe|header|footer|figure|dialog|center|canvas|button|applet|video|track|title|thead|tfoot|tbody|table|style|small|param|meter|layer|label|input|frame|embed|blink|audio|aside|alert|time|span|samp|ruby|meta|menu|mark|main|link|html|head|form|font|code|cite|body|base|area|abbr|xss|xml|wbr|var|svg|sup|sub|pre|nav|map|kbd|ins|img|div|dir|dfn|del|col|big|bdo|bdi|!--|ul|tt|tr|th|td|rt|rp|ol|li|hr|em|dt|dl|dd|br|u|s|q|p|i|b|a|(h[0-9]+))([^><]*)([><]*))
(?imsU)\\[quote(?:=[^\\]]+)?\\](.+)\\[/quote\\]
(?imU)^(.*)$
(?imx)\n            (\n                # either a new paragraph, or the beginning of the text + empty lines\n                (\\n\\n|\\A\\n*)\n                # any number of lines starting with 'copyright' followed by a new paragraph\n                (^\\x20*copyright.*?$)+\n                \\n\\n\n            )\n            |\n            (\n                # or any lines that really look like a copyright statement\n                ^copyright (\\s+(c|\\d+))+ .*?$\n            )\n        
(?is)([^\\\\]?)<
(?is)CREATE.*\\s+AS\\s+((?U).*)(\\$[^\\$]*\\$)
(?ismU)<nav>(.*)</nav>
(?iu)(?P<editable>-e)?\\s*(?P<prefix>\\S+#egg=)(?P<package>[a-z0-9-_.]+)(?P<postfix>\\S+)\\s*(?P<comment>#.*)?$
(?iu)(?P<package>\\S+)==(?P<version>\\S+)\\s*(?P<hashes>(?:--hash=\\S+\\s*)+)?(?P<comment>#.*)?$
(?ix) (?: (
(?ix) (?: (?<=^|;) \\s* (?:(
(?ix) (?<=^|;) \\s* (
(?ix) (?<=^|;) \\s* (proc) \\s+ (
(?ix) \\b ( (
(?ix) \\b (?<!%) (
(?ix) ^\n        (?: (?P<category> [[:alpha:]]{1,20} ) = )?\n        (?P<tag> (?: [[:alnum:]] | - | \\* )+ )\n    $ 
(?ix) ^\n        (?P<language> [[:alpha:]]{2,3} )\n        (?: _  (?P<region> [[:alpha:]]{2} | [[:digit:]]{3} ))?\n        (?: \\. (?P<encoding> [0-9a-zA-Z-]{1,20} ))?\n        (?: @  (?P<variant> [[:alnum:]]{1,20} ))?\n    $ 
(?ix)(?:P?\n                (?:\n                    [0-9]+\\s*y(?:ears?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*m(?:onths?)?\\s*\n                )?\n                (?:\n                    [0-9]+\\s*w(?:eeks?)?\\s*\n                )?\n                (?:\n                    (?P<days>[0-9]+)\\s*d(?:ays?)?\\s*\n                )?\n                T)?\n                (?:\n                    (?P<hours>[0-9]+)\\s*h(?:ours?)?\\s*\n                )?\n                (?:\n                    (?P<mins>[0-9]+)\\s*m(?:in(?:ute)?s?)?\\s*\n                )?\n                (?:\n                    (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*s(?:ec(?:ond)?s?)?\\s*\n                )?Z?$
(?ix)(?>[^\\S ]\\s*|\\s{2,})(?=(?:(?:[^<]++|<(?!/?(?:textarea|pre)\\b))*+)(?:<(?>textarea|pre)\\b|\\z))
(?ix)\\b(
(?J)\\(\\?(?:P?<(?<name>[a-z_0-9]+)>|'(?<name>[a-z_0-9]+)')
(?J)\\W?:(?P<name>[a-z]+)|\\w?:(?P<name>[a-z]+)
(?m)(?d)^\\-{3}
(?m)(?d)^\\+{3}
(?m)(?P<d>\\d)\\.0(?P<s>,?)$
(?m)(?P<img>\\S+)\\s+pid: (?P<pid>\\d+)\\s+type: File\\s+(?P<hnd>\\w+): (?P<rest>.+)$
(?m)(?P<key>\\w+):\\s+(?P<value>\\w+)$
(?m)(?P<symbol>_ZN[0-9]+.*E)
(?m)(call)\\s+(?P<cmd>\\w+)\\s+(?P<arg>.+)\\s*$
(?m)\\\\
(?m)^(#line\\s+[0-9]+\\s+\")[^\"]*[/\\\\]([^\"]*\")
(?m)^\\s+\\d+\\s+(?P<hostname>[-\\w]+)\\s+(?P<status>.+)\\s*$
(?m)^test result: ok. (?P<num_passed>\\d+) passed;
(?m)fo\\.addVariable\\(\"file\",\\s\"(?P<fileid>[\\da-z]+)\"\\);\\n\\s+fo\\.addVariable\\(\"s\",\\s\"(?P<serverid>\\d+)\"\\);
(?m:\\s*(?:([^\\s\\\\'\"]+)|'([^']*)'|\"((?:[^\"\\\\]|\\\\.)*)\"|(\\\\.?)|(\\S))(\\s|\\z)?)
(?m:\\s*-\\s\\$include\\s+(?P<filename>.+)$)
(?m:^\\s*\\$include:\\s+(?P<filename>.+)$)
(?mi-Us)/+
(?mi-Us):\\w+\\??
(?ms)^```(?:(?P<type>yaml)\\\\w*\\\\n(?P<content>.+?)|\\\\w*\\\\n(?P<content>\\\\{.+?\\\\}))\\\\n^```
(?msU)device {.*id = ([0-9]+)[^0-9].*model = \\\"(.*)\\\".*^}$
(?msU:<interface[^>]*>(.+)</interface>)
(?mU)<\\/tr><tr><td>([^\\s]+)<\\/td><td>(\\d{4}-\\d{2}-\\d{2})<\\/td><td>(.*)<\\/td>
(?mU)mp4\",\"url\":\"(.*)\"
(?mx)\n        ^(?P<w>\\W*)  # ident\n\n        \\$stack\\.push\\(\n            (?P<a>[^),]+),\\s\n            (?P<b>[^),]+)\n        \\);\\n\n\n        \\W*\\$assignFromStack\\(this\\);\n    
(?mx)\n        ^(?P<w>\\W*)  # ident\n\n        \\$stack\\.push\\(\n            (?P<a>[^)]+)\\.bind\\([^)]+\\)\n        \\);\\n\n\n        \\W* \\$stack\\.pop\\(\\)\\(\\);\n    
(?mx)\n        ^(?P<w>\\W*)  # ident\n\n        \\$stack\\.push\\(\n            (?P<a>[^)]+)\n        \\);\\n\n\n        \\W* (?P<b>\\w+) = \\$stack\\.pop\\(\\);\n    
(?mx)\n        ^(?P<w>\\W*)  # ident\n\n        while\\s \\( (?P<s>\\w+) \\)\\s \\{\\n\n            (?P<b>(\\W*\\w+\\W*)*\\n)\n            \\W*return;\\n\n        \\W*\\}\n    
(?mx)\n        ^(?P<w>\\W*)\n\n        \\$stack\\.push\\(\n            (?P<a>[^)]+)\n        \\);\\n\n\n        \\W* \\$stack\\.push\\(\n            (?P<b>[^)]+)\n        \\);\n    
(?'name'[\\w-_:]+)(?'eq'\\s*=\\s*)?(?(eq)([\"'])(?'val'.*?)\\g{-2})
(?P<1>\\d{3})(?P<2>\\d{3})(?P<3>\\d{3})(?P<4>\\d{2})
(?P<1>\\\\w+)(\\\\s+)(?P<2>\\\\w+)
(?P<1>\\\\w+)\\\\s(?P<2>\\\\w+)
(?P<a>[\\<\\>\\!\\=])\\s+(?P<b>[\\<\\>\\!\\=])
(?P<action>[KS])(?P<prio>\\d+)(?P<name>\\S+)
(?P<address>.+)
(?P<address>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})\\|(?P<port>[a-z0-9]+)
(?P<ADDRESS>\\S+)\\s+dev\\s+(?P<DEV>\\S+)\\s+proto\\s+(?P<PROTO>\\S+)\\s+metric\\s+(?P<METRIC>\\S+)
(?P<ADDRESS>\\S+)\\s+dev\\s+(?P<DEV>\\S+)\\s+proto\\s+(?P<PROTO>\\S+)\\s+metric\\s+(?P<METRIC>\\S+)\\s+mtu\\s+(?P<MTU>\\S+)
(?P<ADDRESS>\\S+)\\s+dev\\s+(?P<DEV>\\S+)\\s+src\\s+(?P<SRC>\\S+)
(?P<ADDRESS>\\S+)\\s+from\\s+(?P<FROM>\\S+)\\s+dev\\s+(?P<DEV>\\S+)\\s+src\\s+(?P<SRC>\\S+)\\s+metric\\s+(?P<METRIC>\\d+)
(?P<ADDRESS>\\S+)\\s+from\\s+(?P<FROM>\\S+)\\s+via\\s+(?P<VIA>\\S+)\\s+dev\\s+(?P<DEV>\\S+)
(?P<adress>.*):(?P<port>[0-9]+)
(?P<alert_type>\\S+): \\[(?P<source_host>\\S+)\\] \\[(?P<entity_type>\\S+)\\] \\[(?P<entity>.*)\\] (?P<alert_message>.*)
(?P<align>(?P<fill>[^{}])?[<>=\\^])?(?P<sign>[\\+\\- ])?(?P<alternate>#)?(?P<zero>0)?(?P<width>[0-9]+)?(?P<comma>[,])?(?P<precision>\\.[0-9]+)?(?P<type>[bcdeEfFgGnosxX%]+)?
(?P<all>                                                              (?# match the whole textarea tag )\n\t\t\t\t<textarea                                                           (?# the opening of the textarea and some optional attributes )\n\t\t\t\t(                                                                   (?# match a id attribute followed by some optional ones and the name attribute )\n\t\t\t\t\t(?P<before1>[^>]*)\n\t\t\t\t\t(?P<id1>id=[\"'](?P<id_value1>[^>\"']*)[\"'])\n\t\t\t\t\t(?P<between1>[^>]*)\n\t\t\t\t\tname=[\"']comment[\"']\n\t\t\t\t\t|                                                               (?# match same as before, but with the name attribute before the id attribute )\n\t\t\t\t\t(?P<before2>[^>]*)\n\t\t\t\t\tname=[\"']comment[\"']\n\t\t\t\t\t(?P<between2>[^>]*)\n\t\t\t\t\t(?P<id2>id=[\"'](?P<id_value2>[^>\"']*)[\"'])\n\t\t\t\t\t|                                                               (?# match same as before, but with no id attribute )\n\t\t\t\t\t(?P<before3>[^>]*)\n\t\t\t\t\tname=[\"']comment[\"']\n\t\t\t\t\t(?P<between3>[^>]*)\n\t\t\t\t)\n\t\t\t\t(?P<after>[^>]*)                                                    (?# match any additional optional attributes )\n\t\t\t\t><\\/textarea>                                                       (?# the closing of the textarea )\n\t\t\t)
(?P<all>(?P<href>href=(\"|'))?(?P<link>https?://(?P<name>[^\\s]+)))
(?P<all>(->|\\.|@|::)?([\\w]+))
(?P<amount>\\d+) ?(?P<division_units>days|weeks|months|years|hours|minutes|seconds)?
(?P<amount>\\d+)d(?P<sides>\\d+)\\+?(?P<modifier>\\d+)?
(?P<amp>&(?:amp;)?)(?P<prefix>[a-z0-9]{1,3}:)?(?P<name>[^=]+)=(?P<value>[^&]+)
(?P<app_id>[^_]+)\\_(?P<id>[\\S]+)
(?P<app>[a-z0-9-]+)_?(?P<version>v[0-9]+)?\\.?(?P<c_type>[a-z-_]+)?.(?P<c_num>[0-9]+)
(?P<argkey>[^=]+)=(?P<argvalue>[^&]*)
(?P<as_is>[a-z0-9.-])|(?P<underscore>__)|_(?P<uppercase>[a-z])|_(?P<N>[0-9])
(?P<asset>[\\w_.:/-]+)(?:\\#(?P<defname>[\\w_]+))?(\\.(?P<ext>.*))
(?P<at>@)?(?P<name>.+?$)
(?P<atom>[A-Z][a-z]?)(?P<coeff>\\d*)
(?P<attr_name>\\w+)=\"(?P<attr_value>[^\"]+)\\s*
(?P<attr>(password|name|login).?=)[^&]*(?P<amp>&|$)
(?P<attr>[-\\w]+)(\\s*=\\s*[\\'\"](?P<val>.*?)[\\'\"])?
(?P<attr>href|src)=\"(?P<url>%%%%%%%%%%%%%%%%%%%%)\"
(?P<attr>href|src)=\"(?P<url>[^\"]*)\"
(?P<attribute>src|href)=(?P<quote>[\\'\"])(?P<relpath>\\S*)(?P=quote)
(?P<audio_encoding>mp3|DD5\\.1|DDP5\\.1|AC3\\.5\\.1)
(?P<AUTH>Authentication\\sfailed.*)|(?P<PERM>.*Permission\\sdenied.*)
(?P<author>.*) \\[archived by (?P<archivist>.*)\\]
(?P<author>[a-zA-Z0-9_]+)!(?P=author)@(?P=author).tmi.twitch.tv
(?P<axis>X|Y|Z)(?P<dir>\\+|\\-)
(?P<backslash>\\\\)|(?P<dollar>\\$\\$)|(?P<subst>\\$\\{(?P<var>\\w+)(?P<code>.*?)\\})
(?P<backslashes>\\\\*)\\$(?P<symbol>\\w+)
(?P<badpasswd>ogin incorrect)
'(?P<band_num>\\d+)'
(?P<BAR>(?P<PERCENT>\\d{1,3})%\\s?\\[\\s*[=+>]*\\s*\\].+)
(?P<base_url>http://[0-9a-zA-Z\\-\\.]*/\n                            (lokad|opid)\n                            /)\n                            manifest.m3u8\\?tlm=hls&streams=\n                            (?P<streams>[0-9a-zA-Z\\/\\.\\,:]+)\n                         
(?P<base>[\\w\\-]+)(?P<spacer>(?:,|\\/)\\s*)(?P<suffix>[\\w\\-]+)?
(?P<basefile>(MIGR|SIV)FS \\d+[:/]\\d+)$
(?P<basefile>(RIFS|RNFS) \\d{4}[:/_-]\\d{1,3})$
(?P<basefile>\\d{4}[:/_-]\\d{1,3})(?:|\\.\\w+)$
(?P<basefile>KVV?FS \\d{4}:\\d+)
(?P<basefile>LIFS \\d{4}:\\d{1,3})
(?P<basefile>LMV?FS \\d{4}:\\d{1,3})
(?P<bef>[.?!])\\s?\\)
(?P<before>(.|\n)*?)(?P<invisible>(<script(.|\n)*?</script>|<style(.|\n)*?</style>|<(.|\n)*?>))
(?P<before>(.|\n)*?)(<ENAMEX ID=\"(?P<chain_id>.*?)\" TYPE=\"(?P<entity_type>.*?)\">(?P<entity_string>(.|\n)*?)</ENAMEX>)?
(?P<before>(.|\n)*?)<s i=\"(?P<sentence_id>.*?)\">(?P<tagged_sentence>(.|\n)*?)</s>
(?P<before>.*)(?P<url>http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)(?P<after>.*?)
(?P<before>.*)selected_int_kind\\((?P<args>.*)\\)(?P<after>.*)
(?P<before>.*)selected_real_kind\\((?P<args>.*)\\)(?P<after>.*)
(?P<before>.*?)[\\(]host (?P<host>\\S+) (?P<action>[^:]+): (?P<message>.*)[\\)]
(?P<begin>.+ )/.+/(?P<constant>IRCLogParser/.+\\n)
(?P<begin>^\\[{3,})[ ]*\\n(?P<content>.*?)(?P<end>^\\]{3,})[ ]*$
(?P<begin>^<{3,})[ ]*\\n(?P<theorem>.*?)(?P<end>^>{3,})[ ]*$
(?P<bindkey>\\$bindkey)
(?P<bitrate>\\d+)K_(?P<width>\\d+)x(?P<height>\\d+)
(?P<block>[-]{3}.*?[-]{3})
(?P<block>[-]{3}\\n.*?\\n[-]{3})
(?P<block>[`]{3}.*?[`]{3})
(?P<block>`.*?`)
(?P<block><PP_HEADER)\\s+(?P<entries>.*?)/>
(?P<body_tag><body[^>]+>)
(?P<box>\\$box(?P<env>.*?)\\$endbox)
(?P<browser>Camino|Kindle(\\ Fire\\ Build)?|Firefox|Safari|MSIE|AppleWebKit|Chrome|IEMobile|Opera|Silk|Lynx|Version|Wget|curl|NintendoBrowser|PLAYSTATION\\ \\d+)\n                (?:;?)\n                (?:(?:[/ ])(?P<version>[0-9A-Z.]+)|/(?:[A-Z]*))
(?P<bucket>.*?)\\.s3(-website-(?P<region>.*?))?\\.amazonaws.com
(?P<c>[!\\(\\)<>,\\?\\]\\[\\{\\} \\\\'\"`*\\^#|$&;])
(?P<c>[\\\\\\.\\+\\*\\?\\(\\)\\|\\[\\]\\{\\}\\^\\$])
(?P<callname>[a-zA-Z_][\\w.]*)[ \\t]*\\((?P<callparams>.+?)?\\)$
(?P<cap_pos>position\\s*:\\s*(?P<cap_position>(TOP)|(BOTTOM))\\;*)
(?P<card_num>\\d+)-(?P<dev_num>\\d+)
(?P<cblock>[`]{3}.*?[`]{3})
(?P<cblock>\\<code.*?\\<\\/code\\>)
(?P<class>(^(([\\\\])|([A-Z]))([A-Za-z0-9_\\\\]+)$))
(?P<class>\\S.*\\s+)?(?P<src>(?:https?:\\/\\/|\\/|\\S+\\/)\\S+)(?:\\s+(?P<width>\\d+))?(?:\\s+(?P<height>\\d+))?(?P<title>\\s+.+)?
(?P<classOrFunction>\\w+){0,1}(?:\\:\\:|->){0,1}(?P<method>\\w+){0,1}
(?P<cline>[`]{1}.*?[`]{1})
(?P<cname>.+)
(?P<code>[\\w-]+)
(?P<code>^\\d*)\\s*(?P<response>.*)
(?P<code>LC08|LE07|LT05|LT04)(?P<path>[0-9]{3})(?P<row>[0-9]{3})(?P<productyear>[0-9]{4})(?P<julianday>[0-9]{3})
(?P<code>LC8|LE7|LT5)(?P<path>[0-9]{3})(?P<row>[0-9]{3})(?P<productyear>[0-9]{4})(?P<julianday>[0-9]{3})
(?P<codes>\\d+(,\\d+)*)\\t(?P<utf8>.+)
(?P<column>\\$column(\\[(?P<options>.*?)\\])*)
(?P<column>^.*)(?P<operator>==|!=|=\\*|!\\*|\\^\\*|\\$\\*|>=|>|<=|<)(?P<value>.*$)
(?P<columns>\\$columns(?P<env>.*?)\\$endcolumns)
(?P<comm>\\S+):(?P<pid>\\d+) \\[(?P<prio>\\d+)\\] success=(?P<success>\\d) CPU:(?P<cpu>\\d+)
(?P<command>[MmZzLlHhVvCcSsQqTtAa])|(?P<num>-?(([0-9]*[.][0-9]*)|[0-9]+)([eE][+-]?[0-9]*)?)
(?P<command>^.+?)_(?P<platform>.+?)\\.md$
(?P<command>auth add) (?P<permissions>.*) to users (?P<users>.*)
(?P<command>auth del) (?P<permissions>.*) to users (?P<users>.*)
(?P<command>auth list)
(?P<command>die)
(?P<command>reborn)
(?P<comment>!--)|(?P<slash>/?)\\s*(?P<tag>[a-z]+)(?=[^a-z])
(?P<comp>et al\\.)(?:\\.)
(?P<config>[dlx])(?P<stem>[a-z]+)
(?P<CONN>[^\\[\\s]+)\\[\\d+\\]:\\s+(?P<KEY>.*):\\s+(?P<VALUE>.*)
(?P<CONN>[^\\[\\s]+)\\[\\d+\\]:\\s+ESTABLISHED\\s+(?P<AGO>.*)\\s+ago,\\s+(?P<LOCAL_TEP>[\\d+.]+\\[.*\\])...(?P<REMOTE_TEP>[\\d+.]+\\[.*\\])$
(?P<CONN>[^\\[\\s]+)\\{\\d+\\}:\\s+(?P<LINE>.*)
(?P<CONN>\\w[\\w\\s]*\\w)\\s*:\\s+(?P<KEY>\\S+):\\s+(?P<TUNNEL>.*)\\s+TUNNEL,\\s+(?P<KEY_2>\\S+)=(?P<VALUE>\\S+)
(?P<CONNECTION_ID>\\[\\s*\\d*\\])\\s*(?P<CONNECTION_REPORT>.*)
(?P<CONNECTION>Couldn't\\sread\\spacket:\\sConnection\\sreset\\sby\\speer)
(?P<CONNECTIONS>^Connections)
(?P<contenttype>.*); ?charset[^;]+(?P<extra>;.*)?
(?P<cookie>JSESSIONID=[0-9A-F]*); Path=/manager(/)?; HttpOnly
(?P<correios>.*) - (?P<cidade>.*)/(?P<estado>\\w{2})
(?P<count>[0-9\\-]+)</span>/(?P<total>[0-9\\-]+)</a></span></td>
(?P<count>[0-9][0-9 ]*) records?$
(?P<count>[0-9]+) (?P<type>assertions?|test cases?|failures?) ((?P<expected>expected)|(out of (?P<total>[0-9]+) (?P<status>passed|failed|skipped|aborted)))
(?P<count>[0-9]+) assertions? out of (?P<total>[0-9]+) (?P<status>passed|failed)
(?P<count>\\d+)(?P<unit>\\w+)
(?P<cpp_defined>[Dd][Ee][Ff][Ii][Nn][Ee][Dd])
(?P<cpp_else>^(|\\s*)#[Ee][Ll][Ss][Ee])\\s*
(?P<cpp_endif>^(|\\s*)#[Ee][Nn][Dd][Ii][Ff]).*
(?P<created_at>\\d\\d\\d\\d/\\d\\d/\\d\\d( \\d\\d:\\d\\d:\\d\\d)?)\\s+(#(?P<reference>\\S+) -)?(?P<descr>.*)
(?P<cuda>cuda\\d+\\.\\d+)\\.(?P<mofed>mofed\\d+\\.\\d+)\\.(?P<compiler>(gnu\\d+\\.\\d+\\.\\d+)|(pgi\\d+\\.\\d+))
(?P<d>\\d+)d
(?P<data>.+)
(?P<data>{.+})
(?P<date>.*): (?P<def_file>.*)$
(?P<date>[\\d\\-\\:\\s]+)\\+0000 .* Consumed outgoing message <Message payload=\"(?P<message>.*)\">
(?P<date>[\\d\\-\\:\\s]+)\\+0000 .* Inbound: <Message payload=\"(?P<message>.*)\">
(?P<date>[\\d\\-\\:\\s]+)\\+0000 .* PUBLISHING INBOUND: (?P<message>.*)
(?P<date>[\\d\\-\\:\\s]+)\\+0000 Processed event message for [a-zA-Z0-9_]+: (?P<message>.*)
(?P<date>[\\d\\-\\:\\s]+)\\+0000 Processed inbound message for [a-zA-Z0-9_]+: (?P<message>.*)
(?P<date>[\\d\\-\\:\\s]+)\\+0000 Processed outbound message for [a-zA-Z0-9_]+: (?P<message>.*)
(?P<date>\\d{4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2})(?P<timezone>[+-]{1}\\d{2}:{0,1}\\d{2})\\s+(?P<name>[^\\s].*)
(?P<date>\\d{4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2})\\s+(?P<name>[^\\s].*)
(?P<DATE>\\d{4}-\\d{2}-\\d{2})\\s+(?P<TIME>\\d{1,2}:\\d{1,2}:\\d{1,2})
(?P<day>[0-9]{1,2})\\.(?P<month>[0-9]{1,2})\\.(?P<year>[0-9]{4})
(?P<day>\\d{1,2}) (?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (?P<year>\\d{4}) (?P<hours>\\d\\d):(?P<minutes>\\d\\d):(?P<seconds>\\d\\d) (?P<timezone>Z|[-+]\\d\\d:?\\d\\d)
(?P<day>\\d{1,2})/(?P<month>\\d{1,2})(/(?P<year>\\d{4}|\\d{2}))?
(?P<day>\\d{1,2})/(?P<month>\\d{1,2})/(?P<year>\\d{4}) (?P<hour>\\d{1,2}):(?P<minute>\\d{1,2}):(?P<second>\\d{1,2})$
(?P<day>\\d{1,2})/(?P<month>\\d{1,2})/(?P<year>\\d{4}) (?P<hour>\\d{1,2}):(?P<minute>\\d{1,2}):(?P<second>\\d{1,2}).(?P<microsecond>\\d{1,6})$
(?P<day>\\d{1,2})/(?P<month>\\d{1,2})/(?P<year>\\d{4})$
(?P<day>\\d{8})\\/(?P<stream>.+)\\-(?P<ts>\\d+)\\.tri$
(?P<day>\\d+)/(?P<month>\\d+)/(?P<year>\\d+) - (?P<hour>\\d+):(?P<minute>\\d+)
(?P<day>\\d+)/(?P<month>\\w+)/(?P<year>\\d+)(:(?P<hour>\\d+)|)(:(?P<minute>\\d+)|)(:(?P<second>\\d+)|)
(?P<day>0?[1-9]|[12]\\d|3[01])/(?P<month>0?[1-9]|1[0-2])/(?P<year>[12]\\d{3})$
(?P<day>Den \\d+:[ae]. |)(?P<ordinal>\\d+)\\s*\\.\\s*\\((?P<malnr>\\w\\s\\d+-\\d+)\\)
(?P<DAYS>\\d+) day(.*),\\s+(?P<HRS>\\d+):(?P<MINS>\\d+)
(?P<DAYS>\\d+) day(.*),\\s+(?P<MINS>\\d+)\\s+min
(?P<deprecated>(G54)|(G55))?D(?P<d>\\d+)\\*
(?P<desc>)#\\s*define\\s(?P<name>[^(\\n]+?)\\s(?P<code>.+)$
(?P<DETAIL>\\s+\\S+){9}\\s+(?P<REST>.*)
(?P<dev>(/[^/ ]*)+) on (?P<dir>(/[^/ ]*)+) 
(?P<dev>\\S+)\\s+(?P<dir>\\S+)\\s+(?P<fs>\\S+)
(?P<dev>\\S+)\\s+\\((?P<devt>\\S+)\\)\\s+\\[(?P<range>\\S+)\\]\\s+(?P<maj>[0-9]+):(?P<min>[0-9]+)\\s+(?P<readSize>\\S+)\\s+(?P<writeSize>\\S+)\\s+(?P<totalSize>\\S+)\\s+((?P<freeSize>\\S+)\\s+?P<Usage>\\S+)\\s+(?P<nrFile>\\S+)\\s+(?P<filesystem>\\S+)\\s+(?P<mount>.+)
(?P<deviceName>[a-zA-Z].*[a-zA-Z0-9 -]*) \\((?P<simulatorID>[a-zA-Z0-9-]{36})\\) \\((?P<status>[a-zA-Z]*)\\)
(?P<digit>\\d+)
(?P<dir>(\\w+/)+)(?P<query>\\w+)\\?(?P<params>.*)
(?P<dir>[a-zA-Z_]\\w*)[ \\t]*(?:[ \\t]+(?P<param>[^ \\t].*))?$
(?P<directory>.+)\\/(?P<name>[^\\.]+)\\.(?P<extension>.+)$
(?P<disk_size>\\d+\\.?\\d* [MGT]?B) .*$
(?P<dist>[0-9]{1,3})\\s?(?P<dir>NORTH|EAST|SOUTH|WEST|N|NNE|NE|ENE|E|ESE|SE|SSE|S|SSW|SW|WSW|W|WNW|NW|NNW)\\s+(OF )?(?P<loc>[A-Z0-9]{3,4})
(?P<distro>.+) release (?P<major>\\d+)(.(?P<minor>\\d+))?
(?P<doc_index>\\d+)?:\n    (?P<parent_residue_index>\\d+)\n    (?P<parent_atom_replaced>[odhnx])\n    \\((?P<parent_attachment_position>-?[0-9\\-\\|]+)[\\+\\-]\n        (?P<child_attachment_position>-?[0-9\\-\\|]+)\\)\n    (?P<child_residue_index>\\d+)\n    (?P<child_atom_replaced>[odhnx])\n        
(?P<dockerUA>.+) UpstreamClient(?P<upstreamUA>.+)
(?P<doctest>\\!.```fortran(?P<test>.*?)\\!.```.*?\\!\\=\\>(?P<result>.*?)\\<\\<\\<)
(?P<domain>.*): (?P<backups>\\d*) .*$
(?P<domain>[a-z0-9][a-z0-9\\-]{1,63}\\.[a-z\\.]{2,6})$
(?P<dot>\\.?)\\n+
(?P<downloads>\\d+) downloads
(?P<driver>\\w+)\\/.*::test_(?P<getter>\\w+)
(?P<duration>\\d+(\\.\\d+)?)(,(?P<title>.+))?
(?P<duration>\\d+)(?P<unit>\\w?)
(?P<dynamic_linker>ld-[\\d.]+.so)$
(?P<dynamic>{?)(?P<content>[^}{]+)}?
(?P<email><([^>]+)>)?\\s?(?P<url>\\([^\\)]+\\))?$
(?P<endian><|>|@)?(?P<fmt>(?:\\d*[bBhHlLqQfd])+)$
(?P<endpoint>.+/json-rpc/)(?P<version>[\\d.]+)$
(?P<entity>[^[.:]+)(?P<format_string>[^:]+)?
(?P<entity>\\w+)=(?P<start>\\d+)-(?P<end>\\d+)
(?P<eof>M[0]?[012])\\*
(?P<error_code>.+?)\\s(?P<error_type>.+?):\\s*(?P<index_name>.+?)\\s+(?P<error>.+?)
(?P<ERROR>Connecting\\sto\\s.*\\sfailed:.*)
(?P<error>ln:.*File exists)
(?P<error>zip error:.*)
(?P<escape>[\\\\]*)$
(?P<eth>eth\\d)
(?P<event>.*)from(?P<starting>.*)(to|through|thru)(?P<ending>.*)
(?P<exc_class_name>[\\w\\d+]+): (?P<exc_message>[\\s\\S]*)
(?P<expr>.*)
(?P<expression>[^?]+)\\?(?P<success>[^:]+):(?P<failure>[^;]+)
(?P<ext>[A-Za-z0-9][A-Za-z0-9\\-]*) ?
(?P<f>[SMHD])(?:(?P<n>\\d+)|)
(?P<f>[SMHDW])(?:(?P<n>\\d+)|)
(?P<factor>.*)\\*(?P<token>.+)
(?P<factor>\\d+)\\*\\(
(?P<FAILED>cannot access|Could not|no such|denied|not a regular file|Is a directory|No route to host|lost connection)
(?P<FAILURE_MSG>.*failed.*|.*error.*|.*command not found.*|.*iperf:.*)
(?P<family>\\{\\w+(\\w|\\s)*\\}|\\w+)\\s?(?P<size>-?\\d+)?\\s?(?P<modifiers>\\{\\w+(\\w|\\s)*\\}|\\w+)?
(?P<feature>[A-Za-z0-9][A-Za-z0-9\\-]*) ?
(?P<fence>^(?:~{3,}|`{3,}))[ ]*(?P<lang>[a-z0-9_+-]*)(?P<linenums>#)?[ ]*\\n(?P<code>.*?)(?<=\\n)(?P=fence)[ ]*$
(?P<fence>^(?:~{3,}|`{3,}))[ ]*(\\{?\\.?(?P<lang>[a-zA-Z0-9_-]*)\\}?)?[ ]*\\n(?P<code>.*?)(?<=\\n)(?P=fence)[ ]*$
(?P<fence>^`{3,})[ ]*(?P<lang>[a-zA-Z0-9_-]*)[ ]*\\n(?P<code>.*?)(?P=fence)[ ]*$
(?P<fenced>[~`]{3,})\\s*(?P<lang>[^\\s`]+)?
(?P<field_id>\\S+)--(?P<version>\\d+)$
(?P<field>\\bbal|\\bpbal|\\bnbal|\\bcrd|\\bdeb)(?P<mode>[piseu])?\\s*(?P<account_sel>_[a-zA-Z0-9]+|\\[.*?\\])\\s*(?P<ml_domain>\\[.*?\\])?
(?P<fields>((\\\"([^\\\"]|((?<=\\\\)\\\"))*\\\")|([^\\t\\\"])|((?<=\\\\)\\\"))+)(\\t|$)
(?P<figure>\\$figure(?P<env>.*?)\\$endfigure)
(?P<file_type>[CT])(?P<file_number>\\d{1,3})(:)(?P<element_number>\\d{1,3})(.)(?P<sub_element>ACC|PRE|EN|DN|TT|CU|CD|DN|OV|UN|UA)
(?P<file_type>[IO])(:)(?P<file_number>\\d{1,3})(.)(?P<element_number>\\d{1,3})(/(?P<sub_element>\\d{1,2}))?
(?P<file_type>[LFBN])(?P<file_number>\\d{1,3})(:)(?P<element_number>\\d{1,3})(/(?P<sub_element>\\d{1,2}))?
(?P<file_type>B)(?P<file_number>\\d{1,3})(/)(?P<element_number>\\d{1,4})
(?P<file_type>S)(:)(?P<element_number>\\d{1,3})(/(?P<sub_element>\\d{1,2}))?
(?P<file>.*)\\((?P<line>[0-9]+)\\)
(?P<file>[a-zA-Z0-9.@_/\\s\\-]+)[(](?P<line>[0-9]+)[)]: (?P<message>[a-zA-Z0-9(){}:%.*&_<>/\\-+=!,\" \\[\\]]+)
(?P<filename>(?P<base>.+?)\\.(?P<ext>.*))$
(?P<filename>([a-zA-Z]:)?[^:]+):(?P<line>[0-9]+):\\s*(?P<error>.*)
(?P<first>[a-z]+)(?:-(?P<last>[a-z]+))?
(?P<first>[a-zA-Z]+) (?P<last>[a-zA-Z]+)
(?P<first>\\/)?(?P<sab>[a-z]+)?(?P<last>\\/)?$
(?P<first>\\d+)(?:-(?P<last>\\d+))?(?:/(?P<step>\\d+))?$
(?P<first>\\w+)\\W+(?P<last>\\w+)
(?P<folder>/.*/)(?P<file>.*?\\.flv)
(?P<format>.+?)-Format\\s*:\\s*(?P<abr>\\d+)kbps\\s*,\\s*(?P<note>.+)
(?P<format>G9[01])\\*
(?P<from>.*)?(?P<email>\\<.*\\>)
(?P<from>\\w+) to (?P<to>\\w+) with (?P<symbol>\\w+)
(?P<front>.*?)(?P<seq>(?P<csi>\u001b)(?P<command>[@-_]))(?P<rest>.*)
(?P<fulldomain>(?P<domain>[a-z0-9][a-z0-9\\-]{1,63})\\.(?<tld>[a-z\\.]{2,6}))$
(?P<func>\\w+)(?P<args>.*)
(?P<func>\\w+)\\((?P<args>[0-9.,-e]+)\\)
(?P<func>ntp_(?:get|adj)time)\\(\\) returns code (?P<code>\\d+) 
(?P<function>\\w+)(?=\\(\\S+\\))\\([\\'|\\\"](?P<arg>.+?)[\\'|\\\"]\\)
(?P<gack_id>[\\d-]+) \\((?P<stacktrace_id>[\\d-]+)\\)
(?P<gene>ENSG\\d*)
(?P<generation>J-PHONE|Vodafone|SoftBank)/(?P<version>[\\d\\.]*)/(?P<model>[^/\\[]*)
(?P<genus>[\\w]*)\\s+     # match the genus\n            (?P<hybrid>x?)\\s?          # hybrid sign\n            (?P<species>[\\w-]*)\\s?     # match the species\n            (?P<author>.*)
(?P<genus>[\\w]*)\\s+
(?P<gif_id>[\\S+]+)(?:\\s+(['\"]{0,1})(?P<alt>.+)(\\2))?
(?P<greeting>\\S+?) (?P<name>\\S+?)$
(?P<group>[a-zA-Z][a-zA-Z0-9-_ ]+)[@](?P<module>([a-zA-Z][a-zA-Z0-9-_]+|[*]))[\\/]?(?P<component>([a-zA-Z][a-zA-Z0-9-_]+|[*]))?
(?P<group>\\S+)\\s+
(?P<group1>[0-9]+)\\.(?P<group2>[0-9]+)
(?P<groupName>[^=]+)\\s*=\\s*\\[(?P<envList>[^\\[\\]]+)\\]$
(?P<h>([a-zA-Z0-9_-]+:.+\\n)*)\\n?(?P<b>(\\s*.*)*)
(?P<h>\\d+)h
(?P<handle>.+)-css$
(?P<hash_name>sha1|sha224|sha384|sha256|sha512|md5)=(?P<expected>[a-f0-9]+)
(?P<hash>#\\w+)
(?P<hash>[0-9A-Fa-f]{32}) (?P<mode>[ *])(?P<path>[^\\n]+)
(?P<hash>\\w+)($|\\-|\\.)
(?P<hashtag>#\\S+#)
(?P<head_1>\\S+)\\s+(?P<head_2>\\S+)\\s+(?P<head_3>\\S+)\\s+(?P<head_4>\\S+)\\s+(?P<head_5>\\S+)\\s+(?P<head_6>\\S+)\\s+(?P<head_7>\\S+)\\s+(?P<head_8>\\S+)
(?P<head>.*)\\s*see:\\s*`(?P<module>.*)`\\s*(?P<tail>.*)
(?P<header_line>^#{20,}.*)\\s(?P<text_content>(?:^#.*\\s)*)
(?P<HEADER> .*PID.*)
(?P<HEADERS>\\[\\s+ID\\].*)
(?P<HEADERS>pkts\\s+bytes\\s+target\\s+prot\\s+opt\\s+in\\s+out\\s+source\\s+destination)
(?P<heading>([A-Z ]+\\s)?[A-Z()]+:)
(?P<headword>[^\\(\\[\\{\\|\\~]+)(?:\\((?P<reading>[^\\)]+)\\))?(?:\\|\\d+)?(?:\\[(?P<sense>[\\d]+)\\])?(?:\\{(?P<display>[^\\}]+)\\})?(?:(?P<example>\\~))?$
(?P<height>\\d{3,4})[pP]_(?P<bitrate>\\d+)[kK]_\\d+/
(?P<height>\\d+)[pP]?_(?P<tbr>\\d+)[kK]
(?P<HELP_MSG>usage:\\ssftp\\s.*)
(?P<hex>[A-Z0-9]{6})
(?P<hl_lines>\\d+(?:[ \\t]+\\d+)*)
(?P<host>.*): (?P<backups>\\d*) backup\\(s\\)$
(?P<host>[\\w-._]+)(?::(?P<port>\\d+))?
(?P<host>[^/]+)/(?P<owner>[^/]+)/(?P<repo>[^/]+)
(?P<host>[^\\:]+)(?::(?P<port>[0-9]{1,5}))?
(?P<host>[a-zA-Z0-9\\-.]+)(?::(?P<port>[0-9]+))?
(?P<hostname>[^\\s]+)\\s+(?P<arch>[^\\s]+)\\s+(?P<ncpus>[0-9]+)\\s+(?P<load>[^\\s]+)\\s+(?P<memory>[0-9\\.MGT]+)\\s+
(?P<hostname>\\S+)\\s*$
(?P<hour>[0-9]{1,2}):(?P<minute>[0-9]{1,2})(:(?P<second>[0-9]{1,2}))?\\s?(?P<tt>am|pm)?
(?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?
(?P<hour>\\d{1,2}):(?P<minute>\\d{2,2})(?::(?P<second>\\d{2,2})(?:.(?P<microsecond>\\d{3,3}))?)?(?P<timezone>[0-9Z:\\+\\-]+)?$
(?P<hour>\\d{1,2}):?(?P<minute>\\d{2})?\\s?(?P<mod>am|pm)?(oclock)?
(?P<hours>[0-9]+) hour(s)? ago
(?P<hours>\\d{1,2}):(?P<minutes>\\d{1,2}):(?P<seconds>\\d{1,2})(?:\\.(?P<millis>\\d{3})(?P<micro>\\d{3})?\\d*)?
(?P<hr>\\d{2}):(?P<mins>\\d{2})
(?P<HRS>\\d+):(?P<MINS>\\d+)
(?P<htmlchars>[<&>])|(?P<space>^[ \\t]+)|(?P<lineend>\\r\\n|\\r|\\n)
(?P<htmlchars>[<&>])|(?P<space>^[ \\t]+)|(?P<lineend>\\r\\n|\\r|\\n)|(?P<protocal>(^|\\s*)(http|ftp|https)://[\\w\\-\\.,@?^=%&:/~\\+#]+)
(?P<htmlchars>[<&>])|\n                               (?P<space>^[ \\t]+)|\n                               (?P<lineend>\\r\\n|\\r|\\n)|\n                               (?P<protocal>(^|\\s)\n                                    ((http|ftp)://.*?))(\\s|$)
'(?P<channel>[^']+)'
(?P<channel>[a-zA-Z0-9_]+) (?P<count>[0-9\\-]+)
(?P<chapter>\\d+)\\s*\\|\\s*(?P<title>.+)
(?P<charset>[\\w!#$%&+^_`{}~-]+)'(?P<language>[\\w-]*)'(?P<value>.*)$
(?P<charset>[^']+)'(?P<lang>[^']*)'(?P<filename>.+)
(?P<chunk>\\d+)\\/(?P<parts>\\d+)
(?P<id>.*)\\/(?P<start>\\d+)\\-(?P<stop>\\d+)
(?P<Id>.*?)\\t(?P<Part2B>.*?)\\t(?P<Part2T>.*?)\\t(?P<Part1>.*?)\\t(?P<tcope>.*?)\\t(?P<Language_Type>.*?)\\t(?P<Ref_Name>.*?)\\t(?P<Comment>.*?)
(?P<id>[\\w-]+)\\?
(?P<id>[a-zA-Z]+)Url\\s*=\\s*([\"\\'])(?P<url>(?:https?:)?//.+?)\\2
(?P<ID>\\[\\s*\\d*\\])\\s*(?P<ID_NAME>.*port\\s*\\d*\\s*connected with.*)
(?P<id>\\d+)/$
(?P<id>\\d+)\\.html$
(?P<id>\\w+)($)?(-(?P<size>[0-9xm.]+)($)?)?(\\[(?P<page>\\d+)\\]($)?)?(.*\\.(?P<fmt>\\w+)$)?
(?P<id>Vehicle ID:([\\d\\.]+)) (?P<lat>lat:([\\d\\.-]+)) (?P<lng>lon:([\\d\\.-]+)) (?P<heading>dir:([\\d\\.-]+)) (?P<speed>spd:([\\d\\.-]+)) (?P<lock>lck:([\\d\\.-]+)) (?P<time>time:([\\d]+)) (?P<date>date:([\\d]+)) (?P<status>trig:([\\d]+))
(?P<iface>wl(?:_[a-z]+)+)(?P<func>\\.[a-z]+(?:_[a-z]+)*)?(?:\\(\\))?
(?P<imsi>\\d+)\\nOK
(?P<include>[+-])?(?P<type>ann(?=\\s))?\\s*(?P<regiontype>[a-z]*?)\\[[^=]*]
(?P<includes>([^:,]+(,[^:,]+)*)?):(?P<excludes>([^:,]+(,[^:,]+)*)?)$
(?P<indent>\\s*)!f2py(?P<rest>.*)
(?P<indent>\\s*)(?P<line>.*)\\s*
(?P<index>\\d+):(?P<bytes>\\d+)\\((?P<from>\\d+)\\-\\>(?P<to>\\d+)\\)\\[(?P<start_time>[\\d\\.]+)\\]-\\[(?P<end_time>[\\d\\.]+)\\]\\((?P<sender>\\d+),\\s*(?P<content>.*)\\)
(?P<index>\\d+):(?P<bytes>\\d+)\\[(?P<start_time>[\\d\\.]+)\\]-\\[(?P<end_time>[\\d\\.]+)\\]\\((?P<sender>\\d+),\\s*(?P<content>.*)\\)
(?P<init>[A-Z])(?P<point>\\.)
(?P<instance>[\\w\\.]+)(:(?P<xpath>.*))?
(?P<int>(\\d*\\.)?\\d+)\\s*;\\s*url=(?P<url>.*)
(?P<ip_address>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}) - (-|(\\w+)) \\[(?P<day>\\d{2})/(?P<month>[a-z]{3})/(?P<year>\\d{4}):(?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2}) (?P<timezone>([+-])\\d{4})\\] \"(?P<request>[^\"]*?)\" (?P<status_code>\\d{3}) (?P<bytes_sent>\\d+) \"(?P<referrer>(-)|(.+))?\" \"(?P<user_agent>.+)?\"
(?P<ip>(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))(?=.*?(?:(?:(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?P<port>\\d{2,5})))
(?P<IP>.*)\\s.*\\s(?P<DEV>.*)\\s.*\\s(?P<MAC>.*)\\s(?P<NUD>.*)
(?P<IP>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}):(?P<PublicPort>\\d+(-\\d+)?)->(?P<PrivatePort>\\d+(-\\d+)?)\\/(?P<Type>\\w+)
(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)
(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+)(:(?P<port>\\d+))?$
(?P<ipaddress>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}) - - \\[(?P<dateandtime>\\d{2}\\/[a-z]{3}\\/\\d{4}:\\d{2}:\\d{2}:\\d{2} (\\+|\\-)\\d{4})\\] ((\\\"(GET|POST) )(?P<url>.+)(http\\/1\\.1\")) (?P<statuscode>\\d{3}) (?P<bytessent>\\d+) ([\"](?P<refferer>(\\-)|(.+))[\"]) ([\"](?P<useragent>.+)[\"])
(?P<k>[^(&|?)]+)(&|$)
(?P<k>[^(=|&)]+)=(?P<v>[^&]+)(&|$)
(?P<k>[^\\[\\]]*)(\\[(?P<i>[\\d\\[\\]]+)\\])?$
(?P<key_opening>.*)\\<FONT\\>(?P<name>.*)\\<\\/FONT\\>(?P<key_closing>.*)\\<FONT\\>\\ \\[(?P<type>.*)\\]\\<\\/FONT\\>
(?P<key>[?&.])
(?P<key>[\\w.]+):\\s*(?P<value>.+)?
(?P<key>[\\w]*)\\[(?P<idx>[\\w]*)\\]
(?P<key>[\\w-]+):\\s*()(?P<name>[^'\";]+)\\s*;?
(?P<key>[\\w-]+):\\s*(['\"])(?P<name>.*?)(?<!\\\\)\\2\\s*;?
(?P<key>[\\w-]+)=(?P<value>\\d+(?: blks)?)
(?P<key>[^,]+),?
(?P<key>[^:]+): (?<value>.+)
(?P<key>[^:]+)[:](?P<value>.*)
(?P<key>[^\\s]+)\\s+(?P<operator>.+)\\s*
(?P<key>[^=]+)\\s*=\\s*(?P<value>.*)
(?P<key>[^=]+)=(?P<value>.+)
(?P<KEY>[^=]+)=(?P<VALUJE>.*)
(?P<key>[A-z]+) ?: ?(?P<value>.*)
(?P<key>[a-z-_]+): *(?P<value>.+)
(?P<key>[A-z0-9.()_\\-]+) ?\\: ?(?P<value>.*)
(?P<key>[A-z0-9.()_\\-]+) ?= ?(?P<value>.*)
(?P<key>[A-Z0-9-]+)=(?P<val>\"[^\"]+\"|[^\",]+)(?:,|$)
(?P<key>[a-zA-Z][a-zA-Z0-9_]*)=(?:(?P<quot>\"|')(?P<value>.*?)(?P=quot))?
(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\']?)(?P<val>.+?)(?P=quote)(?:;|$)
(?P<key>\\*?)(?P<name>[^*].+) \\{label:\"(?P<type>.+)\"\\}
(?P<key>\\-\\-?[\\w\\-]+\\=)
(?P<KEY>\\S.*\\S):
(?P<KEY>\\S.*\\S|\\S)\\s*:\\s*(?P<VALUE>\\S.*\\S|\\S)\\s*$
(?P<KEY>\\w+):(?P<VALUE>\\d+)
(?P<key>\\w+)\\s*(?P<op>[+-]?=)\\s*(?P<value>.*)$
(?P<key>\\w+)\\s*:\\s*(['\"](?P<value>[^'\"]*?)(px)?['\"])
(?P<key>\\w+)=(?<!\\\\)\"(?P<value>.+?)(?<!\\\\)\"
(?P<key>\\w+)=(?P<value>[^\\s]+)?(?:\\s+\\((?P<data>.*)\\))?
(?P<key>\\w+)=(?P<value>[^\\s]+)\\s*(?:\\((?P<data>.*)\\))*
(?P<key>\\w+)=\"(?P<escaped_value>(\\\\.|[^\"\\\\])*)\"
(?P<key>\\w+)=\\\"(?P<value>[^\\\"\\\\]*)\\\"\\s*(?:,\\s*|$)
(?P<keys>[^=\\s]+)=(?P<values>[^=\\s]+)
(?P<keyword>[A-Za-z][A-Za-z ]+) (?P<value>\\d+(?:\\.\\d+|x[0-9a-f]+)?) ?(?P<units>us|ppm|s|\\(.*\\))?
(?P<kind>[a-z0-9-]*[a-z-]+) (?P<index>\\d+)$
(?P<kind>\\w+?)(?P<number>\\d+)_(?P<item>\\w+)
(?P<kw>\\w.*?(?=\\W|\\b|$))
(?P<L_OPTION> compressed\\s*uncompressed\\s*ratio\\s*uncompressed_name.*)
(?P<l>[a-z])(?P<u>[A-Z])
(?P<label_store>\\d+) (?P<symbol>\\S+) (?P<description>.+)
(?P<label>[^ :]+):(?P<body>(.|\\r?\\n(?= +))*)$
(?P<label>_\\:[^\\s]+)
(?P<last>[^\\r])\\n
(?P<lat>[NS][0-9]{2,4})\\s?(?P<lon>[EW][0-9]{3,5})
(?P<leading_whitespace>\\s*)(?P<name>[^(]+)(?P<whitespace_after_name>\\s+)\\((?P<email>[^\\s]+@[^)\\s]+)\\)(?P<trailing_characters>.*)
(?P<left_name>[^\\s]+)\\s*(?P<left_cardinality>[*?+1])--(?P<right_cardinality>[*?+1])\\s*(?P<right_name>[^\\s]+)
(?P<left>[^.?!]\\.|!|\\?)(?P<right>[^\\s\"'])
(?P<len>[^=]+)?(=(?P<value>.*))?$
(?P<len>\\d+)(?P<op>[=DIMNX])
(?P<level>#+)(?P<attributes>(?:[\\\\[\\\\{\\\\(].+?[\\\\]\\\\}\\\\)])*)(?P<start>\\\\d+)?(?:(?:\\\\. *)|(?: +)|(?:_ +))
(?P<level>[^\\s]+)\\s+\\[.+\\]\\[(?P<logger>.+?)\\]\\s+(?P<log>.+)
(?P<level>\\\\*+)(?P<attributes>(?:[\\\\[\\\\{\\\\(].+?[\\\\]\\\\}\\\\)])*)(?:(?:\\\\. *)|(?: +)|(?:_ +))
(?P<lfeats>[^:]+):(?P<rfeats>.+)
(?P<lhs>.*[^ ])\\s*##\\s*(?P<rhs>[^ ].*)
(?P<libname>.*)
(?P<line>(?:\\$?\\{|\\(|\\[|&.+;|[0-9]+|(?:[^!-~]|[A-Z])).*)\\s*
(?P<line>(?:\\$?\\{|\\(|\\[|&.+;|[0-9]+|(?:[^\\u0021-\\u007E]|[A-Z])).*)\\s*
(?P<LINE>\\d+):\\s+(?P<INT>\\S+):\\s+(?P<TRANS>\\S+)\\s+mtu\\s+(?P<MTU>\\S+)\\s+qdisc\\s+(?P<QDISC>\\S+)\\s+state\\s+(?P<STATE>\\S+)\\s+mode\\s+(?P<MODE>\\S+)\\s+group\\s+(?P<GROUP>\\S+)
(?P<LINE>\\d+):\\s+(?P<INT>\\S+):\\s+(?P<TRANS>\\S+)\\s+mtu\\s+(?P<MTU>\\S+)\\s+qdisc\\s+(?P<QDISC>\\S+)\\s+state\\s+(?P<STATE>\\S+)\\s+mode\\s+(?P<MODE>\\S+)\\s+group\\s+(?P<GROUP>\\S+)\\s+qlen\\s+(?P<QLEN>\\S+)
(?P<line>\\d+)\\((?P<func>\\w+)\\)
(?P<LINE>Nmap scan report for (?P<ADDRESS>\\S+)\\s+\\[host\\s+(?P<HOST>\\S+),\\s+received\\s+(?P<RECEIVED>\\S+)\\])
(?P<linestart>[\\d]+)(?:[ \\t]+(?P<linestep>[\\d]+))?(?:[ \\t]+(?P<linespecial>[\\d]+))?
(?P<link>.*).md(?P<anchor>#.*)?
(?P<LINK>\\S+)\\s+(?P<VAL>\\S+:\\S+:\\S+:\\S+:\\S+:\\S+)\\s+(?P<KEY>\\S+)\\s+(?P<VAL_2>\\S+:\\S+:\\S+:\\S+:\\S+:\\S+)
(?P<LISTENING>listening)\\s+on\\s+(?P<PORT>\\S+),\\s+(?P<LINK>link-type)\\s+(?P<TYPE>.*),\\s+(?P<CAPTURE>capture size)\\s+(?P<SIZE>.*)
(?P<literal>[^:\\(\\)]*)(?P<token>[:\\(\\)]?)
(?P<loc1>[A-Z0-9]{3,4})\\s?-\\s?(?P<loc2>[A-Z0-9]{3,4})
(?P<location>^\\#:.+?)^msgid (?P<id>.+?)^msgstr (?P<str>.+?)^\\w*$
(?P<log_url>[^ \\n]+)\n                       (?P<key_vals>(:?[^:]+:.+[\\n$])*)\n                       (?P<notes>(.*[\\n$])*)
(?P<login>ogin:\\s*$)
(?P<loss>[0-9]+)\\% packet loss
(?P<loss>\\d+(\\.\\d+)?)% packet loss
(?P<lvals>.*)(?P<op>[<>=]{2})(?P<rvals>.*)$
(?P<m>\\d+)m
(?P<m><[^>]+>)
(?P<main>(\u001b\\[(\\d+)m){2,})
(?P<main>.*)\\[(?P<extras>.*)\\]$
(?P<maj>\\d+)\\.(?P<min>\\d+)\\.(?P<patch>\\d+)
(?P<major>[\\d]+)(?P<min>[A-Z])(?P<patch>[\\d]+)(?P<fix>[a-z]?)
(?P<major>[\\d]+).(?P<minor>[\\d]+).(?P<patch>[\\d]+)-(?P<commitCount>[\\d]+)-(g)?(?P<hash>[0-9a-f]{5,40})
(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)
(?P<major>\\d+)      # major (x in x.y)\n        \\.(?P<minor1>\\d+)   # minor1 (y in x.y)\n        \\.?(?P<minor2>\\d+)? # minor2 (z in x.y.z)\n        \\.?(?P<minor3>\\d+)? # minor3 (w in x.y.z.w)\n        (?P<alpha>[a|b]?)   # alpha/beta\n        (?P<alpha_ver>\\d*)  # alpha/beta version\n        (?P<pre>pre)?       # pre release\n        (?P<pre_ver>\\d)?    # pre release version\n    
(?P<major>\\d+)(\\.(?P<minor>\\d+)(\\.(?P<patch>\\d+))?)?
(?P<major>\\d+)(\\.(?P<minor>\\d+))?(\\.(?P<patch>\\d+))?(.*revision\\s(?P<revision>[0-9a-f]*)\\))?
(?P<major>\\d+).(?P<minor>\\d+).(?P<patch>\\d+)(?P<tail>.*)
(?P<major>\\d+)\\.(?P<minor>\\d+)
(?P<major>\\d+)\\.(?P<minor>\\d+)(?:\\.(?P<patch>\\d+))?-?(?P<tag>.*)
(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)
(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(?:-(?P<release>[0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+(?P<build>[0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?
(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<suffix>[\\w\\d.]+))?
(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<revision>\\d+)
(?P<major>\\d+)\\.(?P<minor>\\d+)\\..*
(?P<major>\\d+)\\.(?P<minor>\\d+)\\.\\d+\\.\\d+
(?P<match>.*)(\\s->(?P<action>.*))
(?P<match>\\{(?P<name>.+?)\\})
(?P<matched>:doc:`(?P<title>.*)\\s+<(?P<target>[^>]+)>`)
(?P<matches>\\d+)|(?P<del>\\^\\w+?(?=\\d))|(?P<sub>\\w)
(?P<media_consumed>[0-9]+) of (?P<media_total>[0-9?]+)
(?P<MEM>.*):\\s*(?P<TOTAL_MEM>\\d*)(?P<UNIT>.)\\s*total,\\s*(?P<FREE>\\d*)\\s*free,\\s*(?P<USED>\\d*)\\s*used[,.]\\s*(?P<OTHER>\\d*)\\s*
(?P<message>can't load package: package .+: found packages .+ \\((?P<path>.+?\\.go)\\).+)
---(?P<meta>.*?)---(?P<body>.*)
(?P<meta>\\S+)?\\s*(?P<address>0x[0-9a-f]+){1}\\s*(?:<(?P<symbol>.+)>){0,1}:\\s*(?P<mnemonic>\\S+){1}\\s*(?P<operands>.+)?$
(?P<metadata>[\\s\\S]*?)\\n\\n(?P<template>[\\s\\S]*)
(?P<method>[A-Za-z]+) (?P<to_uri>.+) SIP/2.0
(?P<method>\\w+)\\((?P<parameters>.*?)\\)
(?P<method>\\w+)\\s+(?P<path>(/[`\u00b4\\\\<>/\\w:,;\\.#$!?=&@%_+\\'\\*^~|\\(\\)\\[\\]\\{\\}-]*)+)\\s+(?P<protocol>\\w+/\\d\\.\\d)
(?P<methodsig>def\\s+(?P<mname>[a-zA-Z0-9_]+)\\(.*?\\):\n+\\s+\"\"\")(?P<comment>.*?)(?=\"\"\")
(?P<mimetype>[^/]+/[^;]+)(?:;\\s*codecs=\"?(?P<codecs>[^\"]+))?
(?P<min>-?\\d+).*?(?P<max>-?\\d+)
(?P<min>\\d+\\.\\d+)/(?P<avg>\\d+\\.\\d+)/(?P<max>\\d+\\.\\d+)/(?P<mdev>\\d+\\.\\d+)\\s+ms
(?P<MINS>\\d+) min
(?P<minutes>[0-9]+) minute(s)? ago
(?P<minutes>[0-9]+):(?P<seconds>[0-9]{1,2})
(?P<mod>[a-zA-Z][\\w.]*\\.)+[a-zA-Z]
(?P<mode>[\\+\\-])o (?P<user>.+)
(?P<mode>G3[67])\\*
(?P<mode>G7[01])\\*
(?P<mode>G7[45])\\*
(?P<model>[A-Za-z0-9_-]+).(?P<object>[A-Za-z0-9_-]+)
(?P<modification>[a-z0-9_\\-,]*)\n            (?P<base_type>(?:[A-Z][a-z]{2}?|(?:[a-z]{3}[A-Z][a-z]{2})))\n            (?P<substituent>[^-]*?)\n            (?P<derivatization>\\^[^\\s-]*?)?\n            (?P<linkage>-?\\((?P<anomer>[ab?o]?)[0-9?/]+->?[0-9?/]+\\)-?)?$
(?P<modname>\\w+)\\.py
--(?P<module_name>.+)-settings=(?P<settings_path>.+)
(?P<module_path>.*)\\.(?P<contextmanager_name>.*)
(?P<module>.*)\\.(?P<f>[\\w_]+)
(?P<module>\\w+)\\.(?P<method>[^\\(]+)\\((?P<params>[^\\)]*)\\)
(?P<month>\\d{1,2})/(?P<day>\\d{1,2})/(?P<year>\\d{4})$
(?P<msec>^0?\\.\\d+) (?P<sec>\\d+)$
(?P<msgid>\\d+) (?P<uidl>[\\x21-\\x7E]{1,70})
(?P<mux>(D\\s|\\sE|DE))\\s(?P<format>\\S{3,11})\\s
(?P<n_op>\\d+)(?P<op>\\w)
(?P<n>\\d+) (days?|ds?)(?P<ago>( ago)?)
(?P<n>\\d+)(?P<unit>[a-z]*)
(?P<N>\\d+)-\\d+$
(?P<n>\\w+):\\s*(?P<p>.+?)\\s*(\\[(?P<dt>\\w+)\\]\\s*)?:\\s*(?P<c>.*)\\s*(?P<a>\\&)?
(?P<name>(\\w|[-.])+)\n                      \\s*=\\s*(?P<callable>(\\w+)([:\\.]\\w+)*)\n                      \\s*(\\[\\s*(?P<flags>\\w+(=\\w+)?(,\\s*\\w+(=\\w+)?)*)\\s*\\])?\n                      
(?P<name>(\\w|[-.+])+)\n                      \\s*=\\s*(?P<callable>(\\w+)([:\\.]\\w+)*)\n                      \\s*(\\[\\s*(?P<flags>\\w+(=\\w+)?(,\\s*\\w+(=\\w+)?)*)\\s*\\])?\n                      
(?P<name>)[ \t]*(?P<uri>[^ ;]+)[ \t]*(?:;(?P<params>[^\\?]*))?
'(?P<name>.*)'
(?P<name>.*) changed from (?P<oldver>.*) to (?P<newver>.*)
(?P<name>.*) needs to be included in build
(?P<name>.*) needs to be removed from build
(?P<name>.*):\\w+(?P<body>.*)
(?P<name>.*)\\((?P<args>.*)\\)(?P<return>.*)
(?P<name>.*)\\s(?P<order>ASC|DESC)(.*)
(?P<name>.*)\\s*\\((?P<g_id>.*)\\)\\s*<(?P<email>.*?)>
(?P<name>.*)_(?P<digit>\\d+)$
(?P<name>.*)_test.py
''(?P<name>.*?)''
'''(?P<name>.*?)'''
(?P<name>.*?)(\\[(?P<subname>.*?)\\])
(?P<name>.*\\D)(?P<digits>\\d+)$
(?P<name>.+) <(?P<email>.+)>
(?P<name>.+)\\/([!#$%&'*+.^_`\\|~0-9a-z-]+:?)+$
(?P<name>.+)\\[(?P<extras>[^\\]]+)\\]
(?P<name>.+)\\s(?:A(?:DM)?\\d\\d-\\d{1,4})
(?P<name>.+)\\s+\\<(?P<email>.+@.+\\.\\w+)\\>
(?P<name>.+?)-(?P<ver>.+?)\n    (-(?P<pyver>.+?))?(-(?P<arch>.+?))?.egg
(?P<name>[\\w .-]+)\\s*\\(\\s*(?P<ver>[^\\s)]+)\\)$
(?P<name>[\\w. -]+)[^\\w](?P<year>(19|20)\\d\\d)
(?P<name>[\\w-]+)\\s*\\(\\s*(==\\s*)?(?P<ver>[^)]+)\\)$
(?P<name>[\\w-]+)\\s+(?P<type>[A-Za-z]+|\\(.*?\\))\\s+(?P<default>#REQUIRED|#IMPLIED|\\w+|(?:#FIXED)?((?:\")([^\"]*?)(?:\")|(?:')([^']*?)(?:')))\\s*(?:--(?P<comment>.*?)--)?
(?P<name>[^ ]*)[ ]*\\\"(?P<desc>.*)\\\"[ ]*(?P<scope>BROAD|NARROW|EXACT|RELATED)?
(?P<name>[^()><@,;:\\\"\\/\\[\\]?=}{ \\t]+):[\\s]*(?P<value>[^\\r\\n]*)\\r\\n
(?P<name>[^: ]+):\\s*$
(?P<name>[^:\\\\/]*?)(?:\\.(?P<ext>[^ :\\\\/.]*))?$
(?P<name>[^:]*):?( ?(?P<value>.*))?
(?P<name>[^[]+)(?: \\[(?P<lang>[a-z]{2,3})\\])?$
(?P<name>[^\\.]+)\\.(?P<extension>.+)$
(?P<name>[^\\s,!=<>]+)(,|\\s*(?P<operator>[!=<>]+)\\s*(?P<version>[^\\s,]+))?
(?P<name>[^\\s]+) = (?P<url>.*)
(?P<name>[^\\s]+)\\s+((?P<user>[^@]+)@)?(?P<host>[^:]+)(?::(?P<path>[^\\s]+))?\\s\\(push\\)
(?P<name>[^\\s]+)\\s+https?://(?P<host>[^/]+)/(?P<path>[^\\s]+)\\s\\(push\\)
'(?P<name>[^']+)'
(?P<name>[^-]+)( -(?P<ver>[^-]+) (-py(?P<pyver>[^-]+) (-(?P<plat>.+))? )? )?
(?P<name>[^_]*)__(?P<type>[A-Za-z0-9]*)_Id
(?P<name>[^=<>!\\s]+)\\s*((?P<cc>=[^=]+(=[^=]+)?)|(?P<pc>(?:[=!]=|[><]=?).+))?$
(?P<name>[^=<>]+)(?P<comp>[<=>]{1,2})(?P<spec>[^;]+)(?:(;\\W*python_version\\W*(?P<pycomp>[<=>]{1,2})\\W*(?P<pyspec>[0-9\\.]+)))?
(?P<name>[A-Ga-g])(?P<octave>[1-8])
(?P<name>[A-Ga-g])(?P<octave>[1-8])?(?P<length>[whqes])?
(?P<name>[A-z -]+)(?P<id>[A-z0-9-]+)
(?P<name>[a-z]{4})
(?P<name>[A-z]+)\\((?P<group>[A-z]+)\\) *
(?P<name>[a-z_]+)\\((?P<level>\\d+)\\)
(?P<name>[a-zA-Z]*) (?P<age>[0-9]+)
(?P<name>[a-zA-Z]+) (?P<age>[0-9]+)
(?P<name>[a-zA-Z]+)(?:=(?P<value>[^,]+))?
(?P<name>[A-Za-z]+)(?P<age>\\\\d+)-(\\\\d+)-(\\\\d+)
(?P<name>[a-zA-Z]+)(?P<value>.+)$
(?P<name>[a-zA-Z0-9:_-]+)(?:\\s+(?P<sample_rate>[0-9.]+))?(?:\\s+(?P<safe>(safe|unsafe|unsafeabove2kHz|unknown)))?(?:\\s+(?P<fidelity>(clean|flat|glitchy|unknown)))?
(?P<name>[a-zA-Z0-9]+)(:?_(?P<idx>\\d+))?$
(?P<name>\\S+)\\s+(?P<commit>[[:alnum:]]+)\\s+(?:(?P<remote>\\[.*?\\])\\s+)?(?P<msg>.*)
(?P<name>\\S+)\\s+(?P<url>\\S+)\\s+\\((?P<type>[^\\)]+)\\)
(?P<name>\\\\w+)(?P<age>\\\\d+)-(\\\\d+)-(\\\\d+)
(?P<name>\\w+)(\\[(?P<type>\\w+)\\])?(\\s+mapping \\[(?P<dst>[\\w:]+)\\])?(\\s+linked to (?P<link>[\\w/]+))?
(?P<name>\\w+)\\[(?P<index>\\w+)\\]
(?P<name>\\w+)\\b
(?P<name>\\w+)=(?P<value>[^ ,]+)
(?P<name>^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*|^\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-011\\013\\014\\016-\\177])*\")@(?P<domain>(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)$)|\\[(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\]$
(?P<name>^[^=<>!\\s]+)\\s*(?P<constraint>[=!><]=?\\s*[^\\s;]+)?(?:\\s+;\\s+)?(?P<env_mark_name>[^=<>!\\s;]+)?\\s*(?P<env_mark_constraint>[=<>!\\s]+[^=<>!\\s]+)?
(?P<name>__\\w+__) = '(?P<value>[^']+)'
(?P<name>0(x|o|b))(?P<value>.+)
(?P<name>a)
(?P<name>Error[^ -]*)
(?P<name>Firefox|Chrome|MSIE|Safari|Opera)[/| ](?P<version>\\d+.\\d+)
(?P<name>point)\\[(?P<index>\\d)\\]
(?P<namespace>.+\\\\)?(?P<class>[^\\\\]+$)
(?P<nature2> (constitutionnelle|organique))
(?P<newLine>\\r\\n|\\n|\\r)
(?P<newlines>(\\r?\\n)+)(?P<followup>[^\\r\\n])
(?P<nick>[\\w\\d<-\\[\\]\\^\\{\\}\\~\\-]+)!(?P<user>[\\w\\d<-\\[\\]\\^\\{\\}\\~]+)@(?P<host>.+)
(?P<nmsg>\\d+) (?P<size>\\d+)
(?P<NO_FILE>.*No\\ssuch\\sfile\\sor\\sdirectory.*)
(?P<NOT_CONFIRMED>Host\\skey\\sverification\\sfailed)
(?P<NOT_FOUND>File.*not\\sfound.*)
(?P<not>not)?\\s*(?P<listitem><[a-zA-Z]+:[^>]*>|\\[.*?\\])
(?P<note>\\$note(?P<env>.*?)\\$endnote)
(?P<nsdname>.+)
(?P<num>.*?)(?:$|\\: )(?P<title>.*)
(?P<num>[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)(?P<multi>[kMGT])?
(?P<num>[0-9]+)
(?P<num>[0-9]+) members
(?P<num>\\-?\\d+\\.?\\d*)(?P<suf>\\D*)
(?P<num>\\d*)(?P<unit>[dmy])
(?P<num>\\d+)(?P<mark>.*?)\\\\S(?P<num_power>.*?)/.*?;
(?P<num>\\d+)(?P<unit>(|m|n)s|d)?
(?P<num>\\d+)(?P<unit>[^\\d\\s]+)
(?P<num>\\d+)\\s+(?P<description>\\S+ \\S*)\\s+(?P<path>.+)$
(?P<num>\\d+)d(?P<sides>\\d+)
(?P<num>\\d+)d[fF]
(?P<number>(\\d+([,\\.]\\d+)?(:\\d+)?))(?P<unit>[hms])
(?P<number>[\\d]+)(?P<ord>st|nd|rd|th)
(?P<number>[0-9]+)\\.(?P<decimal>[0-9]+)
(?P<off>[-]?\\d*)\\(%(?P<basep>\\w+)(,%(?P<idx>\\w+))?(?:,(?P<scale>\\d))?\\)(?P<eol>$)?
(?P<op><=|>=|<|>)?(?P<value>[\\w+]+)
(?P<opening>(?:open\\(|\\.href=)[\\\"\\'])(?P<url>.*)(?P<ending>[\\\"\\']\\)?)
(?P<operation>[a-z]{1})(?P<value>[\\S]*)
(?P<operator>[\\w\\s]+)\\(+(?P<value>.+)\\)+
(?P<operator>^[a-z]+)(?P<value>[0-9,-]+$)
(?P<option>(?P<preexisting>preexisting)?[^:=\\s][^:=]*)\\s*(?(preexisting)|(?P<vi>[:=])\\s*(?P<value>.*))$
(?P<OPTION>(unknown|invalid)\\soption\\s.*)
--(?P<option>[\\w\\-]+)(=(?P<value>(['\"].*?['\"]|.*?)))?(?:\\s|\\-|$)
(?P<option>[^:=\\s][^:=]*)\\s*(?:(?P<vi>[:=])\\s*(?P<value>.*))?$
(?P<option>[^:=\\s][^:=]*)\\s*(?P<vi>[:=])\\s*(?P<value>.*)$
(?P<option>[a-z-]+)=(?P<value>[a-z.]+)
(?P<option>^\\w+) (?P<operator>[~=]{1,2}) (?P<value>.+)$
(?P<ORNAMENTS>----*|\\[\\s*ID\\].*)
(?P<os>[^\\s]*) (Linux release|release) (?P<version>[\\d]+)
(?P<os>[^\\s]*) (Linux Server release) (?P<version>[\\d]+)
(?P<os>Oracle) (Linux Server release) (?P<version>[\\d]+)
(?P<os>Red Hat Enterprise Linux) (Client release|Server release|Workstation release) (?P<version>[\\d]+)
(?P<ostheme>[-]{3}slide(?P<block>.*?)[-]{3}endslide)
(?P<owner>.*)/(?P<name>.*)
(?P<package>.*\\.)(?P<remainder>[^.]+\\.[^.]+)$
(?P<package>[A-Za-z0-9\\._\\-]+)(?:\\[([A-Za-z0-9\\._\\-]+)\\])?\\s*(?:(?P<constraint>==|>=|>|<|<=)\\s*(?P<version>[A-Za-z0-9\\._\\-]+)(?:\\s*,\\s*[<>=!]+\\s*[a-z0-9\\.]+)?)?
(?P<pad>[=]*)$
(?P<pais>.*)
(?P<param>[^:\\(\\)/]*)
(?P<param>{{.+?}})
(?P<parent_residue_index>\\d+)\n    (?P<parent_atom_replaced>[odhnx])\n    \\((?P<parent_attachment_position>-?[0-9\\-\\|]+)[\\+\\-]\n        (?P<child_attachment_position>-?[0-9\\-\\|]+)\\)\n    (?P<child_residue_index>\\d+)\n    (?P<child_atom_replaced>[odhnx])\n    
(?P<part_prefix>\\D+)(?P<number>\\d+)
(?P<passwd>assword:\\s*$)
(?P<path_parts>(?:\\w+/)+)(?P<file_part>.*?)\\.class
(?P<path>.+)\\[(?P<start>\\d+)\\.\\.(?P<end>\\d+)\\;(?P<padding>\\d+)].(?P<extension>\\w{3})
(?P<path>[^;]+);(?P<file>[^;]+);(?P<line>[^;]+);(?P<name>[^;]+);(?P<goname>[^;]+);
(?P<path>\\S+) \\s+ \\((?P<address>0x[0-9a-f]+)\\)
(?P<PCKT>\\d+)\\s+(?P<GROUP>packets captured|packets received by filter|packets dropped by kernel)
(?P<people_helped>[0-9]+) of (?P<people_total>[0-9]+)
(?P<people>[0-9]+) people
(?P<pep>\\d+)(?P<anchor>#[^$]+)?
(?P<photo_id>\\S+)(?:\\s+(?P<size>large|medium|small))?(?:\\s+(['\"]{0,1})(?P<alt>.+)(\\3))?
(?P<pid_clone>\\d+)\\s+(clone|fork|vfork)\\(.*\\)\\s*=\\s*(?P<pid>\\d*)
(?P<pid>\\d+)(?P<body>.*)<unfinished ...>$
(?P<pid>\\d+)\\s+\\<\\.\\.\\..*\\>(?P<body>.*)
(?P<pid>\\d+)\\s+creat\\(\"(?P<name>[^\"]*)\", .*
(?P<pid>\\d+)\\s+execve\\(\"(?P<name>[^\"]*)\", .*
(?P<pid>\\d+)\\s+exit_group\\((?P<status>.*)\\).*
(?P<pid>\\d+)\\s+chdir\\(\"(?P<cwd>[^\"]*)\"\\)
(?P<pid>\\d+)\\s+killed by.*
(?P<pid>\\d+)\\s+l?stat(?:64)?\\(\"(?P<name>[^\"]*)\", .*
(?P<pid>\\d+)\\s+mkdir\\(\"(?P<name>[^\"]*)\", .*\\)\\s*=\\s(?P<result>-?[0-9]*).*
(?P<pid>\\d+)\\s+open\\(\"(?P<name>[^\"]*)\", (?P<mode>[^,)]*)
(?P<pid>\\d+)\\s+rename\\(\"[^\"]*\", \"(?P<name>[^\"]*)\"\\)
(?P<pid>\\d+)\\s+symlink\\(\"[^\"]*\", \"(?P<name>[^\"]*)\"\\)
(?P<pkg>.*?)-(?P<rest>\\d+.*)
(?P<PKTS_TRANS>\\d+) packets transmitted, (?P<PKTS_RECV>\\d+) received, (?P<PKT_LOSS>\\S+)% packet loss, time (?P<TIME>\\S+)
(?P<placeholder>[:][a-zA-Z0-9_]+)
(?P<platform>ALOS2)
(?P<platform>Android|CrOS|iPhone|iPad|Linux|Macintosh|Windows(\\ Phone\\ OS)?|Silk|linux-gnu|BlackBerry|Nintendo\\ (WiiU?|3DS)|Xbox)\n                (?:\\ [^;]*)?\n                (?:;|$)
(?P<platform>SENTINEL_1A)
(?P<pname>^/.*) : .* Id=(?P<ptypeid>[0-9a-z]+)
(?P<pre>^.+?(?:Sc\\d{3}_S\\d{4}\\.\\d{2})?\\D*)(?P<frame>\\d+)(?P<post>\\D*\\.[A-Za-z0-9]+?$)
(?P<pre>^.+?)\\[(?P<start>\\d+)(?P<separator>[^\\da-zA-Z]?)(?P<end>\\d+)\\](?P<post>\\.[A-Za-z0-9]+?$)
(?P<pred>[^ <:.]+)(?: < (?P<supertypes>[^ &:.]+(?: & [^ &:.]+)*))?(?: : (?P<synposis>.*[^ .]))?\\s*\\.\\s*$
(?P<prefix_name>^.*?)/subscription/Identity[^/]+
(?P<prefix>(?:lua)?(?P<jit>jit)?)(?P<version>.+)
(?P<prefix>.*?)(Settings)?$
(?P<prefix>.*?)wiki-(?P<date>\\d{8})-pages-articles.xml
(?P<PREFIX>.*\\D)(?P<NUMBER>\\d+)\\.(?P<SUFFIX>pdb)
(?P<prefix>[^/.]*)\\.(?P<ext>.*)$
(?P<prefix>[^0-9]+)(?P<number>\\d+)(?P<suffix>.*).?
(?P<prefix>[|+ ]*)(?P<samples>\\d+), (?P<symbol>[^,]+), (?P<image>.*)
(?P<prefix>[+-])(?P<hours>[0-9]{2}).(?P<minutes>[0-9]{2})
(?P<prefix>[A-Z]+)\\d+
(?P<prefix>\\)|\\])(?P<default>\\s*|\\s*default\\s*)values(?P<suffix>\\s*|\\s+\\()?
(?P<prefix>\\*sync\\*/\\S+/)(?P<account>\\S+)
(?P<prefix>\\D*)(?P<chr>[\\d|C|M]+)$
(?P<prefix>^| |\t)#(?P<ref>[\\w\\d\\._]+)(?P<parens>\\(\\))?
(?P<prefix>^|[\n (])(?P<element>(www|ftp)\\.[\\w\\-]+\\.[\\w\\-.\\~]+(?:/[^ \"\t\n\r<]*)?)
(?P<prefix>^|[^\\w\\)\\]])\\.(?P<value>\\w[\\w\\.]*)?
(?P<prefix>^test)
(?P<prefixsize>\\d+):(?P<totalsize>\\d+)\\n(?P<prefixes>.+)
(?P<prev_comm>\\S.*):(?P<prev_pid>\\d+) \\[(?P<prev_prio>\\d+)\\] (?P<status>\\S+) ==> (?P<next_comm>\\S.*):(?P<next_pid>\\d+) \\[(?P<next_prio>\\d+)\\]
(?P<price>[$\u00a3][\\d,\\.]+)
(?P<primary>\\*?)(?P<name>[^\\s]+)\\s*(\\{label:\\s*\"(?P<label>[^\"]+)\"\\})?
(?P<primary>primary )?(?P<geometry>[\\dx\\+]+) (?:(?P<rotate>\\w+) )?.*?(?:panning (?P<panning>[\\dx\\+]+))?$
(?P<prio>\\d+)\\s+(?P<exchange>.+)
(?P<prio>\\d+)\\s+(?P<weight>\\d+)\\s+(?P<port>\\d+)\\s+(?P<target>.+)
(?P<Priority>[A-Z]+): 
(?P<PrivatePort>\\d+(-\\d+)?)\\/(?P<Type>\\w+)
(?P<profile>\\@\\S+)
(?P<project_id>\\d+)/\\d+/\\d+
(?P<project>[^\\s:]+):\\s(?P<task>.*)
(?P<ProjectName>.*?)_(?P<ProjectVersion>.*?)_index
(?P<projnm>[^\\.]+)\\.(?P<field>(?:ut|vz|vx)[ifoOesrcbt]+)(?P<freq>[0-9]*\\.?[0-9]+).*$
(?P<properties>((\\w+)(,\\w+)*)?)(:(?P<field>(\\w+)?))?(:(?P<srid>(\\d+)?))?
(?P<property>[\\w-]+):\\s*(?P<value>[\\w-]+);
(?P<property>margin(-(top|bottom|left|right))?|float)\n        :\n        (?P<value>.*?)\n        (?P<terminator>$|;)
(?P<proto>.+)://(?P<addr>.+):(?P<port>.+)$
(?P<proto>\\S+)\\s+(?P<num>\\d+)
(?P<proto>inproc|ipc|tcp|pgm|epgm)://(?P<address>.*)$
(?P<proto>tcp|udp|icmp)(:(?P<port>\\d+|\\*))?
(?P<proto>unix://|tcp://)(?P<addr>[^:]+):*(?P<port>[0-9]*)$
(?P<protocol>[^:]+):(?P<mime>[^;]+);(?P<encoding>[^,]+),(?P<data>.*)
(?P<protocol>[a-z]+)://(?P<urlpart>.*)
(?P<protocol>[Pp][Yy][Rr][Oo][a-zA-Z]*):(?P<object>\\S+?)(@(?P<location>\\S+))?$
(?P<protocol>http|https)\\+(?P<format>virtualhost|path|subdomain)
(?P<protocol>https?):\\/\\/(?P<url>.+?)(:(?P<port>\\d+\\/)|\\/)$
(?P<q>[\"'])(?P<url>(https?:)?//[^'\"]*?/live/hls/[^'\"]*?\\?token=)\n                                   (?P<token>[^'\"]*?)(?P=q)
(?P<q>[\"'])(?P<url>http[^\"']+?.f4m)(?P=q),
(?P<q>[\"'])(?P<url>http[^\"']+?.f4m)(?P=q);
(?P<q>[\"'])(?P<url>http[^\"']+?.m3u8)(?P=q),
(?P<q>[\"'])(?P<url>http[^\"']+?.m3u8)(?P=q);
(?P<q>[\"'])embedURL(?P=q)\\s*:\\s*(?P<q2>[\"'])(?P<url>.*?)(?P=q2)
(?P<q1>[\"']?)file(?P=q1)\\s*:\\s*(?P<q2>[\"'])(?P<url>(?:http.+?m3u8.*?|rtmp://.*?))(?P=q2)
(?P<qs>[\\+\\-]?)(?P<gs>[\\+\\-])
(?P<quantity>[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)\\W*(?P<unit>.*)
(?P<queryString>[a-zA-Z:0-9\\-]+)/(?P<filename>[a-zA-Z0-9\\-_\\./]+)$
(?P<quote_type>'''|\"\"\"|'|\").*
(?P<quote>[.?!])\\s?'
(?P<quote>[.?!])\\s?\"
(?P<quote>[.?!])\\s?'\"
'(?P<quote>[.?!])\\s?\"
(?P<quote>[.?!])\\s?\u201d
'(?P<quote>[.?!])\\s?\u201d
(?P<quote>[\"']?)channel(?P=quote)\\s*:\\s*(?P<data>{.*?})\\s*,
(?P<range>\\d+)(@(?P<offset>.+))?
(?P<realm>Client|Server): &version.Version.SemVer:\"(?P<semver>.*?)\".*?GitCommit:\"(?P<commit>.*?)\".*?GitTreeState:\"(?P<treestate>.*?)\"
(?P<realTag>@\\w+)(?P<separator>$|\\(|\\\\|\\s)
(?P<ref>[^:^]+)(?P<parents>[\\^]+)?(?:[:](?P<path>.+))?
(?P<referred_table>.+)?\\.\\[(?P<referred_columns>.+)?]
(?P<region>[+-]?(?:ann(?=\\s))?\\s*[a-z]+?\\[[^=]+\\])(?:\\s*[,]\\s*(?P<parameters>.*))?
(?P<registry>([a-z][a-z0-9.-]+|(\\d+\\.){3}\\d+)(:\\d+)?)/(?P<repo_path>[^:]+)(:(?P<repo_tag>.+))?
(?P<relation>\\([^)]+\\))|(?P<prop>[a-zA-Z0-9_]+)
(?P<release>.*)_(?P<package>.*): (?P<status>[^\\s]*)( \\(+(?P<note>[^()]*)\\)+)?
(?P<remote_url>(?:.*?)(?:/|:))*(?P<team_name>[^/]+)/(?P<project_name>[^/]+?)(?:\\.git)?$
(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)(?P<command_string>[-a-zA-Z0-9_.]+)?\\((?P<is_array>\\s*\\[?)(?P<content>.*?)(\\]?)\\))
(?P<replace>(?P<type><(?:(?:!?@?)|\\|)?)(?P<command_string>[-a-zA-Z0-9_.]+)?\\((?P<is_array>\\s*\\[?)(?P<content>.*?)(\\]?)\\))
(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)(?P<command_string>[-a-zA-Z0-9_.]+)?\\((?P<is_array>\\s*\\[?)(?P<content>.*?)(\\]?)\\))
(?P<replace>cid:(?P<cid>.+))
(?P<repo>\\S+?) to (?P<environment>\\S+?)$
(?P<repo>\\S+?) to (?P<environment>\\S+?)(!)?$
(?P<repoPath>.*)/(?P<serviceType>git-receive-pack)$
(?P<repoPath>.*)/(?P<serviceType>git-upload-pack)$
(?P<repoPath>.*)/HEAD$
(?P<repoPath>.*)/info/packs$
(?P<repoPath>.*)/info/refs$
(?P<repoPath>.*)/objects/[0-9a-f]{2}/[0-9a-f]{38}$
(?P<repoPath>.*)/objects/info/alternates$
(?P<repoPath>.*)/objects/info/http-alternates$
(?P<repoPath>.*)/objects/pack/pack-[0-9a-f]{40}\\\\.idx$
(?P<repoPath>.*)/objects/pack/pack-[0-9a-f]{40}\\\\.pack$
(?P<repository>.+/)(?P<image>[^:]+)(?P<tag>:.+)
(?P<repository>[a-zA-Z0-9-]*)\\.(?P<domain>[a-zA-Z0-9-.]*)$
(?P<requestid>requestid:\\s*|requestid:\\t)?(?P<method>method:\\t|method:\\s*)?(?P<result>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/\\d+|\\d+|\\w+)
(?P<required>[_]{1,2})(?P<name>[^_]+)_?(?P<type>[a-zA-Z0-9]+)?_?(?P<userdefined>[a-zA-Z0-9]+)?.*$
(?P<RESEND>Permission\\sdenied,\\splease\\stry\\sagain)
(?P<resolution>720[Pp]|1080[Pp]|HR)
(?P<resource><.+?>)?\\s*\\((?P<listitem>[^)]+)\\)
(?P<rev>\\d+)_(?P<name>.*)\\.py$
(?P<revision>\\d+)
(?P<revIter>\\d*)(?P<name>.+)
(?P<role>[^ :]+) : (?P<value>[^ .]+)\\s*\\.\\s*$
(?P<root_url>https?://.*?/).*
(?P<root>https?://.*?/).*
(?P<ROOT>Root Delay):\\s+(?P<DELAY>\\S+),\\s+(?P<ROOT_2>Root dispersion):\\s+(?P<DISPERSION>\\S+),\\s+(?P<REF>Reference-ID):\\s+(?P<ID>\\S+)
(?P<SAVED>\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\s\\(\\d+.\\d+\\s\\w{2}/s\\)\\s-\\s.*)
(?P<score>\\d+) DMIPS
(?P<season>\\d+)_(?P<episode>\\d+)_(?P<video_id>\\d+)_(?P<title>.*?)_(?P<air_date>\\d+/\\d+/\\d+)
(?P<SEC_ASS>^Security Associations)
(?P<seconds>[0-9]+) second(s)? ago
(?P<seconds>\\d{2})(\\.(?P<microseconds>\\d{3,6}))?$
(?P<section>.+) \"(?P<subsection>.+)\"$
(?P<section>[A-Za-z0-9:_]+)\\.(?P<parameter>[A-Za-z0-9:_]+)\\s*=\\s*(?P<value>-?[A-Za-z0-9_\\.\\,]+)
(?P<seeders>[\\d]+) seeder\\(s\\), (?P<leechers>[\\d]+) leecher\\(s\\), (?P<downloads>[\\d]+) download\\(s\\) - (?P<size>[\\d\\.]+) (?P<format>[\\w]+)
(?P<seg_name>\\w*~?)[ \t]+(?P<seg_len>\\d+)
(?P<selector>[^{]+)(\\{)(?P<rules>[^}]+)\\}
(?P<sensor>LC08|LE07|LT04|LT05)_(?P<pathrow>\\d{6})_(?P<date>\\d{8})
(?P<sensor>LC8|LE7|LT5|LT4)(?P<pathrow>\\d{6})(?P<date>\\d{7})
(?P<sep>('|\"))(?P<url>.+?)(?P=sep)
(?P<separator>[^a-zA-Z0-9_{}])+(?P<part>[a-zA-Z0-9_{}]*)
(?P<sequence>\\d+)\\.proto[\\\\.]?$
(?P<settings_section>\\[Network\\][^\\[\\0]+)
(?P<shell>%|#\\s*$)
(?P<shortcode>(?:(?:\\s?\\[))(?P<name>[\\w\\-]{3,})(?:\\s(?P<attributes>[\\w\\d,\\s=\\\"\\'\\-\\+\\#\\%\\!\\~\\`\\&\\.\\s\\:\\/\\?\\|]+))?(?:\\])(?:(?P<content>[\\w\\d\\,\\!\\@\\#\\$\\%\\^\\&\\*\\(\\\\)\\s\\=\\\"\\'\\-\\+\\&\\.\\s\\:\\/\\?\\|\\<\\>]+)(?:\\[\\/[\\w\\-\\_]+\\]))?)
(?P<shortcode>\\S+)(?:\\s+(?P<size>[tml]?))?(?:\\s+(?P<width>\\d*))?(?:\\s+(?P<class>[^']*))?(?P<title>.+)?
(?P<schema>.+)://.*
(?P<scheme>.*?)://((?P<username>.*):(?P<password>.*)@)?(?P<host_port>.*)
(?P<scheme>[^?#/)]+://)?(?P<host>[^?#/)]+)
(?P<scheme>[a-z]+) (?P<token>.*)$
(?P<scheme>[https]+)://(?P<host>[^/:]+)(?::(?P<port>\\d+))?(?:(?P<prefix>/\\w+))?
(?P<scheme>^data):(?P<mimetypes>[^,]{0,}?)?(?P<encoding>base64)?,(?P<data>.*$)
(?P<scheme>http(?:s)?)://(?P<host>.*)
(?P<scheme>https?)://(?P<client_id>[0-9a-f]+):[0-9a-f]+@(?P<domain>.+)/(?P<site_id>\\d+)
(?P<scheme>https?)://(?P<subdomain>\\w+)\\.?euronews.com/(?P<path>live|.*)
(?P<scheme>stun|stuns)\\:(?P<host>[^?:]+)(\\:(?P<port>[0-9]+?))?
(?P<scheme>turn|turns)\\:(?P<host>[^?:]+)(\\:(?P<port>[0-9]+?))?(\\?transport=(?P<transport>.*))?
(?P<sid>(view)?story\\.php\\?(sid|psid|no|story|stid)=\\d+)
(?P<sign>[ \\-+])\\s+(?P<det>[a-zA-Z]+)(?P<lay>\\d+)\\D*?(\\((?P<missing>missing|inactive)\\))?\\s+\\d+
(?P<sign>[+-])(?P<hours>[0-9][0-9]):(?P<minutes>[0-9][0-9])
(?P<signal>[+-]?)(?P<relative>[\\d]?)(?P<weekday>[\\w]{2})$
(?P<siteID>\\d+)-(?P<divisionID>\\d+)-(?P<userID>\\d+)-(?P<accountNumber>\\d+)
(?P<size>[\\d.,]+)\\s*(?P<unit>[a-z]*)
(?P<size>[0-9/.]+)\\s+(?P<plated>P|N)\\s+T(?P<toolid>[0-9]{2})\\s+(?P<xtol>[0-9/.]+)\\s+(?P<ytol>[0-9/.]+)
(?P<size>[0-9]+)*(?P<code>\\w)
(?P<size>\\d+)(?P<unit>.B)?$
(?P<size>\\d+\\.*\\d*)(?P<unit>.*)
(?P<solver>.+)_(?P<rank>\\d+)_(?P<entity>.+)_(?P<time>[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?).npz
(?P<source_filename>.+)_(?P<x>\\d+)x(?P<y>\\d+)(?:_(?P<options>\\w+))?_q(?P<quality>\\d+)(?:.[^.]+)?$
(?P<source>[^()]*)(\\s+\\((?P<key>.*)\\))?$
(?P<space>[\\t ]*)\\*\\s*\\[(?P<title>[^\\]]+)\\]\\((?P<mdFileName>[^\\)]+)\\)
(?P<space>\\s)(?P<ref>#\\d+\\w)
(?P<space>\\S+)\\s+(?P<vol>\\S+)\\s+(?P<vg>\\S+)\\s+(?P<size>\\d+)MB
(?P<spacer>(?:,|\\/)\\s*)(?P<suffix>[\\w\\-]+)
(?P<spacing>^|\\s+)(?::(?P<domain>[^:`<>]+))?:(?P<role>[^:`]*):`(?P<argument>[^`<>]+)(?: +<(?P<pointer>[^`]+)>)?`
(?P<SRC>\\S+)\\s+>\\s+(?P<DST>\\S+):\\s+(?P<DETAILS>\\S+.*\\S+)
(?P<SSH_ERROR>ssh:.+)
-(?P<stability>\\w+)\\d+$
(?P<stamp>[\\d-]*)_hello
(?P<start_brace>\\$\\{).*
(?P<start_brace>\\(|\\{|\\[).*
(?P<start_brace>\\{).*
(?P<start_xml>([^<]|\n)*?\\<\\?xml[^>]*)(?P<encoding>encoding=.*?)(?P<remainder>(\\s|\\?\\>)(.|\n)*)
(?P<start># rhos-release )(?P<release>\\d+)\\s*(?P<director>-director)?\\s*(?P<poodle>-d)?\\s*(-p (?P<version>\\S*))?
(?P<start>(?:-\\d)?\\d*):(?P<end>(?:-\\d)?\\d*):?(?P<step>(?:-\\d)?\\d*)
(?P<start>(\\d+))-(?P<end>(\\d+))
(?P<start>(\\d+)|\\*)(-(?P<end>\\d+))?(/(?P<step>\\d+))?
(?P<start>.*[R|r]an in\\s)\\d+\\.?\\d*.*(?P<end>seconds.*)
(?P<start>.*took\\s*)\\d+\\.?\\d*.*(?P<seconds>seconds.*)\\d+\\s(?P<end>garbage objects.*)
(?P<start>.?)#(?P<hashtag>[A-Za-z0-9_]+)(?P<end>.?)
(?P<start>.?)@(?P<user>[A-Za-z0-9_]+)(?P<end>.?)
(?P<start>.+)\\s+(-)\\s+(?P<stop>.+)
(?P<start>[0-9]+(?:\\.[0-9]*)?)(?:(?P<range>-)(?P<end>[0-9]+(?:\\.[0-9]*)?)?)?(?P<unit>%)?
(?P<start>\\d{1,2}:\\d{1,2}:\\d{1,2})\\s*-(?P<end>\\s*\\d{1,2}:\\d{1,2}:\\d{1,2})
(?P<start>\\d+)(?:-(?P<stop>\\d+)(?::(?P<num>\\d+)(:?(?P<log>log)(:?(?P<base>\\d+))?)?)?)?
(?P<start>\\d+):(?P<end>\\d|\\*)
(?P<start>^)?[:.\\s]*(?(start)|$)
(?P<start>0x[0-9a-z]+)\\s*-\\s*(?P<end>0x[0-9a-z]+)\\s+is\\s+(?P<section>[^\\s]+)
(?P<start>Attempting to get lock for plugin .*with lock path) \\\".*\\\".*(?P<id> and identifier).*(?P<in> in) \\d\\.?\\d*(?P<seconds> seconds)
(?P<start>Installed: )(?P<filename>\\S+)
(?P<statement>CREATE UNIQUE INDEX)\\s+(?P<index>[\\w-]+)\\s+ON\\s+(?P<table>[\\w-]+)\\s*\\((?P<column>[\\w-]+(?:\\s*\\((?P<size>\\d+)\\))?)\\);
(?P<status>[A-Z]+): Processed (?P<job_spec>[\\s\\S]*)
(?P<status>[A-Za-z]+)(  at (?P<episodes>[0-9]+) of (?P<total_episodes>[0-9]+))?
(?P<status>complaints)
(?P<status>pending|terminated)\\s+counts
(?P<string>\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"|\\'[^ \\\\]*(?:\\\\.[^ \\\\]*)*)|(?P<axis>[<:][^/]*/(?:[HN]?EQ|H)(?:&[^/]*/(?:[HN]?EQ|H))*[:>])|(?P<symbol>[^\\s#:><@=()\\[\\]&|]+)|(?P<nodeid>#\\d+)|(?P<punc>[@=()\\[\\]&|])
(?P<struct>C_STRUCT\\s|C_ENUM\\s|)(?P<type>\\w+\\s?\\w+?[*]*)\\s(?P<name>\\w+|[a-z0-9_, ]+)(:?\\[(?P<index>\\w+)\\])?;
(?P<subject>[^\\n]+)(:?\\n\\n(?P<text>.+))?
(?P<SUM>[\\da-f]{32})\\s+(?P<FILE>\\S+)
(?P<sup>^\\^?)(?P<open>[<({\\[]?)(?P<href>#?)(?P<style>1)(?P<ranging>-?)(?P<separator>[^-]+)
(?P<t>\\S+)(?P<d>\\s+(?:.|\\s)*)
(?P<t>\\S+)\\s+\\$(?P<name>\\S+)(?P<d>\\s+(?:[\\w\\W_\\s]*))?
(?P<table>.*?)\\.(?P<field>.*?)\\..*
(?P<table>[\\w\\-]+)\\.(?P<field>[\\w\\-]+)\\.(?P<uuidkey>[\\w\\-]+)(\\.(?P<name>\\w+))?\\.\\w+$
(?P<table>[\\w\\-]+)\\.(?P<field>[\\w\\-]+)\\.(?P<uuidkey>[\\w\\-]+)\\.(?P<name>\\w+)\\.\\w+$
(?P<table>[^:]+)?(:(?P<cols>.+))?$
(?P<tag>(?:-p|-b)).m3u8
(?P<tag>.+)\\s+\\d+:.+$
(?P<tag>[^-]+)-(?P<val>.*?)__
(?P<tag><\\/[a-z]+)$
(?P<target>[[:alnum:]]+.[[:alnum:]]+)
(?P<TASK_ROW>Tasks):\\s*(?P<TOTAL>\\d*)\\s*total,\\s*(?P<RUN>\\d*)\\s*running,\\s*(?P<SLEEP>\\d*)\\s*sleeping,\\s*(?P<STOP>\\d*)\\s*stopped, \\s*(?P<ZOMBIE>\\d*)\\s*zombie
(?P<temperature>-?\\d+)
(?P<template_head> [\\s\\S]* {% \\s* extends \\s* \\S+ \\s* %} )
(?P<template>.*?)\\.[a-z0-9]+$
(?P<test_id>[0-9]+$)
(?P<text>(?P<path>/[\\w\\d\\/\\.]+):|\",[\\s\\w]+(?P<line>\\d+))
(?P<text>[a-zA-Z\\s]*?)\\s*\\(?(?P<low>[\\d.]+)\\s*[-\u2013]\\s*(?P<high>[\\d.]+).*?\\)?
(?P<text>[a-zA-Z\\s]*?)\\s*\\(?(?P<symbol>[<>=]+)\\s*(?P<value>[\\d.]+).*?\\)?
(?P<textb>.*)(\\[(?P<text>.*?)\\]\\((?P<url>.*?)\\))(?P<texta>.*)
(?P<time>[^ ]*\\s*[^ ]* [^ ]*) (?P<host>[^ ]*) (?P<ident>[a-zA-Z0-9_\\/\\.\\-]*)(?:\\[(?P<pid>[0-9]+)\\])?(?:[^\\:]*\\:)? *(?P<message>.*)$
(?P<TIME>\\S+)\\s+(?P<CPU>\\S+)\\s+(?P<USR>\\d+.\\d+)\\s+(?P<NICE>\\d+.\\d+)\\s+(?P<SYS>\\d+.\\d+)\\s+(?P<IOWAIT>\\d+.\\d+)\\s+(?P<IRQ>\\d+.\\d+)\\s+(?P<SOFT>\\d+.\\d+)\\s+(?P<STEAL>\\d+.\\d+)\\s+(?P<GUEST>\\d+.\\d+)\\s+(?P<IDLE>\\d+.\\d+)$
(?P<TIMESTAMP_HEADER>\\S+.*\\S+\\s+Timestamp):\\s+(?P<DETAILS>\\S+.*\\S+)
(?P<timestamp>[0-9]{2}:[0-9]{2}:[0-9]{2}((Z|\\+|\\-)([0-9]{2}:[0-9]{2})?)?)
(?P<timestamp>\\d{2}/\\d{2}/\\d{2}-\\d{2}:\\d{2}:\\d{2}\\.\\d+)\\s+\\[\\*\\*\\]\\s+\\[\\d+:(?P<sid>\\d+):(?P<revision>\\d+)\\] (?P<message>.+) \\[\\*\\*\\]\\s+(\\[Classification: (?P<classtype>.+)\\] ){0,1}\\[Priority: (?P<priority>\\d+)\\] \\{(?P<protocol>\\w+)\\} (?P<src>.+) \\-\\> (?P<dest>.+)
(?P<timestamp>\\d{2}/\\d{2}/\\d{4}-\\d{2}:\\d{2}:\\d{2}\\.\\d+)\\s+\\[\\*\\*\\]\\s+\\[\\d+:(?P<sid>\\d+):(?P<revision>\\d+)\\] (?P<message>.+) \\[\\*\\*\\]\\s+(\\[Classification: (?P<classtype>.+)\\] ){0,1}\\[Priority: (?P<priority>\\d+)\\] \\{(?P<protocol>\\w+)\\} (?P<src>.+) \\-\\> (?P<dest>.+)
(?P<timestamp>\\d{4}-\\d\\d-\\d\\d\\ \\d\\d:\\d\\d:\\d\\d.\\d+)\\|\\ *(?P<level>\\w+)\\ *\\|\\ *(?P<component>\\w+)\\ *\\|\\ *(?P<sid>\\d+)\\ *\\|\\ *(?P<message>.*)
(?P<TIMESTAMP>\\d+:\\d+:\\d+.\\d+)\\s+IP\\s+(?P<SRC>\\S+)\\s+>\\s+(?P<DEST>\\S+):\\s+(?P<DETAILS>.*)
(?P<TIMESTAMP>\\d+:\\d+:\\d+.\\d+)\\s+IP\\s+\\(tos\\s+(?P<TOS>\\S+),\\s+ttl\\s+(?P<TTL>\\S+),\\s+id\\s+(?P<ID>\\S+),\\s+offset\\s+(?P<OFFSET>\\S+),\\s+flags\\s+(?P<FLAGS>\\S+),\\s+proto\\s+(?P<PROTO>\\S+.*\\S+),\\s+length\\s+(?P<LENGTH>\\S+)\\)
(?P<title>(Rep|Sen))\\. (?P<name>.*?) +\\[(?P<party>[DRI])-(?P<state>[A-Z][A-Z])(-(?P<district>\\d{1,2}|At Large|None))?\\]$
(?P<title>.+) (\\((class in )?(?P<id>[\\w\\.]+)( (?P<descr>\\w+))?\\))$
(?P<title>[^#]+)(?:[#]+(?P<index>\\d+))?
'(?P<title>[^']+)'\\s+\\((?P<year>\\d{2})\\)
'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})?\\)
'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)
(?P<title>[A-Z][a-z]{1,3})(\\.)
(?P<token>([Dd]a|[Ee])s)/(?P<annotation>[anpr])(?P<uncertain>\\??)
(?P<TOP_ROW>.*)\\s-\\s(?P<TIME>\\d*:\\d*:\\d*)\\sup\\s(?P<UP_TIME>.*,.*),\\s*(?P<USERS>.*)user.*load average:(?P<LOAD_AVE> .*)
(?P<topic>[a-zA-Z0-9\\\\._\\\\-]+)\\s+(?P<partitionId>\\d+|-)\\s+(?P<currentOffset>\\d+|-)\\s+(\\d+|-)\\s+(?P<lag>\\d+|-)\\s+(?P<consumerId>[^/\\s]+)\\s*/?(?P<consumerAddress>\\S+)\\s+(?P<clientId>\\S+)
(?P<track_url>https?://soundcloud.com/[\\S]+)
(?P<trad>.+?) (?P<simp>.+?) \\[(?P<pinyin>.+?)\\] /(?P<defs>.+)/
(?P<trad>\\S*?) (?P<simp>\\S*?) \\[(?P<pinyin>.+)\\] \\/(?P<defs>.+)\\/
(?P<trapname>\\S+) (?P<trapseverity>\\S+) \"Status Events\" (?P<source_host>\\S+) - (?P<trappayload>.*)
(?P<ts>\\d+);(?P<token>\\d+);(?P<lifetime>\\d+)
(?P<type>.*):\\s+(?P<val>.*)
(?P<type>[\\w\\s\\d\\*]+)\\s(?P<name>[\\w\\d]+)$
(?P<type>[^ <.]+)(?: < (?P<supertypes>[^ &.]+(?: & [^ &.]+)*))?\\s*\\.\\s*$
(?P<type>[A-Z^']+) (?P<route>[^']+) HTTP/(?P<http>[^']+)
(?P<type>[a-zA-Z\\ \\-]+):
--(?P<type>[a-zA-Z]+)-- (?P<contents>.*)
(?P<type>\\S+):\\s+(?P<size>[0-9]+)
(?P<type>\\w+)($|\\((?P<length>(\\d+|(.*)))\\))
(?P<type>\\w+)(?:\\((?P<length>[\\d,]+)\\))?
(?P<type>\\w+)/(?P<year>\\d+)-(?P<ordinal>\\d+)
(?P<type>\\w+)/(?P<year>\\d+)_not_(?P<ordinal>\\d+)
(?P<type>\\w+):\\s+(\\d+):(?P<line>\\d+):\\s+(?P<description>.*)
(?P<type>\\w+)\\.stat_(?P<number>\\d+)
(?P<type>\\w+)\\s?(?P<class>\\w+)?
(?P<type>c|a)(?P<id>\\d+)
(?P<type>feat|fix|docs|style|refactor|test|chore)(?:\\((?P<scope>[\\w _\\-]+)\\))?: (?P<subject>[^\\n]+)(:?\\n\\n(?P<text>.+))?
(?P<type>Chapter|Special) (?P<num>[0-9\\.]+)(?:$|\\: )(?P<title>.*)
(?P<type>rpc|rest)
(?P<TYPE>RX|TX)
(?P<unit>[\\w]+)\\s+(?P<first>\\d+)-(?P<last>\\d+)\\/(?P<length>\\d+|\\*)
(?P<unsupported> \\.)? (?P<match> ((?P<scope> (\\w+\\.)* \\w+) \\.)? (?P<complete>\\w*) $)
(?P<upper_letter>(?<=[a-z])[A-Z])
(?P<uri>[a-zA-Z0-9-./]+?).md#(?P<anchor>[a-zA-Z0-9-]+)
(?P<url_base>https?.*)/
(?P<url_chars>.*)(?P<tag><\\/[a-z]+)$
(?P<url>.*/)[-\\w\\.]+/?$
(?P<url>.*?),? (?P<size>[0-9]+(\\.[0-9]+)?[wx],?)?\\s?
(?P<url>.+?)\\|(?P<width>.+?)\\|(?<height>\\d+)
(?P<url>/invitations/[^\\s]+)
(?P<url>\\S*)\\s(?P<ip_address>\\S*)\\s(?P<date>\\S*)\\s(?P<content_type>\\S*)\\s(?P<length>\\S*)
(?P<url>\\S*)\\s(?P<ip_address>\\S*)\\s(?P<date>\\S*)\\s(?P<content_type>\\S*)\\s(?P<result_code>\\S*)\\s(?P<checksum>\\S*)\\s(?P<location>\\S*)\\s(?P<offset>\\S*)\\s(?P<filename>\\S*)\\s(?P<length>\\S*)
(?P<url>^.*\\])(?!=)(?P<end>.*?)$
(?P<url>^.*\\])(?P<tight>\\[.*?)$
(?P<url>http://[0-9a-z:/@-]+)(?=\n)
(?P<url>http://[0-9a-zA-Z\\-\\.]*/\n                            (lokad|opid)\n                            /\n                            ([0-9]+/[0-9][0-9]/[0-9][0-9]/)?\n                            ([A-Z0-9\\$_]+\\.mp4\\.m3u8)\n                            )\n                         
(?P<url>http[s]?://[\\w./~_-]+\\.git)(?:@(?P<branch>[\\w_-]+))?
(?P<url>https?://[^\\s;]+)
(?P<url>https?://[^\\s]+)
(?P<url>https?://[^\\s]+\\.gif+)
(?P<url>rtmp://[^/]+/[^/]+)/(?P<playpath>[^?]+)(?P<auth>\\?.+)
(?P<url>rtmpe?://[^/]+)/(?P<app>.+)/(?P<playpath>mp4:.*)
(?P<url>screen\\.yahoo\\.com/.*?-\\d*?\\.html)\"
(?P<url>www[^\\s]+)
(?P<USER_HOST>.*)\\spassword:
(?P<user>.*?)@(?P<host>.*?):(?P<path>.*)
(?P<user>[^@]+)@(?P<host>[^:]+)(?P<port>:.*)?
(?P<user>[a-z_][a-z0-9_-]*)           # ALWAYS start with the username\n       (?::(?P<file>/(?:\\\\:|[^:])+))?        # File is next if it's :/path\n       (?::(?P<uid>\\d*))?                    # Either /uid or :uid introduces a uid (number may be missing)\n       (?::(?P<gid>[a-z_][a-z0-9_-]*|\\d+)?)? # followed by an optional GID\n       $
(?P<user>[a-zA-Z0-9-]+@)*(?P<hostname>[a-zA-Z0-9.-]+)(?P<path>[a-zA-Z0-9./-]+)
(?P<User>\\S+)\\s*$
(?P<v1>cd)(?P<v2>ef)
(?P<v6>.*):(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$
(?P<val_1>\\S+)\\s+(?P<val_2>\\S+)\\s+(?P<val_3>\\S+)\\s+(?P<val_4>\\S+)\\s+(?P<val_5>\\S+)\\s+(?P<val_6>\\S+)\\s+(?P<val_7>\\S+)\\s+(?P<val_8>\\S+)
(?P<val>\\d+.?\\d+)\\s+MW
(?P<value>(?:[-+]?[0-9]*\\.[0-9]+|[-+]?[0-9]+%?))
(?P<value>.+?)\\s*\\<(?P<name>.+)\\>
(?P<value>[+-]?(?:\\d+)(?:\\.\\d+)?)\\s*(?P<unit>\\D+)?
(?P<value>\\d*) \\((?P<percent>.*)%\\)
(?P<value>\\d*)(?P<unit>\\w*)
(?P<value>\\d+)(?P<unit>\\D+)?
(?P<value>\\d+)(?P<unit>pt|px)
(?P<value>\\d+)(?P<units>[a-z])
(?P<value>\\d+)\\s*(?P<units>[a-zA-Z%]+)?
(?P<value>\n                             [+-]?         # optional sign\n                             \\d*\\.?\\d+     # integer or float value\n                           )\n                           \\s*             # optional space between value & unit\n                           (?P<unit>\n                             [a-z%/0-9]*   # unit (can be an empty string)\n                           )\n                       
(?P<VALUE>\\S+)
(?P<var>.*),\\s+\"(?P<value>.*)\"
(?P<var>[\\w.]+)=\\s*(?P<value>.+)?
(?P<var>[^ <:.]+)(?: < (?P<supertypes>[^ &:.]+(?: & [^ &:.]+)*))?(?: : (?P<properties>[^ ]+ [^ ,.]+(?:, [^ ]+ [^ ,.]+)*))?\\s*\\.\\s*$
(?P<var>\\$\\{(?P<name>[A-Z0-9_]+)\\})
(?P<var><([a-zA-Z0-9_]+:)?(?P<var_name>[a-zA-Z0-9_]+)>)
(?P<variable>.+)\\s*=\\s*(?P<value>.+)
(?P<variable>\\w[^=]*)\\s*(?P<sign>=\\>?)\\s*(?P<expr>.*)\\Z
(?P<vehicle>LS[578])_(?P<instrument>OLI_TIRS|OLI|TIRS|TM|ETM)_(?P<type>NBAR)_(?P<level>P54)_GA(?P=type)(?P<product>[0-9][0-9])-(?P<groundstation>[0-9]{3})_(?P<path>[0-9]{3})_(?P<row>[0-9]{3})_(?P<date>[12][0-9]{7})$
(?P<version>\\d{1,4})\\.(?P<subversion>\\d{1,4})\\.(?P<revised>\\d{1,4})
(?P<version>\\d+)(\\.(?P<major>\\d+)(\\.(?P<minor>\\d+)(-rc(?P<rc>\\d+))?)?)?(.*-g(?P<sha1>[0-9a-fA-F]{7,}))?
(?P<version>v[\\d\\.]+)/?$
(?P<versionless_uri_str>.+)#(?P<generation>[0-9]+)$
(?P<versionless_uri_str>.+)#(?P<version_id>.+)$
(?P<video_encoding>x264|H.264|AVC1|H.265)
(?P<video>\\$video(?P<env>.*?)\\$endvideo)
(?P<viewId>id/\\S+)
(?P<w>[0-9]+)x(?P<h>[0-9]+)(?:\\+(?P<x>[0-9]+))?(?:\\+(?P<y>[0-9]+))?.*
(?P<w>\\d+)w
(?P<wall_time>[0-9.]+)s wall, (?P<user_time>[0-9.]+)s user [+] (?P<sys_time>[0-9.]+)s system [=] (?P<cpu_time>[0-9.]+)s CPU [(](?P<wall_cpu_percent>[nN/aA0-9.]+)%?[)]
(?P<weight>\\d+)\\s+(?P<data>.*)
(?P<when>(FM|TL|AT))(?P<hour>\\d\\d)(?P<min>\\d\\d)\\s+
(?P<where>WHERE\\s*\\{)
(?P<whitespace>[ \n]*)(?P<entry>[^ \n]+)
(?P<who>[ugoa]+)(?P<op>[-+=])(?P<what>[rwx]*)$
(?P<whole_line>^Host:\\s.*)
(?P<width>[0-9]+)x(?P<height>[0-9]+)(?:_(?P<bitrate>[0-9]+))?
(?P<width>\\d+)[:/](?P<height>\\d+)
(?P<width>\\d+)[xX](?P<height>\\d+)
(?P<width>\\d+)\\s?[xX]\\s?(?P<height>\\d+)
(?P<width>\\d+)x(?P<height>\\d+)
(?P<width>\\d+)x(?P<height>\\d+)\\.jpg$
(?P<without_proof>c=(?P<cb>[a-zA-Z0-9/+=]+),(?:r=(?P<nonce>[\\x21-\\x2B\\x2D-\\x7E]+))(?:,.*)?),p=(?P<proof>[a-zA-Z0-9/+=]+)$
(?P<x>.)(?P<y>.)(42)?
(?P<x>\\d+),(?P<y>\\d+),(?P<z>\\d+)
(?P<x>1)(?P<y>3)
(?P<x>x)(?P<y>y)(42)?
(?P<y>\\d+)y
(?P<year>-?\\d{4})(-(?P<month>(0[1-9]|1[0-2]))(-(?P<day>(0[1-9]|[1-2]\\d|3[01])))?)?(T(?P<hour>([01]\\d|2[0-4]))((:(?P<minute>[0-5]\\d))(:(?P<second>([0-5]\\d|60))(\\.(?P<microsecond>\\d{1,16}))?)?)?((?P<tzutc>Z)|((?P<tzhr>[+-](([0]\\d)|(1[0-3])|(?P<tzlimit>)14))(:(?P<tzmin>(?(tzlimit)00|([0-5]\\d))))?))?)?$
(?P<year>[\\d]{1,4})-(?P<month>[\\d]{1,2})-(?P<day>[\\d]{1,2})
(?P<year>[\\d]{1,4})-(?P<month>[\\d]{1,2})-(?P<day>[\\d]{1,2}) (?P<hour>[\\d]{1,2}):(?P<minute>[\\d]{1,2})(:(?P<second>[\\d]{1,2}))?(.(?P<microsecond>[\\d]{1,5}))?
(?P<year>[0-9]{4})(-(?P<month>[0-9]{1,2})(-(?P<day>[0-9]{1,2})((?P<separator>.)(?P<hour>[0-9]{2}):(?P<minute>[0-9]{2})(:(?P<second>[0-9]{2})(\\.(?P<fraction>[0-9]+))?)?(?P<timezone>Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?
(?P<year>[0-9]{4})-(?P<month>[0-9]{1,2})-(?P<day>[0-9]{1,2})T(?P<hour>[0-9]{2}):(?P<minute>[0-9]{2}):(?P<second>[0-9]{2})(\\\\.(?P<fraction>[0-9]+))?(?P<timezone>Z|(([-+])([0-9]{2}):([0-9]{2})))
(?P<year>[0-9]+)$
(?P<year>[0-9]+)[-/](?P<month>[0-9]+)$
(?P<year>[0-9]+)[-/](?P<month>[0-9]+)[-/](?P<day>[0-9]+)$
(?P<year>[0-9]+)[-/](?P<month>[0-9]+)[-/](?P<day>[0-9]+)[T ](?P<hour>[0-9]+)$
(?P<year>[0-9]+)[-/](?P<month>[0-9]+)[-/](?P<day>[0-9]+)[T ](?P<hour>[0-9]+):(?P<minute>[0-9]+)$
(?P<year>[0-9]+)[-/](?P<month>[0-9]+)[-/](?P<day>[0-9]+)[T ](?P<hour>[0-9]+):(?P<minute>[0-9]+):(?P<second>[0-9]+)$
(?P<year>[0-9]+)[-/][Qq](?P<quarter>[0-9]+)$
(?P<year>[0-9]+)[-/][Ww](?P<quarter>[0-9]+)$
(?P<year>\\d\\d\\d\\d)(?:-(?P<month>\\d\\d)(?:-(?P<day>\\d\\d)(?:T(?P<hour>\\d\\d)(?::(?P<minute>\\d\\d)(?::(?P<second>\\d\\d))?)?)?)?)?Z
(?P<year>\\d\\d\\d\\d)[-./](?P<month>\\d\\d)[-./](?P<day>\\d\\d)
(?P<year>\\d{4})-(?P<court>[SC]{2})-(?P<number>\\d+)
(?P<year>\\d{4})(?P<month>[01]\\d)(?P<day>[0123]\\d)_(?P<hour>[012]\\d)(?P<minute>[0-5]\\d)
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2}) (?P<hour>\\d{1,2}):(?P<minute>\\d{1,2}):(?P<second>\\d{1,2})$
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2}) (?P<hour>\\d{1,2}):(?P<minute>\\d{1,2}):(?P<second>\\d{1,2}).(?P<microsecond>\\d{1,6})$
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})$
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})(?:[ T](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2}):(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6}))?(?P<timezone>Z|[+-]\\d\\d:\\d\\d)?)?$
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{1,2}:\\d{1,2})?$
(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$
(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2}) (?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2})
(?P<Year>\\d{4})-(?P<Month>\\d{2})-(?P<Day>\\d{2})-(.*)
(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})(?P<hour>\\d{2})(?P<minute>\\d{2})?(?P<second>\\d{2})?(?:[.,](?P<microsecond>\\d+))?(?P<tzinfo>Z|[+-]\\d{2}(?:\\d{2})?)$
(?P<year>\\d{4})/(?P<month>\\d{2})/(?P<day>\\d{2}) (?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2}) \\[(?P<level>[a-z]*)\\] (?P<pid>\\d+)#(?P<tid>\\d+): (\\*(?P<cid>\\d+) )?(?P<message>[^,]+)(, client: (?P<ip_address>[^,]+))?(, server: (?P<server>[^,]+))?(, request: (?P<verb>(GET|POST)) (?P<url>[^ ]+) (?P<protocol>HTTP/(1\\.0|1\\.1|2\\.0)))?(, upstream: (?P<upstream>[^,]+))?(, host: (?P<host>[^,]+))?(, referrer: (?P<referrer>[^,]+))?$
(?P<year>\\d{4})-?(?P<month>\\d{2})-?(?P<day>\\d{2})(?:\\s*(?:T\\s*)?(?P<hour>\\d{2})(?::?(?P<minute>\\d{2})(?::?(?P<second>\\d{2}))?)?(?:[,.](?P<fraction>\\d+))?(?:\\s*(?P<tz>(?:Z|[+-](?P<tzhh>\\d{2})(?::?(?P<tzmm>\\d{2}))?)))?)
(?P<year>\\d+)-(?P<month>\\d+)-(?P<day>\\d+)T(?P<hour>\\d+):(?P<minute>\\d+):(?P<second>\\d+)(?:.(?P<subsecond>\\d{1,6})|)Z
(?P<year>\\d+)\\.(?P<month>\\d+)\\.\\d+
(?P<YYYY>\\d\\d\\d?\\d?):(?P<MM>\\d\\d?):(?P<DD>\\d\\d?) (?P<hh>\\d\\d?):(?P<mm>\\d\\d?):(?P<ss>\\d\\d?)
(?P<zip>[0-9])
(?s)(?i)(?u).*\\\\\"ok\\\\\"\\s*:\\s*true.*
(?s)(?i:usage):\\s*(?P<prog>\\S+)(?P<pats>.*?)(?:$|\\n\\s*\\n)
(?s)(?P<li><li[^>]+class=([\"\\'])(?:(?!\\2).)*?section-item[^>]+>.+?</li>)
(?s)(?P<time>\\S\\S\\S \\d\\d \\d\\d:\\d\\d:\\d\\d) (?P<hostname>[a-z0-9\\-]+) (?P<payload>.*)
(?s)(<(?P<tag>(?:amp-)?(?:video|audio))(?:\\s+[^>]*)?>)(.*?)</(?P=tag)>
(?s)/\\*(?P<config>.*?)\\*/
(?s)\\\\([0-9a-fA-F]{1,6})[\\n\\t ]?|\\\\(.)|\\\\\\n
(?s)\\\\?(?:(\\+{3})(.*?)\\+{3}|(\\${2})(.*?)\\${2}|pass:([a-z,]*)\\[(.*?[^\\\\])\\])
(?s)\\{\\~\\~(?P<original>(?:[^\\~\\>]|(?:\\~(?!\\>)))+)\\~\\>(?P<new>(?:[^\\~\\~]|(?:\\~(?!\\~\\})))+)\\~\\~\\}
(?s)\\d+ (?P<time>\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d\\.\\d+) (?P<severity>\\w): (?P<payload>.*)
(?s)\\Q${\\E([^}]+?)(?:\\Q:+\\E([^}]+))?\\Q}
(?s)\\Q%{\\E(\\d)(?:\\Q:+\\E([^}]+))?\\Q}
(?s)<(?:iframe|bulbs-video)[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?onionstudios\\.com/(?:embed.+?|video/\\d+\\.json))\\1
(?s)<span[^>]+class=[\"\\']dates[\"\\'][^>]*>.+?\\bS\\.(?P<season_number>\\d+)\\s+E\\.(?P<episode_number>\\d+)\\s*-\\s*(?P<upload_date>\\d{2}/\\d{2}/\\d{4})
(?s)jwplayer\\((?P<quote>[\\'\"])[^\\'\" ]+(?P=quote)\\)(?!</script>).*?\\.setup\\s*\\((?P<options>[^)]+)\\)
(?s)LimelightPlayerUtil\\.embed\\s*\\(\\s*{.*?\\bmediaId[\"\\']\\s*:\\s*[\"\\'](?P<id>[a-z0-9]{32})
(?s:\\\\(.))
(?sm)\\\\?((?:latex|ascii)?math):([a-z,]*)\\[(.*?[^\\\\])\\]
(?sm)^(?:\\s*#!\\s*(?P<program>[^\\s]*)[ \\t]*(?P<app>[^\\s]*)?\\s*$)?\\s*(?P<source>.*)
(?smU)\\\\s*{\\\\$(.*)\\\\$}\\\\s*
(?smU){\\\\@(.*)\\\\@}
(?smx)\n    (<\\?.*?\\?>)?\\s*\n    <!DOCTYPE\\s+(\n     [a-zA-Z_][a-zA-Z0-9]*\n     (?: \\s+      # optional in HTML5\n     [a-zA-Z_][a-zA-Z0-9]*\\s+\n     \"[^\"]*\")?\n     )\n     [^>]*>\n
(?sU)([^ ]+=)[\"'](.*)[\"']
(?sU)(INSERT INTO .+ \\(\\s*)(.+)(\\s*\\) VALUES.+\\))
(?sU:\\{.*\\}\\n\\};)
(?sUm:^(.*) *-)
(?sx)\n                    <object[^>]+class=([\"\\'])(?:(?!\\1).)*\\bLimelightEmbeddedPlayerFlash\\b(?:(?!\\1).)*\\1[^>]*>.*?\n                        <param[^>]+\n                            name=([\"\\'])flashVars\\2[^>]+\n                            value=([\"\\'])(?:(?!\\3).)*(?P<kind>media|channel(?:List)?)Id=(?P<id>[a-z0-9]{32})\n                
(?sx)\n                <script[^>]+src=([\"'])(?:https?:)?//fast\\.wistia\\.com/assets/external/E-v1\\.js\\1[^>]*>.*?\n                <div[^>]+class=([\"']).*?\\bwistia_async_(?P<id>[a-z0-9]+)\\b.*?\\2\n            
(?sx)^\n            (?:window\\.)?(?P<func_name>[a-zA-Z0-9_.$]*)\n            (?:\\s*&&\\s*(?P=func_name))?\n            \\s*\\(\\s*(?P<callback_data>.*)\\);?\n            \\s*?(?://[^\\n]*)*$
(?sx)class=\n                    (?:\n                        ([\"\\'])(?:mediaLink|wdrrPlayerPlayBtn|videoButton)\\b.*?\\1[^>]+|\n                        ([\"\\'])videoLink\\b.*?\\2[\\s]*>\\n[^\\n]*\n                    )data-extension=([\"\\'])(?P<data>(?:(?!\\3).)+)\\3\n                    
(?u)#([^\\W]+)
(?u)#(x?\\d+)
(?u)%\\(.+?\\)s
(?u)&(.+?);
(?U)(,\\s)
(?U)([^\\w\\.\\'\\-\\/,&])
(?u)([^=,\\s]+)\\s*\\=\\s*(\"[^\"]*\"|{(?:[^{}]*|{[^{}]*})*}|[^,]*)
(?U)(\\(|\\[).*(\\)|\\])
(?U)(\\.{3,})
(?U)('\\s)
(?U)(^|\\\\\\\\|[^\\\\!])\\[(.*)\\]\\((.*)\\)
(?U)(^|\\\\\\\\|[^\\\\\\*])\\*(.*[^\\\\])\\*
(?U)(^|\\\\\\\\|[^\\\\])!\\[(.*)\\]\\((.*)\\)
(?U)(^|\\\\\\\\|[^\\\\])\\*\\*(.*[^\\\\])\\*\\*
(?U)(^|\\\\\\\\\\\\\\\\|[^\\\\\\\\])`(.*[^\\\\\\\\])`
(?U)(^|\\\\\\\\|[^\\\\])~~(.*[^\\\\])~~
(?-u).
(?U).*REES
(?U):\\s(\\d+)\\s\\((.*)\\)
(?u)@(\\w+)[ \\t]?{[ \\t]*([^,\\s]*)[ \\t]*,?\\s*((?:[^=,\\s]+\\s*\\=\\s*(?:\"[^\"]*\"|{(?:[^{}]*|{[^{}]*})*}|[^,}]*),?\\s*?)+)\\s*}
(?U)[\\n|\\t].*\\\"
(?-u)[\\xFF]
(?u)[^- \\w.]
(?u)[^-\\w./]
(?u)[^-\\w.]
(?u)[^\\W\\d]+
(?u)[^-\\w]
(?-u)[^\\x00-\\xff]
(?u)[^-_\\w.() ]
(?u)[^-_\\w./]
(?U)\"(.*)\"\\s+(==|!=)\\s+'(.*)'
(?U)\\\".*\\\"
(?U)\\\"[\\s\\S]*\\\"
(?U)\"totalCount\":[\\d]+}
(?U)\"totalNumRecs\":[\\d]+,
(?U)\"totalPage\":\"[\\d]+\",
(?U)\\\"url\\\":\\\"(.*)\\\"
(?U)\\$\\{.*\\}
(?U)\\([^(]*\\)\\?|\\(/\\(\\?P<[^(]*\\)\\)\\?
(?U)\\. *(\\n|$)
(?U)\\\\/\\\\*[\\\\s\\\\S]*\\\\*\\\\/|\\\\/\\\\/.*(\\n|\\r)
(?U)\\\\{.*\\\\}
(?U)\\\\{[^\\\\{|^\\\\}|^\\\\.|^\\\\<|^\\\\>]*\\\\}
(?U)\\\\<.*\\\\>
(?U)\\\\<div[\\\\s\\\\S]*\\\\<\\\\/div\\\\>
(?U)\\\\<script\\\\>[\\\\s\\\\S]*\\\\<\\\\/script\\\\>
(?U)\\\\<style\\\\>[\\\\s\\\\S]*\\\\<\\\\/style\\\\>
(?U)\\\\<style\\\\>[\\\\s\\\\S]*\\\\<\\\\/style\\\\>|\\\\<script\\\\>[\\\\s\\\\S]*\\\\<\\\\/script\\\\>
(?U)\\b.+\\b
(?u)\\b\\w\\w+\\b
(?u)\\b\\w+\\b
(?U)\\b\\w++\\b
(?U)\\p{Graph}
(?U)\\p{Lower}
(?U)\\p{Space}+
(?U)\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s*=\\s*\"(.*)\"\\s*
(?u)\\s*<\\s*br\\s*/?\\s*>\\s*
(?U)\\s+
(?u)\\s+
(?-u)\u2603
(?U)\\w
(?-U)\\w
(?u)\\W+
(?-u)\\xFF
(?u)^(?P<name>[- .,\\w\\d'\u2019\"()]+) <(?P<email>.+?)>$
(?-u)^(PCP_[[:alnum:]_]+)=([^\"\\'].*[^\"\\'])\\n$
(?U)^.* 
(?u)^[ \t]*
(?U)^H.*\\s
(?U)_env\\\\((.*)\\\\)
(?U)<.*>
(?u)<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>
(?U)if [\\\\s\\\\S]*\\\\{
(?U)import \\\"[\\s\\S]*\\\"
(?U)import \\\\([\\\\s\\\\S]*\\\\)
(?U)import \\([\\s\\S]*\\)|import \\\"[\\s\\S]*\\\"
(?U:(<.*>))([\\t\\n\\v\\f\\r ]+)(?U:(<.*>))
(?U:.*[\\w]{3,}.*([\\d][\\.!?][\\D]|[\\D][\\.!?][\\s]|[\\n$]))
(?U:<target[^/]+/>)
(?Ui)%[0-9A-F]{2}
(?ui)[\\W]
(?ui)[^\\w\\.]
(?ui)\\W
(?Ui)<[^>]*>
(?Uis)<.*>
(?Uis)<script[^>]*>.*</script>
(?um)([ \\t]+)$
(?Um)\\.crit\\(lambda:\\s+\"value\"\\s+(.*)\\s+crit\\)
(?Um)\\.crit\\(lambda:\\s+\"value\"\\s+(.*)\\s+lower\\s+(.*)\\s+\"value\"\\s+(.*)\\s+upper\\)
(?Um)\\|(\\w+)\\('(.*)'\\)\\s*\\.as\\('value'\\)
(?Um)\\|eval\\(lambda: \"(.*)\"\\)\\s*\\.as\\('value'\\)
(?us)\\s+
(?Us)CMGR: \"([A-Z ]*)\",\"([+\\d]*)\",,\"([0-9/,:\\+]*)\"\\r\\n(.*)\\r\\n\\r\\nOK
(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (?<_1>\\s+))?\n            \t\t\t(?<_2>\\b \n            \t\t\t\t(?!(?<_3>while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n            \t\t\t)\n            \t\t\t \\s*(?<_4>\\()
(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (?<_1>\\s+))?\n\t(?<_2>\\b \n\t(?!(?<_3>while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t)\n\t \\s*(?<_4>\\()
(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n                  (\\b \n                    (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n                  )\n                   \\s*(\\()
(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n      (\\b \n        (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n      )\n       \\s*(\\()
(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n      (\\b\n        (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n      )\n       \\s*(\\()
(?x) ^\n                ( ?P<sign> -? )\n                ( ?P<hour> \\d{1,2} ) : ( ?P<minute> \\d{2} ) : ( ?P<second> \\d{2} )\n                ( ?P<flag> [wsugz] )?\n            $ 
(?x) ^\n                ( ?P<sign> -? )\n                ( ?P<hour> \\d{1,2} ) : ( ?P<minute> \\d{2} )\n                ( ?P<flag> [wsugz] )?\n            $ 
(?x) ^\n                ( ?P<weekday> \\w+ )\n                ( ?P<sign>    [<>] = )\n                ( ?P<day>     \\d+ )\n            $ 
(?x) ^\n                \\s+\n                ( ?P<gmtoff>     \\S+ )  \\s+\n                ( ?P<rulessave>  \\S+ )  \\s+\n                ( ?P<format>     \\S+ )  \\s*\n                ( ?P<year>       \\S+ )? \\s*\n                ( ?P<month>      \\S+ )? \\s*\n                ( ?P<day>        \\S+ )? \\s*\n                ( ?P<time>       \\S+ )? \\s*\n                (\\#.*)?\n            $ 
(?x) ^\n                Link  \\s+\n                ( ?P<target>  \\S+ )  \\s+\n                ( ?P<name>    \\S+ )  \\s*\n                (\\#.*)?\n            $ 
(?x) ^\n                Rule \\s+\n                ( ?P<name>    \\S+)  \\s+\n                ( ?P<from>    \\S+)  \\s+\n                ( ?P<to>      \\S+)  \\s+\n                ( ?P<type>    \\S+)  \\s+\n                ( ?P<in>      \\S+)  \\s+\n                ( ?P<on>      \\S+)  \\s+\n                ( ?P<at>      \\S+)  \\s+\n                ( ?P<save>    \\S+)  \\s+\n                ( ?P<letters> \\S+)  \\s*\n                (\\#.*)?\n            $ 
(?x) ^\n                Zone \\s+\n                ( ?P<name> [ A-Z a-z 0-9 / _ + - ]+ )  \\s+\n                ( ?P<gmtoff>     \\S+ )  \\s+\n                ( ?P<rulessave>  \\S+ )  \\s+\n                ( ?P<format>     \\S+ )  \\s*\n                ( ?P<year>       \\S+ )? \\s*\n                ( ?P<month>      \\S+ )? \\s*\n                ( ?P<day>        \\S+ )? \\s*\n                ( ?P<time>       \\S+ )? \\s*\n                (\\#.*)?\n            $ 
(?x) ^\n        (?P<language> (?:\n            [[:alpha:]]{2,3} (?: - [[:alpha:]]{3} ){0,3}\n            | \\* ))\n        (?P<script> - (?: [[:alpha:]]{4} | \\* ))?\n        (?P<region> - (?: [[:alpha:]]{2} | [[:digit:]]{3} | \\* ))?\n        (?P<rest> (?: - (?: [[:alnum:]]{1,8} | \\* ))*)\n    $ 
(?x)(::)\n                        (?:\n                    ([A-Za-z_][A-Za-z_0-9]*)\\s*\\(\n                    |\n                    ((\\$+)
(?x)(?<!\\S)\n                      (async(?!\\S))?\\s*\n                      (?<ft>\n                        map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |\n                        set\\s*<\\s*\\g<ft>\\s*> |\n                        list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |\n                        (?!async\\b)[a-zA-Z_][\\w.]*\n                      )\\s*\n                      (?:\n                        (?<!\\S)([a-zA-Z_][\\w.]*)\\s*(?![^\\s(])\n                      )?
(?x)(?<!\\S)\n\t(?<_1>async(?!\\S))?\\s*\n\t(?<ft>\n\tmap\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |\n\tset\\s*<\\s*\\g<ft>\\s*> |\n\tlist\\s*<\\s*\\g<ft>\\s*>\\s*(?<_2>cpp_type(?!\\S))? |\n\t(?!async\\b)[a-zA-Z_][\\w.]*\n\t)\\s*\n\t(?:\n\t(?<!\\S)(?<_3>[a-zA-Z_][\\w.]*)\\s*(?![^\\s(?<_4>])\n\t)?
(?x)(?i)\n        (?P<int>-?\\d+)              # the integer part\n        \\.?(?:(?P<dec>\\d+))?        # an optional decimal part\n                                    # note: the previous part will eat any decimals\n                                    # if there's no decimal point.\n                                    # This means we'll always have the decimal point if this\n                                    # section matches at all.\n        (?:e(?P<exp>[-+]?\\d+))?     # an optional exponent\n        (?:\n            [^\\w]*                  # some amount of junk (non word characters)\n            (?P<unit>[\\w&&[^\\d]]+)  # a word with no digits\n        )?\n        
(?x)(->)\n            (?:\n                ([A-Za-z_][A-Za-z_0-9]*)\\s*\\(\n                |\n                ((\\$+)?
(?x)'/ (?= (\\\\.|[^'/])++/[imsxeADSUXu]*' )
(?x)\"/ (?= (\\\\.|[^\"/])++/[imsxeADSUXu]*\" )
(?x)\"\\/ (?= (?<_1>\\\\.|[^\"\\/])++\\/[imsxeADSUXu]*\" )
(?x)'\\/ (?= (?<_1>\\\\.|[^'\\/])++\\/[imsxeADSUXu]*' )
(?x)\\b\n                  ( [a-h]                 # Pitch (group 1)\n                    ( (?:i[sh]){1,2} |    #   - sharp (group 2)\n                      (?:e[sh]|s){1,2}    #   - flat\n                    )?\n                      (?:(\\!)|(\\?))?       # Reminder\\/cautionary accidental (groups 3-4)\n                      ('+|,+)?             # Octave (group 5)\n                  )\n              
(?x)\\b\n              (              # (group 1)\n              ( [a-h]                 # Pitch (group 2)\n                ( (?:i[sh]){1,2} |    #   - sharp (group 3)\n                  (?:e[sh]|s){1,2}    #   - flat\n                )?\n                  (?:(\\!)|(\\?))?               # Cautionary accidental (groups 4-5)\n                  ('+|,+)?             # Octave (group 6)\n              )\n              ( ( ((\\\\)breve)|        # Duration (groups 7-10)\n                  64|32|16|8|4|2|1\n                )\n                (\\.+)?                 # Augmentation dot (group 11)\n              ((?:(\\*)(\\d+(?:\\/\\d+)?))*) # Scaling duration (groups 12-14)\n              )?\n            )(?![a-z])  # do not follow a note with a letter\n          
(?x)\\b\n\t    (\t\t\t\t\t\t  # (group 1)\n\t  ( [a-h]                 # Pitch (group 2)\n\t    ( (?:i[sh]){1,2} |    #   - sharp (group 3)\n\t      (?:e[sh]|s){1,2}    #   - flat\n\t    )?\n\t        (?:(\\!)|(\\?))?               # Cautionary accidental (groups 4-5)\n\t        ('+|,+)?             # Octave (group 6)\n\t  )\n\t  ( ( ((\\\\)breve)|        # Duration (groups 7-10)\n\t      64|32|16|8|4|2|1\n\t    )\n\t    (\\.+)?                 # Augmentation dot (group 11)\n\t((?:(\\*)(\\d+(?:\\/\\d+)?))*) # Scaling duration (groups 12-14)\n\t  )?\n\t)(?![a-z])\t# do not follow a note with a letter\n\t
(?x)\\b\n\t  ( [a-h]                 # Pitch (group 1)\n\t    ( (?:i[sh]){1,2} |    #   - sharp (group 2)\n\t      (?:e[sh]|s){1,2}    #   - flat\n\t    )?\n\t        (?:(\\!)|(\\?))?       # Reminder\\/cautionary accidental (groups 3-4)\n\t        ('+|,+)?             # Octave (group 5)\n\t  )\n\t
(?x)\\G\n            (?!  $\n            |  [ ]{,3}>.\n            |  ([ ]{4}|\\t)\n            |  [#]{1,6}\\s*+\n            |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n            )
(?x)\\G\n            (?=  ([ ]{4}|\\t)\n            |  [#]{1,6}\\s*+\n            |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n            )
(?x)\\G\n\t(?!\t$\n\t|\t[ ]{,3}>.\n\t|\t(?<_1>[ ]{4}|\\t)\n\t|\t[#]{1,6}\\s*+\n\t|\t[ ]{,3}(?<marker>[-*_])(?<_2>[ ]{,2}\\k<marker>){2,}[ \\t]*+$\n\t)
(?x)\\G\n\t(?=\t(?<_1>[ ]{4}|\\t)\n\t|\t[#]{1,6}\\s*+\n\t|\t[ ]{,3}(?<marker>[-*_])(?<_2>[ ]{,2}\\k<marker>){2,}[ \\t]*+$\n\t)
(?x)\n                                   <a[^>]+?href=\"(?P<url>(?:https:)?//[^\"]+)\".*?\n                                   <strong>(?P<format_id>.+?)</strong>.*?\n                                   <small>(?:(?P<width>\\d+)x(?P<height>\\d+))?\\s+?\\((?P<filesize>[\\d,]+\\s*[GM]iB)\\)</small>\n                                
(?x)\n                            Video:\\s*(?P<vcodec>[a-zA-Z0-9/._-]+)\\s*&\\#10;\n                            (?P<width>[0-9]+)x(?P<height>[0-9]+)px&\\#10;\n                            (?P<vbr>[0-9]+)kbps&\\#10;\n                            Audio:\\s*(?P<abr>[0-9]+)kbps,\\s*(?P<audio_desc>[A-Za-z\\.0-9]+)&\\#10;\n                            Gr&ouml;&szlig;e:\\s*(?P<filesize_approx>[0-9.,]+\\s+[a-zA-Z]*B)
(?x)\n                    <meta\\s+\n                        property=([\"'])(?:og:video(?::(?:secure_)?url)?|twitter:player)\\1\\s+\n                        content=([\"'])(?P<url>https?://player\\.theplatform\\.com/p/.+?)\\2\n            
(?x)\n                (?: (?= \\s ) (?:(?<=else|new|return) | (?<!\\w)) (?<_1>\\s+) )?\n                (?<_2>\\b\n                    (?!(?<_3>for|if|else|switch|return)\\s*\\()\n                    (?:[[:alpha:]_][[:alnum:]_]*+\\b)            # method name\n                )\n                \\s*(?<_4>\\()\n            
(?x)\n                (?: (?= \\s ) (?:(?<=else|new|return) | (?<!\\w)) (\\s+) )?\n                (\\b\n                    (?!(for|if|else|switch|return)\\s*\\()\n                    (?:[[:alpha:]_][[:alnum:]_]*+\\b)            # method name\n                )\n                \\s*(\\()\n            
(?x)\n                (?P<vcodec>[^_]+)_(?P<acodec>[^_]+)_(?P<container>[^_]+)_\n                (?P<proto>[^_]+)_(?P<index>[^_]+)_(?P<indexproto>[^_]+)\n            
(?x)\n                \\A\n                (?:\n                    .                                         # single characters\n                        |\n                    \\[ (?: [^\\]] | \\\\. | \\[[^\\[\\]]+\\] )+ \\]   # char classes\n                        |\n                    \\( (?: [^)] | \\\\. | \\([^()]+\\) )+ \\)      # groups\n                        |\n                    \\\\ (?:                                    # forward slash patterns\n\n                        # there are more of these, but we only match the less obscure ones\n\n                        [pP] (?: [a-zA-Z] | \\{ [a-zA-Z]+ \\})  # unicode properties\n                            |\n                        .                                     # escaped characters\n                    )\n                )\n                \\z\n            
(?x)\n                ^\n                (?P<codepoint>[A-Z0-9]+);\n                \\s*\n                (?P<alias>[^;]+);\n                \\s*\n                (?P<label>\\S+)\n                
(?x)\n                ^\n                (?P<codepoint>[A-Z0-9]+);\n                \\s*\n                (?P<name>[A-Z]*)\n                
(?x)\n                ^\n                (?P<year>\\d+)\n                (?:\n                    -(?P<month>\\d{1,2})\n                    (?:\n                        -(?P<day>\\d{1,2})\n                        (?:\n                            T(?P<hours>\\d{1,2})\n                            (?:\n                                :(?P<minutes>\\d{1,2})\n                                (?:\n                                    :(?P<seconds>\\d{1,2})\n                                )?\n                            )?\n                        )?\n                    )?\n                )?\n                $\n            
(?x)\n                ^\n                \\s*(?P<abbrev>[^\\s;]+)\\s*;\n                \\s*(?P<long>[^\\s;]+)\\s*\n                (?:;(?P<aliases>.*))?\n                
(?x)\n                ^\n                \\s*(?P<codepoint>[^\\s;]+)\\s*;\n                \\s*(?P<lower>[^;]+)\\s*;\n                \\s*(?P<title>[^;]+)\\s*;\n                \\s*(?P<upper>[^;]+)\\s*;\n                \\s*(?P<conditions>[^;\\x23]+)?\n                
(?x)\n                ^\n                \\s*(?P<codepoint>[^\\s;]+)\\s*;\n                \\s*(?P<status>[^\\s;]+)\\s*;\n                \\s*(?P<mapping>[^;]+)\\s*;\n                
(?x)\n                ^\n                \\s*(?P<prop>[^\\s;]+)\\s*;\n                \\s*(?P<abbrev>[^\\s;]+)\\s*;\n                \\s*(?P<long>[^\\s;]+)\\s*\n                (?:;(?P<aliases>.*))?\n                
(?x)\n                ^\n                ccc;\n                \\s*(?P<num_class>[0-9]+)\\s*;\n                \\s*(?P<abbrev>[^\\s;]+)\\s*;\n                \\s*(?P<long>[^\\s;]+)\n                
(?x)\n                <h4[^>]+class=\"title\"[^>]*>\\s*Music\\s*</h4>\\s*\n                <ul[^>]*>\\s*\n                <li>(?P<title>.+?)\n                by (?P<creator>.+?)\n                (?:\n                    \\(.+?\\)|\n                    <a[^>]*\n                        (?:\n                            \\bhref=[\"\\']/red[^>]*>|             # drop possible\n                            >\\s*Listen ad-free with YouTube Red # YouTube Red ad\n                        )\n                    .*?\n                )?</li\n            
(?x)\n                <meta\\s+\n                    (?:property|itemprop)=([\\'\"])(?:og:video|embedURL)\\1[^>]+\n                    content=([\\'\"])(?P<url>https?://(?:secure|c)\\.brightcove.com/(?:(?!\\2).)+)\\2\n            
(?x)\n                pub ( \\( (?P<restriction> [^)]+ ) \\) )?\n                \\s+\n                (?P<name> .+ )\n            
(?x)\n              (?<!-)\n              (?<=>)\n            (\n              ( ( ((\\\\)breve)|        # Duration (groups 1-4)\n                  64|32|16|8|4|2|1\n                )\n                (\\.+)?                  # Augmentation dot (group 5)\n              ) |\n              (?![\\s}~a-z]|$)\n            )\n          
(?x)\n              (?<ft>\n                map\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |\n                set\\s*<\\s*\\g<ft>\\s*> |\n                list\\s*<\\s*\\g<ft>\\s*>\\s*(cpp_type(?!\\S))? |\n                [a-zA-Z_][\\w.]*\n              )[ \\t]*\n              (?:([a-zA-Z_][\\w.]*)[ \\t]*)? # identifier\n              
(?x)\n              (?x)\n      (?:  \n           (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n           )\n      )\n      (\n        (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n        (?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n      )\n       \\s*(\\()
(?x)\n              (?x)\n      (?:\n           (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n           )\n      )\n      (\n        (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n        (?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n      )\n       \\s*(\\()
(?x)\n              \\b(\n                (?:[a-z]\\w*\\.)* # Optional package specification\n                [A-Z]\\w+\\b # Class name\n                (?:<(?:[\\w, ]*)>)? # Optional Generics\n                (?:\\[\\s*\\])* # Optional brackets (array)\n              )\\b\n          
(?x)\n            ((\\$)(?<name>
(?x)\n            ((\\$)(?<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*))\n            (?:\n              (->)(\\g<name>)\n              |\n              (\\[)\n                (?:(\\d+)|((\\$)\\g<name>)|(\\w+))\n              (\\])\n            )?\n            
(?x)\n            ((\\$)(?<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*))\n            (?:\n              (->)\n                (?:\n                  (\\g<name>)\n                  |\n                  (\\$\\g<name>)\n                )\n              |\n              (\\[)\n                (?:(\\d+)|((\\$)\\g<name>)|(\\w+)|(.*?))\n              (\\])\n            )?\n            
(?x)\n            ((\\$\\{)(?<name>
(?x)\n            (?:  ^                                 # begin-of-line\n              |  (?: (?<!else|new|=) )             #  or word + space before name\n            )\n            ((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n             \\s*(\\()                           # start bracket or end-of-line\n          
(?x)\n            (?:  ^                                 # begin-of-line\n              |  (?: (?<!else|new|=) )             #  or word + space before name\n            )\n            ((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n             \\s*(\\()                           # terminating semi-colon\n          
(?x)\n            (?:  ^                                 # begin-of-line\n              |  (?: (?<!else|new|=) )             #  or word + space before name\n            )\n          ((?:\\b(?:public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|export)\\b\\s*)*) # modifier\n            (~this) # actual name\n             \\s*(\\()                           # start bracket or end-of-line\n          
(?x)\n            (?:\n                <iframe[^>]+?src=|\n                data-video-url=|\n                <embed[^>]+?src=|\n                embedSWF\\(?:\\s*|\n                <object[^>]+data=|\n                new\\s+SWFObject\\(\n            )\n            ([\"\\'])\n                (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\n            \\1
(?x)\n            (?:\n                <meta\\s+property=\"og:video\"\\s+content=|\n                <iframe[^>]+?src=\n            )\n            ([\"\\'])(?P<url>https?://(?:www\\.)?sbs\\.com\\.au/ondemand/video/.+?)\\1
(?x)\n            (?P<n>\\d+) \\s (?P<dur>hrs?|hours?|hs?|minutes?|mins?|ms?) (?P<ago>(\\s ago)?)
(?x)\n            (\\\\) # backslash\n            (?:\n                p{1,5} | m[pf] | f{1,4} | fp | # forte, piano, etc.\n                [sr]fz | sff? | spp? | \n                < | > | ! | espressivo         # (de)crescendo\n            )\n          
(?x)\n            (\\\\)\n            (?: accent | markato | staccatissimo |           # basic accents\n              espressivo | staccato | tenuto | portato | \n              (?:up|down)bow | flageolet | thumb |\n              [lr](?:heel|toe) | open | stopped |\n              (?:reverse)?turn | trill |\n              prall(?: prall | mordent | down | up)? |       # pralls\n              (?: up | down | line ) prall |                 # and\n              (?: up | down )? mordent |                     # mordents\n              signumcongruentiae |\n              (?: (?:very)? long | short)?fermata(Markup)? | # fermatas\n              segno | (?:var)?coda \n            )\n          
(?x)\n            (\n              (?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)(?: \\b[A-Za-z_][A-Za-z0-9_]*+\\b | :: )*+                  # actual name\n            )\n             \\s*(\\()
(?x)\n            \\A(?P<name>[\\w\\.]+):\n            ((?P<sign>\\-|\\+))?\n            (?P<val>([0-9]*[.])?[0-9]+)\n            \\|(?P<type>\\w+)\n            (\\|@(?P<rate>\\d+\\.\\d+))?\\z
(?x)\n            \\b(def)\\s+\n            (([a-zA-Z$_][a-zA-Z0-9$_]*(_[^a-zA-Z0-9\\s]+)?)|`.*`|[^\\w\\[\\(\\:\\_\\s]+)
(?x)\n            ^(?P<major>\\d+)\n            \\.(?P<minor>\\d+)\n            \\.(?P<patch>\\d+)\n            (-(?P<release>[[:alnum:]]+)\n              (\\.(?P<buildmeta>[[:alnum:]]+))?\n            )?$
(?x)\n            ^\n            \\s*(?P<codepoints>[^\\s;]+)\\s*;\n            \\s*(?P<property>[^;\\x23]+)\\s*\n            
(?x)\n            <video[^>]+class=\"animated-gif\"(?P<more_info>[^>]+)>\\s*\n                <source[^>]+video-src=\"(?P<url>[^\"]+)\"\n        
(?x)\n          (\n            (\\\\)                    # Marker\n            (?:auto)?(?:foot)?(?:full)?(?:no)?(?:short)?    # Function Name\n            [cC]ite\n            (?:al)?(?:t|p|author|year(?:par)?|title)?[ANP]*\n            \\*?                      # Optional Unabreviated\n          )\n          (?:(\\[)[^\\]]*(\\]))?                # Optional\n          (?:(\\[)[^\\]]*(\\]))?                #   Arguments\n          (\\{)                      # Opening Bracket\n        
(?x)\n          (\n            (\\\\)                    # Marker\n            (?:foot)?(?:full)?(?:no)?(?:short)?    # Function Name\n            [cC]ite\n            (?:al)?(?:t|p|author|year(?:par)?|title)?[ANP]*\n            \\*?                      # Optional Unabreviated\n          )\n          (?:(\\[)[^\\]]*(\\]))?                # Optional\n          (?:(\\[)[^\\]]*(\\]))?                #   Arguments\n          (\\{)                      # Opening Bracket\n        
(?x)\n         (?:\n           ^                      # beginning of line\n         | (?<=                   # or look-behind on:\n             [=>~(?:\\[,|&;]\n           | [\\s;]if\\s      # keywords\n           | [\\s;]elsif\\s\n           | [\\s;]while\\s\n           | [\\s;]unless\\s\n           | [\\s;]when\\s\n           | [\\s;]assert_match\\s\n           | [\\s;]or\\s      # boolean opperators\n           | [\\s;]and\\s\n           | [\\s;]not\\s\n           | [\\s.]index\\s      # methods\n           | [\\s.]scan\\s\n           | [\\s.]sub\\s\n           | [\\s.]sub!\\s\n           | [\\s.]gsub\\s\n           | [\\s.]gsub!\\s\n           | [\\s.]match\\s\n           )\n         | (?<=                  # or a look-behind with line anchor:\n              ^when\\s            # duplication necessary due to limits of regex\n            | ^if\\s\n            | ^elsif\\s\n            | ^while\\s\n            | ^unless\\s\n            )\n         )\n         \\s*((/))(?![*+{}?])\n      
(?x)\n        (                          # Capture 1\n          (\\\\)                      # Marker\n          (?:\n            (?:sub){0,2}section              # Functions\n            | (?:sub)?paragraph\n            | chapter|part|addpart\n            | addchap|addsec|minisec\n          )\n          (?:\\*)?                      # Optional Unnumbered\n        )\n        (?:\n          (\\[)([^\\[]*?)(\\])                # Optional Title\n        )??\n        (\\{)                        # Opening Bracket\n        
(?x)\n        (                          # Capture 1\n          (\\\\)                      # Marker\n          (\n            (?:sub){0,2}section              # Functions\n            | (?:sub)?paragraph\n            | chapter|part|addpart\n            | addchap|addsec|minisec\n          )\n          (?:\\*)?                      # Optional Unnumbered\n        )\n        (?:\n          (\\[)([^\\[]*?)(\\])                # Optional Title\n        )??\n        (\\{)                        # Opening Bracket\n        
(?x)\n        ((\\\\) clef) \\s+  # backslash + \"clef\" + spaces (groups 1-2)\n        (?:\n          (\"?)  # beginning quotes (group 3)\n          (?:\n            ( (?: # group 4\n              treble | violin | G | french |                    # G clefs\n                alto | C | tenor | (?:mezzo)?soprano | baritone | # C clefs\n                (?:sub)?bass | F | varbaritone |                  # F clefs\n                percussion | tab | # percussion / tablature clefs\n                      \n                  (?:neo)?mensural-c[1-4] | mensural-[fg] |     # Ancient clefs\n                petrucci-(?: [fg] | c[1-5] ) |\n                (?: vaticana | medicaea | hufnagel ) - (?: do[1-3] | fa[12] ) |\n                hufnagel-do-fa\n              )\n              ([_^](?:8|15)?)? # optionally shift 1-2 octaves \u2191/\u2193 (group 5)\n            ) |\n            ( (?:\\w+) ([_^](?:8|15))? ) # unknown clef name (groups 6-7)\n          )\n          (\\3) # closing quotes (group 8)\n        )?\n      
(?x)\n        ((\\\\) markup) \\s+ # backslash + \"markup\" + spaces\n        (?={)\n      
(?x)\n        ((\\\\) time) \\s+ # backslash + \"time\" + spaces (groups 1-2)\n        ([1-9][0-9]*/[1-9][0-9]*)?\n      
(?x)\n        (?:  ^                                 # begin-of-line\n          |  \n             (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n               | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n             )\n        )\n        (\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()\n        (\n          (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n          (?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n        )\n         \\s*(?=\\()
(?x)\n        (?:  ^                                 # begin-of-line\n          |\n             (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n               | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n             )\n        )\n        (\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n        (\n          (?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n          (?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n        )\n         \\s*(?=\\()
(?x)\n        (?: (\\\\)\n            (?: set | new | override | revert)\\b\n        )\n      
(?x)\n        (?P<static>[^<]*)                            # static rule data\n        <\n        (?:\n            (?P<variable>[a-zA-Z_][a-zA-Z0-9_]*)     # variable name\n            :                                        # variable delimiter\n        )?\n        (?P<converter>[a-zA-Z_][a-zA-Z0-9_]*)        # converter name\n        >\n    
(?x)\n        (?P<year>\\d{4})-  # the year\n        (?P<month>\\d{2})- # the month\n        (?P<day>\\d{2})   # the day\n    
(?x)\n        (\n            (?P<square_comma>\n                ,                        # trailing comma\n                (?P<square_ws>[\\s\\r\\n]*) # white space\n                (?P<square_bracket>\\])   # bracket\n            )\n          | (?P<curly_comma>\n                ,                        # trailing comma\n                (?P<curly_ws>[\\s\\r\\n]*)  # white space\n                (?P<curly_bracket>\\})    # bracket\n            )\n        )\n      | (?P<code>\n            \"(?:\\\\.|[^\"\\\\])*\"            # double quoted string\n          | .[^,\"']*                     # everything else\n        )\n    
(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<all>\n            (?P<inline_marker>-{2,}8<-{2,}[ ]+)\n            (?P<snippet>(?:\"(?:\\\\\"|[^\"\\n\\r])+?\"|'(?:\\\\'|[^'\\n\\r])+?'))(?![ \\t]) |\n            (?P<block_marker>-{2,}8<-{2,})(?![ \\t])\n        )\\r?$\n        
(?x)\n        ^(?P<space>[ \\t]*)\n        (?P<snippet>.*?)\\r?$\n        
(?x)\n        declare_clippy_lint!\\s*[\\{(]\\s*\n        pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n        (?P<cat>[a-z_]+)\\s*,\\s*\n        \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n    
(?x)\n        declare_deprecated_lint!\\s*[{(]\\s*\n        pub\\s+(?P<name>[A-Z_][A-Z_0-9]*)\\s*,\\s*\n        \"(?P<desc>(?:[^\"\\\\]+|\\\\(?s).(?-s))*)\"\\s*[})]\n    
(?x)\n        test\\s+(?P<name>\\S+)                        # test   mod::test_name\n        \\s+...\\sbench:\\s+(?P<ns>[0-9,]+)\\s+ns/iter  # ... bench: 1234 ns/iter\n        \\s+\\(\\+/-\\s+(?P<variance>[0-9,]+)\\)         # (+/- 4321)\n        (?:\\s+=\\s+(?P<throughput>[0-9,]+)\\sMB/s)?   # =   2314 MB/s\n    
(?x)\n      (')\n      (?:\n        [\\ -\\[\\]-~]                # Basic Char\n        | (\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n          |DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n          |US|SP|DEL|[abfnrtv\\\\\\\"'\\&]))    # Escapes\n        | (\\\\o[0-7]+)                # Octal Escapes\n        | (\\\\x[0-9A-Fa-f]+)            # Hexadecimal Escapes\n        | (\\^[A-Z@\\[\\]\\\\\\^_])            # Control Chars\n      )\n      (')\n      
(?x)\n    (   (^|;) \\s*+ end   \\s*+ ([#].*)? $\n    |   (^|;) \\s*+ end \\. .* $\n    |   ^     \\s*+ [}\\]] ,? \\s*+ ([#].*)? $\n    |   [#] .*? \\(end\\) \\s*+ $      # Sune\u2019s special marker\n    |   ^=end\n    )\n  
(?x)\n    (   (^|;) \\s*+ end   \\s*+ ([#].*)? $\n    |   (^|;) \\s*+ end \\. .* $\n    |   ^     \\s*+ [}\\]] ,? \\s*+ ([#].*)? $\n    |   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n    |   ^=end\n    )
(?x)\n    (   (^|;) \\s*+ end   \\s*+ ([#].*)? $\n    |   ^     \\s*+ [}\\]] \\s*+ ([#].*)? $\n    |   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n    )
(?x)\n    (   ^\\s*+end.*$\n    |   [\\/\\/] .*? \\(end\\) \\s*+ $        # Sune\u2019s special marker\n    |   ^\\s*\\/\\/\\s*\\#endregion\n    )
(?x)\n    (?:\n        (?P<comments>(?:\\r?\\n?\\s*)<!--[\\s\\S]*?-->(?:\\s*)(?=\\r?\\n)|<!--[\\s\\S]*?-->)|\n        (?P<scripts>\n            (?P<script_open><(?P<script_name>style|script))\n            (?P<script_attr>(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s\"'`=<>]+))?)*)\n            (?P<script_rest>\\s*>.*?</(?P=script_name)\\s*>)\n        )|\n        (?P<open><(?P<name>[\\w\\:\\.\\-]+))\n        (?P<attr>(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s\"'`=<>]+))?)*)\n        (?P<close>\\s*(?P<self_close>/)?>)|\n        (?P<close_tag></(?P<close_name>[\\w\\:\\.\\-]+)\\s*>)\n    )\n    
(?x)\n    (?P<fence>~{3,}|`{3,})[ \\t]*                                                   # Fence opening\n    (\\{?                                                                           # Language opening\n    \\.?(?P<lang>[\\w#.+-]*))?[ \\t]*                                                 # Language\n    (?P<options>(?:\\b[a-zA-Z][a-zA-Z0-9_]*=(?:(?P<quot>\"|').*?(?P=quot))?[ \\t]*)*) # Options\n    }?[ \\t]*$                                                                      # Language closing\n    
(?x)\n    (?P<key>[^=]+)\n    \\s*=\\s*\n    (?P<val>\n        \"(?:[^\\\\\"]|\\\\.)*\" |\n         (?:.*?)\n    )\n    \\s*;\n
(?x)\n    (?P<major>\\d+)(?:\\.(?P<minor>\\d+))?(?:\\.(?P<micro>\\d+))?\n    (?:(?P<type>a|b|rc)(?P<pre>\\d+))?\n    (?:\\.post(?P<post>\\d+))?\n    (?:\\.dev(?P<dev>\\d+))?\n    
(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |  \n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(?<_1>\\s*) (?!(?<_2>while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n    \t\t(?<_3>\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()
(?x)\n    \t\t\t\t(?:  ^                                 # begin-of-line\n    \t\t\t\t  |  (?: (?<!else|new|=) )             #  or word + space before name\n    \t\t\t\t)\n    \t\t\t\t(?<_1>(?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    \t\t\t\t \\s*(?<_2>\\()                           # terminating semi-colon\n    \t\t\t
(?x)\n    \t\t\t\t(?:  ^                                 # begin-of-line\n    \t\t\t\t  |  (?: (?<!else|new|=) )             #  or word + space before name\n    \t\t\t\t)\n    \t\t\t\t(?<_1>(?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    \t\t\t\t \\s*(?<_2>\\()                           # start bracket or end-of-line\n    \t\t\t
(?x)\n    \t\t\t\t(?:  ^                                 # begin-of-line\n    \t\t\t\t  |  (?: (?<!else|new|=) )             #  or word + space before name\n    \t\t\t\t)\n\t(?<_1>(?:\\b(?:public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient|export)\\b\\s*)*) # modifier\n    \t\t\t\t(?<_2>~this) # actual name\n    \t\t\t\t \\s*(?<_3>\\()                           # start bracket or end-of-line\n    \t\t\t
(?x)\n    \t\t\t\t(?<_1>\n    \t\t\t\t\t(?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)(?: \\b[A-Za-z_][A-Za-z0-9_]*+\\b | :: )*+                  # actual name\n    \t\t\t\t)\n    \t\t\t\t \\s*(?<_2>\\()
(?x)\n    ^\\s*\n    (.*class\n    |[a-zA-Z\\$_](\\w|\\$|:|\\.)*\\s*(?=\\:(\\s*\\(.*\\))?\\s*((=|-)>\\s*$)) # function that is not one line\n    |[a-zA-Z\\$_](\\w|\\$|\\.)*\\s*(:|=)\\s*((if|while)(?!.*?then)|for|$) # assignment using multiline if/while/for\n    |(if|else|unless|while)\\b(?!.*?then)|for|loop\\b\n    |(try|finally|catch\\s+\\S.*)\\s*$\n    |.*[-=]>$\n    |.*[\\{\\[]$)
(?x)\n    https?://(www\\.)?ustream\\.tv\n        (?:\n            (/embed/|/channel/id/)(?P<channel_id>\\d+)\n        )?\n        (?:\n            (/embed)?/recorded/(?P<video_id>\\d+)\n        )?\n    
(?x)\n\\$(?:\n    (?P<name>[a-zA-Z_][a-zA-Z0-9_]*)\n  |\n    \\{(?P<name2>[a-zA-Z_][a-zA-Z0-9_]*)\\}\n  )
(?x)\n\t        (?x)\n\t(?:  \n\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t     )\n\t)\n\t(?<_1>\n\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t)\n\t \\s*(?<_2>\\()
(?x)\n\t    (?<!-)\n\t    (?<=>)\n\t(\n\t( ( ((\\\\)breve)|        # Duration (groups 1-4)\n\t    64|32|16|8|4|2|1\n\t  )\n\t  (\\.+)?                  # Augmentation dot (group 5)\n\t) |\n\t(?![\\s}~a-z]|$)\n\t)\n\t
(?x)\n\t   (?:\n\t     ^                      # beginning of line\n\t   | (?<=                   # or look-behind on:\n\t       [=>~(?:\\[,|&;]\n\t     | [\\s;]if\\s\t\t\t# keywords\n\t     | [\\s;]elsif\\s\n\t     | [\\s;]while\\s\n\t     | [\\s;]unless\\s\n\t     | [\\s;]when\\s\n\t     | [\\s;]assert_match\\s\n\t     | [\\s;]or\\s\t\t\t# boolean opperators\n\t     | [\\s;]and\\s\n\t     | [\\s;]not\\s\n\t     | [\\s.]index\\s\t\t\t# methods\n\t     | [\\s.]scan\\s\n\t     | [\\s.]sub\\s\n\t     | [\\s.]sub!\\s\n\t     | [\\s.]gsub\\s\n\t     | [\\s.]gsub!\\s\n\t     | [\\s.]match\\s\n\t     )\n\t   | (?<=                  # or a look-behind with line anchor:\n\t        ^when\\s            # duplication necessary due to limits of regex\n\t      | ^if\\s\n\t      | ^elsif\\s\n\t      | ^while\\s\n\t      | ^unless\\s\n\t      )\n\t   )\n\t   \\s*(?<_1>(?<_2>\\/))(?![*+{}?])\n\t
(?x)\n\t((\\\\) clef) \\s+  # backslash + \"clef\" + spaces (groups 1-2)\n\t(?:\n\t  (\"?)\t# beginning quotes (group 3)\n\t  (?:\n\t  ( (?: # group 4\n\t  treble | violin | G | french |                    # G clefs\n\t      alto | C | tenor | (?:mezzo)?soprano | baritone | # C clefs\n\t      (?:sub)?bass | F | varbaritone |                  # F clefs\n\t      percussion | tab | # percussion \\/ tablature clefs\n                      \n\t          (?:neo)?mensural-c[1-4] | mensural-[fg] | \t\t# Ancient clefs\n\t      petrucci-(?: [fg] | c[1-5] ) |\n\t      (?: vaticana | medicaea | hufnagel ) - (?: do[1-3] | fa[12] ) |\n\t      hufnagel-do-fa\n\t    )\n\t    ([_^](?:8|15)?)? # optionally shift 1-2 octaves \u2191\\/\u2193 (group 5)\n\t  ) |\n\t  ( (?:\\w+) ([_^](?:8|15))? ) # unknown clef name (groups 6-7)\n\t  )\n\t  (\\3) # closing quotes (group 8)\n\t)?\n\t
(?x)\n\t((\\\\) markup) \\s+ # backslash + \"markup\" + spaces\n\t(?={)\n\t
(?x)\n\t((\\\\) time) \\s+ # backslash + \"time\" + spaces (groups 1-2)\n\t([1-9][0-9]*\\/[1-9][0-9]*)?\n\t
(?x)\n\t(?: (\\\\)\n\t    (?: set | new | override | revert)\\b\n\t)\n\t
(?x)\n\t(?<_1>   (?<_2>^|;) \\s*+ end   \\s*+ (?<_3>[#].*)? $\n\t|   (?<_4>^|;) \\s*+ end \\. .* $\n\t|   ^     \\s*+ [}\\]] ,? \\s*+ (?<_5>[#].*)? $\n\t|   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n\t|   ^=end\n\t)
(?x)\n\t(?<_1>   (?<_2>^|;) \\s*+ end   \\s*+ (?<_3>[#].*)? $\n\t|   (?<_4>^|;) \\s*+ end \\. .* $\n\t|   ^     \\s*+ [}\\]] \\s*+ (?<_5>[#].*)? $\n\t|   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n\t|   ^=end\n\t)
(?x)\n\t(?<_1>   (?<_2>^|;) \\s*+ end   \\s*+ (?<_3>[#].*)? $\n\t|   ^     \\s*+ [}\\]] \\s*+ (?<_4>[#].*)? $\n\t|   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n\t)
(?x)\n\t(?<_1>(?<_2>\\$)(?<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*))\n\t(?:\n\t(?<_3>->)\n\t(?:\n\t(?<_4>\\g<name>)\n\t|\n\t(?<_5>\\$\\g<name>)\n\t)\n\t|\n\t(?<_6>\\[)\n\t(?:(?<_7>\\d+)|(?<_8>(?<_9>\\$)\\g<name>)|(?<_10>\\w+)|(?<_11>.*?))\n\t(?<_12>\\])\n\t)?\n\t
(?x)\n\t(?<_1>')\n\t(?:\n\t[\\ -\\[\\]-~]\t\t\t\t\t\t\t\t# Basic Char\n\t  | (?<_2>\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n\t|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n\t|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]))\t\t# Escapes\n\t  | (?<_3>\\\\o[0-7]+)\t\t\t\t\t\t\t\t# Octal Escapes\n\t  | (?<_4>\\\\x[0-9A-Fa-f]+)\t\t\t\t\t\t# Hexadecimal Escapes\n\t  | (?<_5>\\^[A-Z@\\[\\]\\\\\\^_])\t\t\t\t\t\t# Control Chars\n\t)\n\t(?<_6>')\n\t
(?x)\n\t(?<_1>\n\t(?<_2>\\\\)\t\t\t\t\t\t\t\t\t\t# Marker\n\t(?:foot)?(?:full)?(?:no)?(?:short)?\t\t# Function Name\n\t[cC]ite\n\t(?:al)?(?:t|p|author|year(?:par)?|title)?[ANP]*\n\t\\*?\t\t\t\t\t\t\t\t\t\t\t# Optional Unabreviated\n\t)\n\t(?:(?<_3>\\[)[^\\]]*(?<_4>\\]))?\t\t\t\t\t\t\t\t# Optional\n\t(?:(?<_5>\\[)[^\\]]*(?<_6>\\]))?\t\t\t\t\t\t\t\t#   Arguments\n\t(?<_7>\\{)\t\t\t\t\t\t\t\t\t\t\t# Opening Bracket\n\t
(?x)\n\t(?<_1>\n\t(?<_2>\\}|\\))(?<_3>,|;)?\t\t\t\t\t# Openstep foldings\n\t.*$\t\t\t\t\t\t\t\t# limit false positives\n\t  | (?<_4>^\\s*(?<_5><\\/[^>]+>|\\/>|-->)\\s*$)\t\t# XML\t\t\t\t\t\t\n\t)\n\t
(?x)\n\t(?<_1>\n\t(?<_2>^|=|=[ ]|\\s\\s|\\t)\t\t\t\t# Openstep foldings\n\t(?<_3>\\{|\\()(?!.*(?<_4>\\)|\\}))\t\t\t# spaces before them to \n\t# limit false positives\n\t  | (?<_5>\n\t^\\s*\n\t(?<_6>\n\t<[^!?%\\/](?!.+?(?<_7>\\/>\n\t  | <\\/.+?>))\n\t  | <[!%]--(?!.+?--%?>)\n\t)\n\t)\n\t)\n\t 
(?x)\n\t(?<_1>\t\t\t\t\t\t\t\t\t\t\t\t\t# Capture 1\n\t(?<_2>\\\\)\t\t\t\t\t\t\t\t\t\t\t# Marker\n\t(?:\n\t(?:sub){0,2}section\t\t\t\t\t\t\t# Functions\n\t  | (?:sub)?paragraph\n\t  | chapter|part|addpart\n\t  | addchap|addsec|minisec\n\t)\n\t(?:\\*)?\t\t\t\t\t\t\t\t\t\t\t# Optional Unnumbered\n\t)\n\t(?:\n\t(?<_3>\\[)(?<_4>[^\\[]*?)(?<_5>\\])\t\t\t\t\t\t\t\t# Optional Title\n\t)??\n\t(?<_6>\\{)\t\t\t\t\t\t\t\t\t\t\t\t# Opening Bracket\n\t
(?x)\n\t(?<ft>\n\tmap\\s*<\\s*\\g<ft>\\s*,\\s*\\g<ft>\\s*> |\n\tset\\s*<\\s*\\g<ft>\\s*> |\n\tlist\\s*<\\s*\\g<ft>\\s*>\\s*(?<_1>cpp_type(?!\\S))? |\n\t[a-zA-Z_][\\w.]*\n\t)[ \\t]*\n\t(?:(?<_2>[a-zA-Z_][\\w.]*)[ \\t]*)? # identifier\n\t
(?x)\n\t(\\\\) # backslash\n\t(?:\n\t    p{1,5} | m[pf] | f{1,4} | fp | # forte, piano, etc.\n    \t\t\t\t\t\t[sr]fz | sff? | spp? | \n    \t\t\t\t\t\t< | > | ! | espressivo         # (de)crescendo\n\t)\n\t
(?x)\n\t(\\\\)\n\t(?: accent | markato | staccatissimo |\t\t       # basic accents\n\tespressivo | staccato | tenuto | portato | \n\t(?:up|down)bow | flageolet | thumb |\n\t[lr](?:heel|toe) | open | stopped |\n\t(?:reverse)?turn | trill |\n\tprall(?: prall | mordent | down | up)? |       # pralls\n\t(?: up | down | line ) prall |                 # and\n\t(?: up | down )? mordent |                     # mordents\n\tsignumcongruentiae |\n\t(?: (?:very)? long | short)?fermata(Markup)? | # fermatas\n\tsegno | (?:var)?coda \n\t)\n\t
(?x)\n^(?:\n   # Blank line with optional comment.\n   \\s*(?:\\#.*)?\n |\n   (?:\n     # VAR\n     (?P<var>[a-zA-Z_][a-zA-Z0-9_]*)\n   |\n     # >file\n     >(?P<file>\\S+)\n   )\n   \\s+\n   # path/to/secret:key\n   (?P<path>\\S+?)(?::(?P<key>\\S+))?\n   \\s*\n )$
(?x)^ [ \\t]* \\(\n    (?<par>\n      ( [^()\\n]++ | \\( \\g<par> \\)? )*+\n    )\n  $
(?x)^ [ \\t]* \\(\n\t  (?<par>\n\t    (?<_1> [^(?<_2>)\\n]++ | \\( \\g<par> \\)? )*+\n\t  )\n\t$
(?x)^ [ \\t]*+ \\(\n    (?<par>\n      ( [^()\\n]++ | \\( \\g<par> \\)? )*+\n    )\n  $
(?x)^ [ \\t]*+\n    (?<par>\n      ( [^()\\n]++ | \\( \\g<par> \\) )*+\n    )\n    ( \\) [ \\t]*+ ) ++\n  $
(?x)^\n        (?!  [ ]{,3}>.\n        |  ([ ]{4}|\\t)\n        |  [#]{1,6}\\s*+\n        |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n        )
(?x)^\n        (?!  [ ]{,3}>.\n        |  [#]{1,6}\\s*+\n        |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n        )
(?x)^\n        (?=  [ ]{,3}>.\n        |  ([ ]{4}|\\t)(?!$)\n        |  [#]{1,6}\\s*+\n        |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n        )
(?x)^\n        (?=  [ ]{,3}>.\n        |  [#]{1,6}\\s*+\n        |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n        )
(?x)^\n        (?=  \\s*$\n        |  [ ]{,3}(?<marker>[-*_])([ ]{,2}\\k<marker>){2,}[ \\t]*+$\n        |  [ ]{,3}>.\n        )
(?x)^\n        (?P<op>[<>]=?|~>?=?)?\n        (?:(?P<major>(?:0|[1-9][0-9]*))\n         (?:\\.(?P<minor>(?:0|[1-9][0-9]*))\n          (?:\\.(?P<patch>(?:0|[1-9][0-9]*))\n           (?P<other>[-+][a-zA-Z0-9-+.]*)?\n          )?\n         )?\n        )?$
(?x)^\n        (?P<op>[<>]=?|~>?=?)?\n        (?:(?P<major>(?:0|[1-9][0-9]*)|[xX*])\n         (?:\\.(?P<minor>(?:0|[1-9][0-9]*)|[xX*])\n          (?:\\.(?P<patch>(?:0|[1-9][0-9]*)|[xX*]))?\n         )?\n        )\n        (?P<other>.*)$
(?x)^\n      (?! .* [;:{},] \\s*                  # do not indent when line ends with ;, :, {, }, or comma\n          ( // .* | /[*] .* [*]/ \\s* )? $ #  \u2026account for potential trailing comment\n      |   @(public|private|protected)     # do not indent after obj-c data access keywords\n      )\n      .                                  # the negative look-ahead above means we don\u2019t care about what we match here\n  
(?x)^\n      (\\s*+\n          (module|class|def(?!.*\\bend\\s*$)\n          |unless|if\n          |case\n          |begin\n          |for|while|until\n           |^=begin\n          |(  \"(\\\\.|[^\"])*+\"          # eat a double quoted string\n           | '(\\\\.|[^'])*+'        # eat a single quoted string\n           |   [^#\"']                # eat all but comments and strings\n           )*\n           (                        \\s   (do|begin|case)\n           | (?<!\\$)[-+=&|*/~%^<>~] \\s*+ (if|unless)\n           )\n          )\\b\n          (?! [^;]*+ ; .*? \\bend\\b )\n      |(  \"(\\\\.|[^\"])*+\"              # eat a double quoted string\n       | '(\\\\.|[^'])*+'            # eat a single quoted string\n       |   [^#\"']                    # eat all but comments and strings\n       )*\n       ( \\{ (?!  [^}]*+ \\} )\n       | \\[ (?! [^\\]]*+ \\] )\n       )\n      ).*$\n  |   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n  
(?x)^\n      (\\s*+\n          (module|class|def(?!.*\\bend\\s*$)\n          |unless|if\n          |case\n          |begin\n          |for|while|until\n           |^=begin\n          |(  \"(\\\\.|[^\"])*+\"          # eat a double quoted string\n           | '(\\\\.|[^'])*+'        # eat a single quoted string\n           |   [^#\"']                # eat all but comments and strings\n           )*\n           (                        \\s   (do|begin|case)\n           | (?<!\\$)[-+=&|*/%^<>~] \\s*+ (if|unless)\n           )\n          )\\b\n          (?! [^;]*+ ; .*? \\bend\\b )\n      |(  \"(\\\\.|[^\"])*+\"              # eat a double quoted string\n       | '(\\\\.|[^'])*+'            # eat a single quoted string\n       |   [^#\"']                    # eat all but comments and strings\n       )*\n       ( \\{ (?!  [^}]*+ \\} )\n       | \\[ (?! [^\\]]*+ \\] )\n       )\n      ).*$\n  |   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n  
(?x)^\n      (\\s*+\n          (module|class|def\n          |unless|if\n          |case\n          |begin\n          |for|while|until\n          |(  \"(\\\\.|[^\"])*+\"          # eat a double quoted string\n           | '(\\\\.|[^'])*+'        # eat a single quoted string\n           |   [^#\"']                # eat all but comments and strings\n           )*\n           (                 \\s   (do|begin|case)\n           | [-+=&|*/~%^<>~] \\s*+ (if|unless)\n           )\n          )\\b\n          (?! [^;]*+ ; .*? \\bend\\b )\n      |(  \"(\\\\.|[^\"])*+\"              # eat a double quoted string\n       | '(\\\\.|[^'])*+'            # eat a single quoted string\n       |   [^#\"']                    # eat all but comments and strings\n       )*\n       ( \\{ (?!  [^}]*+ \\} )\n       | \\[ (?! [^\\]]*+ \\] )\n       )\n      ).*$\n  |   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n  
(?x)^\n      (\\s*+\n          (module|class|def\n          |unless|if\n          |case\n          |begin\n          |for|while|until\n          |(  \"(\\\\.|[^\"])*+\"          # eat a double quoted string\n           | '(\\\\.|[^'])*+'        # eat a single quoted string\n           |   [^#\"']                # eat all but comments and strings\n           )*\n           (                \\s   (do|begin|case)\n           | [-+=&|*/~%^<>] \\s*+ (if|unless)\n           )\n          )\\b\n          (?! [^;]*+ ; .*? \\bend\\b )\n      |(  \"(\\\\.|[^\"])*+\"              # eat a double quoted string\n       | '(\\\\.|[^'])*+'            # eat a single quoted string\n       |   [^#\"']                    # eat all but comments and strings\n       )*\n       ( \\{ (?!  [^}]*+ \\} )\n       | \\[ (?! [^\\]]*+ \\] )\n       )\n      ).*$\n  |   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n  
(?x)^\n    (\\s*\n        (module|class|def\n        |unless|if|else|elsif\n        |case|when\n        |begin|rescue|ensure\n        |for|while|until\n        |(?= .*? \\b(do|begin|case|if|unless)\\b )\n         # the look-ahead above is to quickly discard non-candidates\n         (  \"(\\\\.|[^\\\\\"])*+\"        # eat a double quoted string\n         | '(\\\\.|[^\\\\'])*+'      # eat a single quoted string\n         |   [^#\"']                # eat all but comments and strings\n         )*\n         (                         \\s   (do|begin|case)\n         | [-+=&|*/~%^<>~](?<!\\$.) \\s*+ (if|unless)\n         )\n        )\\b\n        (?! [^;]*+ ; .*? \\bend\\b )\n    |(  \"(\\\\.|[^\\\\\"])*+\"            # eat a double quoted string\n     | '(\\\\.|[^\\\\'])*+'          # eat a single quoted string\n     |   [^#\"']                    # eat all but comments and strings\n     )*\n     ( \\{ (?!  [^}]*+ \\} )\n     | \\[ (?! [^\\]]*+ \\] )\n     )\n    ).*$
(?x)^\n    (\\s*\n      ( module|class|def|unless|if|else|elsif\n      | case|when|begin|rescue|ensure|for|while|until\n      | (?= .*? \\b(do|begin|case|if|unless)\\b)\n        # the look-ahead above is to quickly discard non-candidates\n        # below, *+ is 'possessive' - greedy and does not backtrack after repeated\n        ( \"(\\\\.|[^\\\\\"])*+\"  # eat a double quoted string\n        | '(\\\\.|[^\\\\'])*+'  # eat a single quoted string\n        | [^#\"']            # eat all but comments and strings\n        )*\n        ( \\s (do|begin|case)\n        | [-+=&|*/~%^<>](?<!\\$.) \\s*+ (if|unless)\n        )\n      )\\b\n      (?! [^;]*+ ; .*? \\bend\\b )\n      |\n      ( \"(\\\\.|[^\\\\\"])*+\"  # eat a double quoted string\n      | '(\\\\.|[^\\\\'])*+'  # eat a single quoted string\n      | [^#\"']            # eat all but comments and strings\n      )*\n      ( \\{ (?!  [^}]*+ \\} )\n      | \\[ (?! [^\\]]*+ \\] )\n      )\n    ).*$
(?x)^\n    (\\s*+\n    (define |unless|if\n    |case|select\n    |local method|method\n    |for|while|until\n    |block\n    |(  \"(\\\\.|[^\"])*+\"                # eat a double quoted string\n    | '(\\\\.|[^'])*+'               # eat a single quoted string\n    |   [^#\"']                       # eat all but comments and strings\n    )*\n    (                 \\s   (do|begin|case)\n    | [-+=&|*/~%^<>~] \\s*+ (if|unless)\n    )\n    )\\b\n    (?! [^;]*+ ; .*? \\bend\\b )\n    |(  \"(\\\\.|[^\"])*+\"                  # eat a double quoted string\n    | '(\\\\.|[^'])*+'                 # eat a single quoted string\n    |   [^#\"']                         # eat all but comments and strings\n    )*\n    ( \\{ (?!  [^}]*+ \\} )\n    | \\[ (?! [^\\]]*+ \\] )\n    )\n    ).*$\n    |   [\\/\\/] .*? \\(fold\\) \\s*+ $           # Sune\u2019s special marker\n    |    ^\\s*\\/\\/\\s*\\#region\n    
(?x)^\n\t    (?<_1>\\s*+\n\t        (?<_2>module|class|def(?!.*\\bend\\s*$)\n\t        |unless|if\n\t        |case\n\t        |begin\n\t        |for|while|until\n\t         |^=begin\n\t        |(?<_3>  \"(?<_4>\\\\.|[^\"])*+\"          # eat a double quoted string\n\t         | '(?<_5>\\\\.|[^'])*+'        # eat a single quoted string\n\t         |   [^#\"']                # eat all but comments and strings\n\t         )*\n\t         (?<_6>                        \\s   (?<_7>do|begin|case)\n\t         | (?<!\\$)[-+=&|*\\/~%^<>~] \\s*+ (?<_8>if|unless)\n\t         )\n\t        )\\b\n\t        (?! [^;]*+ ; .*? \\bend\\b )\n\t    |(?<_9>  \"(?<_10>\\\\.|[^\"])*+\"              # eat a double quoted string\n\t     | '(?<_11>\\\\.|[^'])*+'            # eat a single quoted string\n\t     |   [^#\"']                    # eat all but comments and strings\n\t     )*\n\t     (?<_12> \\{ (?!  [^}]*+ \\} )\n\t     | \\[ (?! [^\\]]*+ \\] )\n\t     )\n\t    ).*$\n\t|   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n\t
(?x)^\n\t    (?<_1>\\s*+\n\t        (?<_2>module|class|def\n\t        |unless|if\n\t        |case\n\t        |begin\n\t        |for|while|until\n\t        |(?<_3>  \"(?<_4>\\\\.|[^\"])*+\"          # eat a double quoted string\n\t         | '(?<_5>\\\\.|[^'])*+'        # eat a single quoted string\n\t         |   [^#\"']                # eat all but comments and strings\n\t         )*\n\t         (?<_6>                 \\s   (?<_7>do|begin|case)\n\t         | [-+=&|*\\/~%^<>~] \\s*+ (?<_8>if|unless)\n\t         )\n\t        )\\b\n\t        (?! [^;]*+ ; .*? \\bend\\b )\n\t    |(?<_9>  \"(?<_10>\\\\.|[^\"])*+\"              # eat a double quoted string\n\t     | '(?<_11>\\\\.|[^'])*+'            # eat a single quoted string\n\t     |   [^#\"']                    # eat all but comments and strings\n\t     )*\n\t     (?<_12> \\{ (?!  [^}]*+ \\} )\n\t     | \\[ (?! [^\\]]*+ \\] )\n\t     )\n\t    ).*$\n\t|   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n\t
(?x)^\n\t    (?<_1>\\s*+\n\t        (?<_2>module|class|def\n\t        |unless|if\n\t        |case\n\t        |begin\n\t        |for|while|until\n\t |^=begin\n\t        |(?<_3>  \"(?<_4>\\\\.|[^\"])*+\"          # eat a double quoted string\n\t         | '(?<_5>\\\\.|[^'])*+'        # eat a single quoted string\n\t         |   [^#\"']                # eat all but comments and strings\n\t         )*\n\t         (?<_6>                        \\s   (?<_7>do|begin|case)\n\t         | (?<!\\$)[-+=&|*\\/~%^<>~] \\s*+ (?<_8>if|unless)\n\t         )\n\t        )\\b\n\t        (?! [^;]*+ ; .*? \\bend\\b )\n\t    |(?<_9>  \"(?<_10>\\\\.|[^\"])*+\"              # eat a double quoted string\n\t     | '(?<_11>\\\\.|[^'])*+'            # eat a single quoted string\n\t     |   [^#\"']                    # eat all but comments and strings\n\t     )*\n\t     (?<_12> \\{ (?!  [^}]*+ \\} )\n\t     | \\[ (?! [^\\]]*+ \\] )\n\t     )\n\t    ).*$\n\t|   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n\t
(?x)^\n\t(?=\t[ ]{,3}>.\n\t|\t(?<_1>[ ]{4}|\\t)(?!$)\n\t|\t[#]{1,6}\\s*+\n\t|\t[ ]{,3}(?<marker>[-*_])(?<_2>[ ]{,2}\\k<marker>){2,}[ \\t]*+$\n\t)
(?x)^\\s*\n            (?: # zero or more modifiers\n              (?:\n                (public|private|protected)|(final)|(native|synchronized|abstract|threadsafe|transient)\n              )\n              \\s+\n            )?\n            \\s*  \n            ([A-Z](?:[a-zA-Z0-9_])+) # constructor/class name\n            \\s* \n            (?=\\()\n          
(?x)^\\s*\n            (?:\n              (?: # or modifier and optional type\n                (?:(?:\\b(public|private|protected)|(static)|(final)|(native|synchronized|abstract|threadsafe|transient))\\b\\s+)+\\s* # modifier\n                (?:\\b \n                  (void)\n                  |\n                  (boolean|byte|char|short|int|float|long|double) # primitive\n                  |\n                  ( # or class type\n                    (?:\\w+\\.)*[A-Z]\\w+\\b # Class name\n                    (?:<(?:[\\w, ]*)>)? # optional Generic type\n                    (?:\\[\\s*\\])* # zero or more square brackets (array)\n                  )\n                )?\n              )\n              |\n              (?:\\b # or type by itself\n                (def)\n                |\n                (void)\n                |\n                (boolean|byte|char|short|int|float|long|double) # primitive\n                |\n                ( # or class type\n                  (?:\\w+\\.)*[A-Z]\\w+\\b # Class name\n                  (?:<(?:[\\w, ]*)>)? # optional generics info\n                  (?:\\[\\s*\\])* # zero or more square brackets (array)\n                )\n              )\n            )\n            \\s*\n            (\\w+) # method name\n            \\s* \n            (?=\\() # opening parens \n          
(?x)<(?:pagespeed_)?iframe[^>]+?src=([\"\\'])\n                    (?P<url>http://(?:(?:embed|www)\\.)?\n                        (?:novamov\\.com|\n                           nowvideo\\.(?:ch|sx|eu|at|ag|co)|\n                           videoweed\\.(?:es|com)|\n                           movshare\\.(?:net|sx|ag)|\n                           divxstage\\.(?:eu|net|ch|co|at|ag))\n                        /embed\\.php.+?)\\1
(?x)<div[^>]+\n                class=(?P<q1>[\\'\"])[^\\'\"]*\\bfb-(?:video|post)\\b[^\\'\"]*(?P=q1)[^>]+\n                data-href=(?P<q2>[\\'\"])(?P<url>(?:https?:)?//(?:www\\.)?facebook.com/.+?)(?P=q2)
(?x)<div[^>]+\n            class=(?P<q1>[\\'\"])[^\\'\"]*\\byvii_single_video_player\\b[^\\'\"]*(?P=q1)[^>]+\n            data-video_id=(?P<q2>[\\'\"])([^\\'\"]+)(?P=q2)
(?x)<div\\s+class=\"video_file\">http://smotri\\.com/video/download/file/[^<]+</div>\\s*\n                    <div\\s+class=\"video_image\">[^<]+</div>\\s*\n                    <div\\s+class=\"video_id\">(?P<id>[^<]+)</div>
(?x)<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?admin\\.mangomolo\\.com/analytics/index\\.php/customers/embed/\n                (?:\n                    video\\?.*?\\bid=(?P<video_id>\\d+)|\n                    index\\?.*?\\bchannelid=(?P<channel_id>(?:[A-Za-z0-9+/=]|%2B|%2F|%3D)+)\n                ).+?)\\1
(?x)<script[^>]+src=([\\'\"])\n            (?:https?:)?//embed\\.sendtonews\\.com/player/responsiveembed\\.php\\?\n                .*\\bSC=(?P<SC>[0-9a-zA-Z-]+).*\n            \\1>
(?x)https?://(?:\\w+\\.)?youtube\\.com\n    (?:\n        (?:\n            /(?:watch.+v=|embed/(?!live_stream)|v/)\n            (?P<video_id>[0-9A-z_-]{11})\n        )\n        |\n        (?:\n            /(?:\n                (?:user|channel)/\n                |\n                embed/live_stream\\?channel=\n            )(?P<user>[^/?&]+)\n        )\n        |\n        (?:\n            /(?:c/)?(?P<liveChannel>[^/?]+)/live/?$\n        )\n    )\n
(?x)https?://(?:www\\.)?filmon\\.(?:tv|com)/(?:\n        (?:\n            index/popout\\?\n            |\n            (?:tv/)channel/(?:export\\?)?\n            |\n            tv/(?!channel)\n            |\n            channel/\n            |\n            (?P<is_group>group/)\n        )(?:channel_id=)?(?P<channel>[-_\\w]+)\n    |\n        vod/view/(?P<vod_id>\\d+)-\n    )
(?x:                  # extended mode\n          ((?i:end))              # 1: the word end\n          (                  # followed by\n            $                # end of line\n          |                  # or\n            \\s*                # possibly some space\n            (?i:(function|subroutine))    # 2: function or subroutine\n            ((\\s+[A-Za-z_][A-Za-z0-9_]*)?)  # 3: possibly the name\n          )\n          )
(?x:                # extended mode\n          ^\n          \\s*                  # start of line and possibly some space\n          ([a-zA-Z\\(\\)]*)(?<!end)        # 1: possibly some type specification but not the word end\n          \\s*                  # possibly some space\n          (?i:(function|subroutine))\\b    # 2: function or subroutine\n          \\s+                  # some space\n          ([A-Za-z_][A-Za-z0-9_]*)      # 3: name\n          )
(?x:                # turn on extended mode\n                     \\\\                # a literal backslash\n                     (?:               # ...followed by...\n                       [\"\\\\/bfnrt]     # one of these characters\n                       |               # ...or...\n                       u               # a u\n                       [0-9a-fA-F]{4}  # and four hex digits\n                     )\n                   )
(?x:                # turn on extended mode\n                     \\\\                # a literal backslash\n                     (?:               # ...followed by...\n                       [\"\\\\\\/bfnrt]     # one of these characters\n                       |               # ...or...\n                       u               # a u\n                       [0-9a-fA-F]{4}  # and four hex digits\n                     )\n                   )
(?x:              # extended mode\n    ^\\s*                      # start of line and some space\n    (?i:                      # case insensitive match\n      (\n        if.*then                # if ... then\n        |for|do|select\\s+case|where|interface  # some easy keywords\n        |module(?!\\s*procedure)          # module not followed by procedure\n        |type(?!\\s*\\()              # type but not type(\n      )\n      |                      # ...or...\n      (\n        [a-z]*(?<!end)\\s*(function|subroutine)  # possibly some letters, but not the word end, and a space, then function\n      )\n    )\n    .*$                        # anything until the end of the line\n  )
(?x:          # extended mode\n          ^\n          \\s*          # start of line and possibly some space\n          (?i:(interface))    # 1: word interface\n          \\s+          # some space\n          (?i:(operator|assignment))    # 2: the words operator or assignment\n          \\(          # opening parenthesis\n          ((\\.[a-zA-Z0-9_]+\\.)|[\\+\\-\\=\\/\\*]+)  # 3: an operator\n          \n          \\)          # closing parenthesis\n          )
(?x:          # extended mode\n          ^\n          \\s*          # start of line and possibly some space\n          (?i:(interface))    # 1: word interface\n          \\s+          # some space\n          ([A-Za-z_][A-Za-z0-9_]*)  # 1: name\n          )
(?x:         # turn on extended mode\n                   -?         # an optional minus\n                   (?:\n                     0        # a zero\n                     |        # ...or...\n                     [1-9]    # a 1-9 character\n                     \\d*      # followed by zero or more digits\n                   )\n                   (?:\n                     (?:\n                       \\.     # a period\n                       \\d+    # followed by one or more digits\n                     )?\n                     (?:\n                       [eE]   # an e character\n                       [+-]?  # followed by an option +/-\n                       \\d+    # followed by one or more digits\n                     )?       # make exponent optional\n                   )?         # make decimal portion optional\n                 )
(?x:         # turn on extended mode\n                 -?         # an optional minus\n                 (?:\n                   0        # a zero\n                   |        # ...or...\n                   [1-9]    # a 1-9 character\n                   \\d*      # followed by zero or more digits\n                 )\n                 (?:\n                   \\.       # a period\n                   \\d+      # followed by one or more digits\n                   (?:\n                     [eE]   # an e character\n                     [+-]?  # followed by an option +\\/-\n                     \\d+    # followed by one or more digits\n                   )?       # make exponent optional\n                 )?         # make decimal portion optional\n               )
(?x:        # extended mode\n          ((?i:end))    # 1: the word end\n          \\s*        # possibly some space\n          ((?i:interface)?)   # 2: possibly interface\n          )
(?x:        # turn on extended mode\n                          ^        # a line beginning with\n                          \\s*      # some optional space\n                          [}\\]]    # and the close of an object or array\n                        )
(?x:       # turn on extended mode\n                          ^        # a line beginning with\n                          \\s*      # some optional space\n                          [{\\[]    # the start of an object or array\n                          (?!      # but not followed by\n                            .*     # whatever\n                            [}\\]]  # and the close of an object or array\n                            ,?     # an optional comma\n                            \\s*    # some optional space\n                            $      # at the end of the line\n                          )\n                          |        # ...or...\n                          [{\\[]    # the start of an object or array\n                          \\s*      # some optional space\n                          $        # at the end of the line\n                        )
(?x:      # extended mode\n          ^\\s*      # begining of line and some space\n          (?i:(type))  # 1: word type\n          \\s+      # some space\n          ([a-zA-Z_][a-zA-Z0-9_]*)  # 2: type name\n          )
(?x:      # turn on extended mode\n                            ^         # a line beginning with\n                            \\s*       # some optional space\n                            [{\\[]     # the start of an object or array\n                            (?!       # but not followed by\n                              .*      # whatever\n                              [}\\]]   # and the close of an object or array\n                              ,?      # an optional comma\n                              \\s*     # some optional space\n                              $       # at the end of the line\n                            )         \n                            |         # ...or...\n                            [{\\[]     # the start of an object or array\n                            \\s*       # some optional space\n                            $         # at the end of the line\n                          )
(?x:     # turn on extended mode\n                         ^      # a line beginning with\n                         \\s*    # some optional space\n                         [}\\]]  # and the close of an object or array\n                       )
(?x:  # extended mode\n    ^\\s*          # start of line and some space\n    (?i:(end))        # the word end, case insensitive\n    .*$            # anything until the end of the line\n  )
(?x:(?<=;|^|{)(?=\\s*\n                (?:\n                    (?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final) # visibility/modifier\n                        |\n                    (?:def)\n                        |\n                    (?:\n                        (?:\n                            (?:void|boolean|byte|char|short|int|float|long|double)\n                                |\n                            (?:@?(?:[a-zA-Z]\\w*\\.)*[A-Z]+\\w*) # object type\n                        )\n                        [\\[\\]]*\n                        (?:<.*>)?\n                    ) \n                    \n                )\n                \\s+\n                ([^=]+\\s+)?\\w+\\s*\\(\n      ))
(?x:(?=\n                        (?:\n                            (?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final) # visibility/modifier\n                                |\n                            (?:def)\n                                |\n                            (?:void|boolean|byte|char|short|int|float|long|double)\n                                |\n                            (?:(?:[a-z]\\w*\\.)*[A-Z]+\\w*) # object type\n                        )\n                        \\s+\n                        [\\w\\d_<>\\[\\],\\s]+\n                        (?:=|$)\n                        \n              ))
(?x:(?=\n                        (?:\n                            (?:private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final) # visibility/modifier\n                                |\n                            (?:def)\n                                |\n                            (?:void|boolean|byte|char|short|int|float|long|double)\n                                |\n                            (?:(?:[a-z]\\w*\\.)*[A-Z]+\\w*) # object type\n                        )\n                        \\s+\n                        (?!private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final|def|void|boolean|byte|char|short|int|float|long|double)\n                        [\\w\\d_<>\\[\\],\\?][\\w\\d_<>\\[\\],\\? \\t]*\n                        (?:=|$)\n                        \n          ))
(?x:\n              (([\\|}]+)(\\|)([\\|}]+))?   #  from | to \n              ([^}]*)                   # anything\n              (}})                      # closing brackets\n          )
(?x:\n              ((\\|)[ ]*( [^\\[\\]|]+ )[ ]*)? # pipe, spaces, anything, spaces\n            (\\]\\])                         # closing brackets\n          )
(?x:\n              (\\|[ ]*([^\\[\\]\\|]+)[ ]*)?     # pipe, spaces, anything, spaces\n            (\\]\\])                         # closing brackets\n          )
(?x:\n            (\\[\\[)                         # opening brackets\n              ( [ ]*(((i|I)mage)(:))       # spaces, image, colon\n                ([^\\[\\]|]+)                # anything\n                (?<!\\s)[ ]*                # spaces\n              )\n          )
(?x:\n            (\\[\\[)                       # opening brackets\n              (:)?                       # colon to suppress image or category?\n              ((\\s+):[^\\[\\]]*(?=\\]\\]))?  # a colon after spaces is invalid\n              [ ]*                       # spaces\n              ( (([^\\[\\]|]+)(:))?        # namespace\n                ([^\\[\\]|]+)(?<!\\s)[ ]*   # link name\n              )?\n          )
(?x:\n          ((?i:end))      # 1: the word end\n          \\s*          # possibly some space\n          ((?i:interface)?)     # 2: possibly interface\n          )
(?x:\n          ((?i:end))      # 1: the word end\n          \\s*          # possibly some space\n          (?i:(type))?       # 2: possibly the word type\n          (\\s+[A-Za-z_][A-Za-z0-9_]*)?  # 3: possibly the name\n          )
(?x:\n          ({{)                       # opening brackets\n            ([Rr]edirect|subst:.*)   # redirect?\n            [ ]*                   # spaces\n            (\\|)                   # pipe\n          )
(?x:\n        (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                      # Match the link text.\n        ([ ])?            # Space not allowed\n        (\\()            # Opening paren for url\n          (<?)(.*?)(>?)      # The url\n          [ \\t]*          # Optional whitespace\n          (?:\n              ((\\().+?(\\)))    # Match title in parens\u2026\n            | ((\").+?(\"))    # or in quotes.\n          )?            # Title is optional\n          \\s*            # Optional whitespace\n        (\\))\n       )
(?x:\n        (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                      # Match the link text.\n        ([ ])?            # Space not allowed\n        (\\()            # Opening paren for url\n          (<?)(.*?)(>?)     # The url\n          [ \\t]*          # Optional whitespace\n          (?:\n              ((\\().+?(\\)))   # Match title in parens\u2026\n            | ((\").+?(\"))   # or in quotes.\n          )?            # Title is optional\n          \\s*           # Optional whitespace\n        (\\))\n       )
(?x:\n        \\!              # Images start with !\n        (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                      # Match the link text.\n        ([ ])?            # Space not allowed\n        (\\()            # Opening paren for url\n          (<?)(\\S+?)(>?)      # The url\n          [ \\t]*          # Optional whitespace\n          (?:\n              ((\\().+?(\\)))   # Match title in parens\u2026\n            | ((\").+?(\"))   # or in quotes.\n          )?            # Title is optional\n          \\s*           # Optional whitespace\n        (\\))\n       )
(?x:\n        \\!              # Images start with !\n        (\\[)((?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(\\])\n                      # Match the link text.\n        ([ ])?            # Space not allowed\n        (\\()            # Opening paren for url\n          (<?)(\\S+?)(>?)      # The url\n          [ \\t]*          # Optional whitespace\n          (?:\n              ((\\().+?(\\)))    # Match title in parens\u2026\n            | ((\").+?(\"))    # or in quotes.\n          )?            # Title is optional\n          \\s*            # Optional whitespace\n        (\\))\n       )
(?x:\n        \\s*            # Leading whitespace\n        (\\[)(.+?)(\\])(:)    # Reference name\n        [ \\t]*          # Optional whitespace\n        (<?)(\\S+?)(>?)      # The url\n        [ \\t]*          # Optional whitespace\n        (?:\n            ((\\().+?(\\)))    # Match title in quotes\u2026\n          | ((\").+?(\"))    # or in parens.\n        )?            # Title is optional\n        \\s*            # Optional whitespace\n        $\n      )
(?x:\n\t    (?<!\\.)\\b # not preceeded by . (?<_1>method call)\n\t    (?!new) # not before new\n\t    (?= # looking forward we see\n\t        (?:\n\t            (?:\\w|<)\\S* # a word (?<_2>modifier or return type) or a parameter type\n\t            \\s+ # some space\n\t            (?:\\w|<)\\S*[^=\\.\\s]*? # another word and anything but =, . or space\n\t            | # or\n\t            [A-Z_]\\w* # a capitalised word (?<_3>i.e. constructor name)\n\t        )\n\t        \\( # and the leading parens of the params\n\t    )\n\t)
(?x:\n\t(?<_1>\\[)(?<_2>(?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(?<_3>\\])\t\n\t# Match the link text.\n\t(?<_4>[ ])?\t\t\t\t\t\t# Space not allowed\n\t(?<_5>\\()\t\t\t\t\t\t# Opening paren for url\n\t(?<_6><?)(?<_7>.*?)(?<_8>>?)\t\t\t# The url\n\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t(?:\n\t  (?<_9>(?<_10>\\().+?(?<_11>\\)))\t\t# Match title in parens\u2026\n\t| (?<_12>(?<_13>\").+?(?<_14>\"))\t\t# or in quotes.\n\t)?\t\t\t\t\t\t# Title is optional\n\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t(?<_15>\\))\n\t )
(?x:\n\t(?<_1>\\[\\[)                         # opening brackets\n\t  (?<_2> [ ]*(?<_3>(?<_4>(?<_5>i|I)mage)(?<_6>:))       # spaces, image, colon\n\t    (?<_7>[^\\[\\]|]+)                # anything\n\t    (?<!\\s)[ ]*                # spaces\n\t  )\n\t)
(?x:\n\t(?<_1>\\[\\[)                       # opening brackets\n\t  (?<_2>:)?                       # colon to suppress image or category?\n\t  (?<_3>(?<_4>\\s+):[^\\[\\]]*(?=\\]\\]))?  # a colon after spaces is invalid\n\t  [ ]*                       # spaces\n\t  (?<_5> (?<_6>(?<_7>[^\\[\\]|]+)(?<_8>:))?        # namespace\n\t    (?<_9>[^\\[\\]|]+)(?<!\\s)[ ]*   # link name\n\t  )?\n\t)
(?x:\n\t\\!\t\t\t\t\t\t\t# Images start with !\n\t(?<_1>\\[)(?<_2>(?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])*+)(?<_3>\\])\t\n\t# Match the link text.\n\t(?<_4>[ ])?\t\t\t\t\t\t# Space not allowed\n\t(?<_5>\\()\t\t\t\t\t\t# Opening paren for url\n\t(?<_6><?)(?<_7>\\S+?)(?<_8>>?)\t\t\t# The url\n\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t(?:\n\t  (?<_9>(?<_10>\\().+?(?<_11>\\)))\t\t# Match title in parens\u2026\n\t| (?<_12>(?<_13>\").+?(?<_14>\"))\t\t# or in quotes.\n\t)?\t\t\t\t\t\t# Title is optional\n\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t(?<_15>\\))\n\t )
(?x:\n\t\\s*\t\t\t\t\t\t# Leading whitespace\n\t(?<_1>\\[)(?<_2>.+?)(?<_3>\\])(?<_4>:)\t\t# Reference name\n\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t(?<_5><?)(?<_6>\\S+?)(?<_7>>?)\t\t\t# The url\n\t[ \\t]*\t\t\t\t\t# Optional whitespace\n\t(?:\n\t  (?<_8>(?<_9>\\().+?(?<_10>\\)))\t\t# Match title in quotes\u2026\n\t| (?<_11>(?<_12>\").+?(?<_13>\"))\t\t# or in parens.\n\t)?\t\t\t\t\t\t# Title is optional\n\t\\s*\t\t\t\t\t\t# Optional whitespace\n\t$\n\t)
(?x:\t\t# extended mode\n\t^\\s*\t\t\t\t# start of line and some space\n\t(?i:(?<_1>end))\t\t# the word end, case insensitive\n\t.*$\t\t\t\t# anything until the end of the line\n\t)
(?x:\t\t# extended mode\n\t^\\s*\t\t\t\t\t\t# start of line and some space\n\t(?i:\t\t\t\t\t\t# case insensitive match\n\t(?<_1>\n\tif.*then\t\t\t# if ... then\n\t|for|do|select\\s+case|where|interface\t# some easy keywords\n\t|module(?!\\s*procedure)\t\t\t\t# module not followed by procedure\n\t|type(?!\\s*\\()\t# type but not type(?<_2>\n\t)\n\t|\t\t\t\t\t# ...or...\n\t(?<_3>\n\t[a-z]*(?<!end)\\s*(?<_4>function|subroutine)\t# possibly some letters, but not the word end, and a space, then function\n\t)\n\t)\n\t.*$\t\t\t\t\t\t# anything until the end of the line\n\t)
(?x:\t\t\t# extended mode\n\t^\\s*\t\t\t# begining of line and some space\n\t(?i:(?<_1>type))\t# 1: word type\n\t\\s+\t\t\t# some space\n\t(?<_2>[a-zA-Z_][a-zA-Z0-9_]*)\t# 2: type name\n\t)
(?x:\t\t\t\t\t# extended mode\n\t^\n\t\\s*\t\t\t\t\t# start of line and possibly some space\n\t(?<_1>[a-zA-Z\\(\\)]*)(?<!end)\t# 1: possibly some type specification but not the word end\n\t\\s*\t\t\t\t\t# possibly some space\n\t(?i:(?<_2>function|subroutine))\\b\t# 2: function or subroutine\n\t\\s+\t\t\t\t\t# some space\n\t(?<_3>[A-Za-z_][A-Za-z0-9_]*)\t\t# 3: name\n\t\\s*\t\t\t\t\t# possibly some space\n\t(?<_4>\\()\t\t\t\t\t# 4: opening parenthesis\n\t(?<_5>[^)]*)?  \t\t# 5: arguments (?<_6>anything but a parenthesis)\n\t(?<_7>\\))?\t\t\t\t\t# 6: closing parenthesis\n\t)
(?x:\t\t\t\t\t# extended mode\n\t^\n\t\\s*\t\t\t\t\t# start of line and possibly some space\n\t(?i:(?<_1>interface))\t\t# 1: word interface\n\t\\s+\t\t\t\t\t# some space\n\t(?<_2>[A-Za-z_][A-Za-z0-9_]*)\t# 1: name\n\t)
(?x:\t\t\t\t\t# extended mode\n\t^\n\t\\s*\t\t\t\t\t# start of line and possibly some space\n\t(?i:(?<_1>interface))\t\t# 1: word interface\n\t\\s+\t\t\t\t\t# some space\n\t(?i:(?<_2>operator|assignment))\t\t# 2: the words operator or assignment\n\t\\(\t\t\t\t\t# opening parenthesis\n\t(?<_3>(?<_4>\\.[a-zA-Z0-9_]+\\.)|[\\+\\-\\=\\/\\*]+)\t# 3: an operator\n\t\n\t\\)\t\t\t\t\t# closing parenthesis\n\t)
(?xi) (?<=^|;) \\s* (?:(
(?xi)(?=\n                  (\n                      (\\\\[a-z_][a-z_0-9]*\\\\[a-z_][a-z_0-9\\\\]*)|\n                      ([a-z_][a-z_0-9]*\\\\[a-z_][a-z_0-9\\\\]*)\n                  )\n                  [^a-z_0-9\\\\])
(?xi)\n                    _(?P<width>[0-9]+)x(?P<height>[0-9]+)\n                    _(?P<vcodec>[a-z0-9]+)\n                    _(?P<vbr>[0-9]+)\n                    _(?P<acodec>[a-z0-9]+)\n                    _(?P<abr>[0-9]+)\n                    \\.(?P<ext>[a-z0-9]+)
(?xi)\n    (?:\n        (?P<github>(?P<github_base>https://(?:w{3}\\.)?github.com/(?P<github_user_repo>[^/]+/[^/]+))/\n            (?:issues/(?P<github_issue>\\d+)/?|\n               pull/(?P<github_pull>\\d+)/?|\n               commit/(?P<github_commit>[\\da-f]{40})/?|\n               compare/(?P<github_diff1>[\\da-f]{40})\\.{3}(?P<github_diff2>[\\da-f]{40}))) |\n\n        (?P<bitbucket>(?P<bitbucket_base>https://(?:w{3}\\.)?bitbucket.org/(?P<bitbucket_user_repo>[^/]+/[^/]+))/\n            (?:issues/(?P<bitbucket_issue>\\d+)(?:/[^/]+)?/?|\n               pull-requests/(?P<bitbucket_pull>\\d+)(?:/[^/]+(?:/diff)?)?/?|\n               commits/commit/(?P<bitbucket_commit>[\\da-f]{40})/?|\n               branches/commits/(?P<bitbucket_diff1>[\\da-f]{40})(?:\\.{2}|%0d)(?P<bitbucket_diff2>[\\da-f]{40})\\#diff)) |\n\n        (?P<gitlab>(?P<gitlab_base>https://(?:w{3}\\.)?gitlab.com/(?P<gitlab_user_repo>[^/]+/[^/]+))/\n            (?:issues/(?P<gitlab_issue>\\d+)/?|\n               merge_requests/(?P<gitlab_pull>\\d+)/?|\n               commit/(?P<gitlab_commit>[\\da-f]{40})/?|\n               compare/(?P<gitlab_diff1>[\\da-f]{40})\\.{3}(?P<gitlab_diff2>[\\da-f]{40})))\n    )\n    
(?xi)\\s*(?=\n                [a-z_0-9$\\\\]+(::)\n                        (?:\n                    ([a-z_][a-z_0-9]*)\\s*\\(\n                    |\n                    ((\\$+)[a-z_\\x7f-\\xff][a-z0-9_\\x7f-\\xff]*)\n                    |\n                    ([a-z_\\x7f-\\xff][a-z0-9_\\x7f-\\xff]*)\n                )?\n            )
(?xi)\\s*(?=\n                [a-z_0-9\\\\]+(::)\n                ([a-z_\\x7f-\\xff][a-z0-9_\\x7f-\\xff]*)?\n            )
(?xi)<iframe\\b[^>]+\\bsrc=([\"\\'])(?P<url>(?:(?:https?:)?//[^/]+)?/Mediasite/Play/[0-9a-f]{32,34}(?:\\?.*?)?)\\1
(?xm)\n            ^(?P<testtoken_start>\\s*\\S+)\n            \\s+SYNTAX\\sTEST\\s+\n            \"(?P<syntax_file>[^\"]+)\"\n            \\s*(?P<testtoken_end>\\S+)?$\n        
(?xm)\n        \\s*(?:\n            (?P<begin_of_token><-)|(?P<range>\\^+)\n        )(.*)$
(?xs)(\n        '(?:[^'\\\\]*(?:\\\\.[^'\\\\]*)*)'  |\n        \"(?:[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"\n    )
(?xs)\n                         ^ (?P<line> .*?)\n                           --@ (?: (?P<line1> \\d+ | < | \\^+ | v+)\n                                   (?: - (?P<line2> \\d+ | < | \\^+ | v+) )?\n                               )?\n                               \\s+ (?P<kind> \\w+): (?P<msg> .*)\n                         $
(?xs)\n                    (?P<q1>[\"'])\n                        (?:https?:)?//cdnapi(?:sec)?\\.kaltura\\.com(?::\\d+)?/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)(?:(?!(?P=q1)).)*\n                    (?P=q1).*?\n                    (?:\n                        (?:\n                            entry_?[Ii]d|\n                            (?P<q2>[\"'])entry_?[Ii]d(?P=q2)\n                        )\\s*:\\s*|\n                        \\[\\s*(?P<q2_1>[\"'])entry_?[Ii]d(?P=q2_1)\\s*\\]\\s*=\\s*\n                    )\n                    (?P<q3>[\"'])(?P<id>(?:(?!(?P=q3)).)+)(?P=q3)\n                
(?xs)\n                    <(?:iframe[^>]+src|meta[^>]+\\bcontent)=(?P<q1>[\"'])\n                      (?:https?:)?//(?:(?:www|cdnapi(?:sec)?)\\.)?kaltura\\.com/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)\n                      (?:(?!(?P=q1)).)*\n                      [?&;]entry_id=(?P<id>(?:(?!(?P=q1))[^&])+)\n                      (?:(?!(?P=q1)).)*\n                    (?P=q1)\n                
(?xs)\n                    kWidget\\.(?:thumb)?[Ee]mbed\\(\n                    \\{.*?\n                        (?P<q1>['\"])wid(?P=q1)\\s*:\\s*\n                        (?P<q2>['\"])_?(?P<partner_id>(?:(?!(?P=q2)).)+)(?P=q2),.*?\n                        (?P<q3>['\"])entry_?[Ii]d(?P=q3)\\s*:\\s*\n                        (?P<q4>['\"])(?P<id>(?:(?!(?P=q4)).)+)(?P=q4)(?:,|\\s*\\})\n                
(?xus)\n    (?:\n        (?P<comments>(\\r?\\n?\\s*)<!--[\\s\\S]*?-->(\\s*)(?=\\r?\\n)|<!--[\\s\\S]*?-->)|\n        (?P<open><(?P<tag>img))\n        (?P<attr>(?:\\s+[\\w\\-:]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'))?)*)\n        (?P<close>\\s*(?:\\/?)>)\n    )\n    
(?xus)\n    (?P<attr>\n        (?:\n            (?P<name>\\s+(?:href|src)\\s*=\\s*)\n            (?P<path>\"[^\"]*\"|'[^']*')\n        )\n    )\n    
(?xus)\n    (?P<attr>\n        (?:\n            (?P<name>\\s+src\\s*=\\s*)\n            (?P<path>\"[^\"]*\"|'[^']*')\n        )\n    )\n    
(@
(@(?P<repo>[[:alnum:]-_.]*[[:alnum:]-_./]*))?//(?P<package>[[:alnum:]-_.]*[[:alnum:]-_./]*):(?P<target>[[:alnum:]_/.+-=,@~.]*)+
(@(param|var) )([\\w\\|\\\\]+)( \\$\\w*)?
(@(param|var) )({[\\w\\|\\\\]*} )?\\$(\\w*)
(@)([ \\t]*)(
(@@)|(\\R)|(!####n####!)|(!####r####!)|(?=@)
(@|\\n|\\\\)
(@<\\w+>\\{(?:[^\\}\\\\]|\\\\.)*?\\})
(@function)(\\s+)(
(@import\\s*[\"']\\s*(?P<url>.*?)[\"'])
(@include)(\\s+)(
(@include\\s*
(@mixin)(\\s+)(
(@mixin\\s*
(@ORM\\\\JoinColumn\\()
(@sanity\\\\[^\\\\]+)\\\\src\\\\
([
([ \\n\\\\])
([ \r\n\t]+)|(%[^\n]*[\n]|[!-\\[\\]-\u2027\u202a-\ud7ff\uf900-\uffff][\u0300-\u036f]*|[\ufffd-\ufffd][\ufffd-\ufffd][\u0300-\u036f]*|\\\\verb\\*([^]).*?\\3|\\\\verb([^*a-zA-Z]).*?\\4|\\\\[a-zA-Z@]+|\\\\[^\ufffd-\ufffd])
([ \r\n\t]+)|(---?|[!-\\[\\]-\u2027\u202a-\ud7ff\uf900-\uffff]|[\ufffd-\ufffd][\ufffd-\ufffd]|\\\\(?:[a-zA-Z]+|[^\ufffd-\ufffd]))
([-!(){}\\[\\]^\"~*?:\\+\\/\\\\])
([#\\\\])
([#a-z0-9\\-\\_]+)\\.{0,1}([#a-z0-9\\-\\_]*)\\s*\\({0,1}\\s*([\\$a-z0-9\\-\\_\\.\\s]*)\\){0,1}([\\!\\?]{0,1})
([$#@])\\\\(\\\\*)([{:])
([$\\\\])
([$\\u00A3\\u00A5\\u20AC#]?)(-?[0-9,]*)(\\.[0-9]*)?+
([$]
([$^.?*!+:=()\\[\\]{}|\\\\])
([$`\\\"\\\\\\\\])
([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1
([$escape_re\"\\\\])
([$escaped\\\\])
-([$chanmodes->[0]])
([%\\\\_])
([%A-Za-z\\\\.\\\\-\\\\_\\\\/ ]+\\\\.(plist|app|pkg))
([&\\$\"\\@\\\\])
([&\\|\\!\\^\\---\\(\\)])
([()[\\]{}\\-.*+?^$|/\\\\])
([()[\\]{}\\-.*+?^$|\\/\\\\])
([-()[\\]{}+?*.$^|,:#<!\\\\])
([()\\',\\[\\]\\?\\!:;\\/.\\+\\-\\*\\#\\{\\}\\\\])
([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])
([()\\\\])
([()\\s\"';&|#\\\\])
([()+.'\\\\])
([(].*?[)])(
([)(\\\\])
([*_\\[\\]\\\\])
([,;\\\\])
([,\\\\])
([.$+?{}()\\[\\]\\\\])
([.*+?\\^${}()|\\[\\]\\/\\\\])
([-.*+?\\^${}()|\\[\\]\\/\\\\])
([.*+?\\^=!:${}()|\\[\\]\\/\\\\])
([.*+?^$(){}|[\\]\\/\\\\])
([.*+?^$\\{\\}()|[\\]\\/\\\\])
([.*+?^${}()|[\\]/\\\\])
([.*+?^${}()|[\\]\\/\\\\])
([-.*+?^${}()|[\\]\\/\\\\])
([.*+?^${}()|[\\]\\\\])
([.*+?^${}()|\\[\\]\\/\\\\])
([.*+?^=!:${}()|[\\]/\\\\])
([.*+?^=!:${}()|[\\]\\/\\\\])
([.*+?^=!:${}()|\\[\\]\\/\\\\])
([.*+?|{}()\\[\\]\\\\])
([.*+?=^!:${}()|[\\]\\/\\\\])
([-.,*+?^${}()|[\\]\\/\\\\])
([.:/\\\\])
([.:\\/\\\\])
([.\\s]*?)[^\\\\](?=((#{)|'))
([.\\s]*?)[^\\\\](?=((#{)|\"))
([.\\s]*?)[^\\\\](?=(}))
([.])([ \\t]*)(
([.+*?=^!:${}()[\\]|/\\\\])
([.+*?=^!:${}()[\\]|\\/\\\\])
([.+*?=^!:()[\\]|\\/\\\\])
([.+?^=!:${}()|[\\]/\\\\])
([.+?^=!:${}()|[\\]\\/\\\\])
([.+?^=!:${}()|\\[\\]\\/\\\\])
([.+\\\\])
([-.+^${}()|[\\]\\/\\\\])
([.+^()|\\${}\\[\\]\\\\])
([.+^=!:${}()|\\[\\]\\/\\\\])
([/:\\\\])
([/\\\\])[/\\\\]+
([/\\\\])[^/\\\\]*$
([/\\\\])lib\\b
([/\\w]+)=(([,\\w]+)|(\"(?:\\\\.|[^\"\\\\])*)\")
([/][*])|([/][/][^\\n]*)|('[^'\\\\]*(?:\\.[^'\\\\]*)*')|(\"[^\"\\\\]*(?:\\.[^\"\\\\]*)*\")
([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}
([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}
([:*])(\\w+)|\\{(\\w+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}
([:\\-,[{]\\s*(![^\\s]+)?[ \\t]*)(\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')(?=[ \\t]*($|,|]|}))
([:\\-,[{]\\s*(![^\\s]+)?[ \\t]*)(\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*')(?=[ \\t]*(\\n|$|,|]|}))
([:\\\\])
([:\\]\\\\])
([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}
([:]?)([\\w\\[\\]-]+)|\\{([\\w\\[\\]-]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}
([;&,\\.\\+\\*\\~'`:\"\\!\\^#$%@\\[\\]\\(\\)=<>\\|\\/? {}\\\\])
([;,\"\\\\])
([;/?:@&=+,\\$\\[\\]%\\\\])
([;\\/\\\\])
([;\\\\])
([?!@#$%^&*()_=+,.<>'\":;\\[\\]\\/|~`{}\\\\])
([?!\\.]) +(['\"([\\x{00bf}\\x{00A1}\\p{IsPi}]+[\\ ]*[\\p{IsUpper}])
([?!\\.][\\ ]*['\")\\]\\p{IsPf}]+) +(['\"([\\x{00bf}\\x{00A1}\\p{IsPi}]*[\\ ]*[\\p{IsUpper}])
([?!]) +(['\"([\\x{00bf}\\x{00A1}\\p{IsPi}]*[\\p{IsUpper}])
([?|&]
([@?+*]\\(|\\/\\*\\*\\/|\\*\\*|[?*]|\\[[\\!\\^]?(?:[^\\]\\\\]|\\\\.)+\\]|\\{|,|\\/|[|)}])
([@\\$\"\\\\])
([[:alnum:]\\/\\.\\-\\_*]+)
([[:alnum:]\\/\\.\\-\\_*]+);([[:digit:]]{1,5})
([[:alpha:]]+)\\\\Form\\\\
([[:digit:]]+)\\pP+(?=[[:digit:]])
([[:upper:]]{1}\\.)\\Q$marker\\E
([[\\]{}~?*\\\\])
([[^$.|?*+(){}\\\\])
([[^[]*])|(\\\\)?(Mo|MM?M?M?|Do|DD?D?D?|dddddd?|ddddd?|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|X|LT|ll?l?l?|LL?L?L?)
([\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\'\\\"\\?\\<\\>\\\\])
([\"$\\\\])
([\"$`\\\\])
([\\\"$`\\\\\\\\])
([\"'$`\\\\])
([\".^$]|\\\\(?![*?]))
([\"\\$\\@%\\\\])
([\"\\$\\@\\\\])
([\"'\\/])((?:(?!\\1|\\\\).)*(?:\\\\.(?:(?!\\1|\\\\).)*)*)\\1
(['\"\\/]).*?[^\\\\]\\1|\\.\\w*|\\w*:|\\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\\b|function *\\()|([a-z_$]\\w*)
([\\\"\\'](?P<module>[a-z\\.]+)[\\\"\\'])
([\"\\\\])
([\\\"\\\\])
([\"'\\\\])
(['\"\\\\])
([\"\\'])(?P<url>http.+?\\.m3u8.*?)\\1
([\"\\\\])\\1
(['\"\\p{ClosePunctuation}]\\s*\\p{IsEndOfSentenceCharacter}+\\s+)
(['\"\\p{OpenPunctuation}]\\s*\\p{IsEndOfSentenceCharacter}+['\"\\p{ClosePunctuation}]\\s*)$EOS
([\"\\r\\\\])
([\"\\s'$`\\\\])
([\"\\t\\n\\r$`\\\\])
([\"\\t\\n\\r\\\\])
(['\"])((?:[^\\\\]\\\\\\1|.)*?)\\1
([\"'])((?:[^\\\\\\1]|(?:\\\\\\\\)*?\\\\[^\\\\])*?)\\1
([\"'])((\\\\\\n|\\\\.|((?!\\1)(?!\\\\).))*?((?!\\1)(?!\\\\).)?)\\1
([\"'])(.+)\\1(?=\\s?+=>)
([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1
([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[\\s\\S]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]
([\"])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1
([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1
([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1
([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1
([\"'])(?:\\\\\\\\|\\\\?[^\\\\])*?\\1
([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1
([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1
([\"']).*?(?<!\\\\)\\1
(['\"]).*[^\\\\]\\1
([\"']).*\\\\u\\{[0-9a-f]+\\}.*\\1
([\"'])source\\1 *: *([\"']).*?[^\\\\]\\2
([\"'])version\\1 *: *([\"'])(.*?[^\\\\])\\2
(['\"]?)\\(?(global|ref|names)?\\u0012@([\\w\\.\\-\\/\\\\]+?)(\\.css|\\.less|\\.scss|\\.sass|\\.mx|\\.mmx|\\.style)(?::?\\[([\\w-,]+)\\]|:\\.?([\\w\\-]+))?\\)?\\1(;?)
([\"`\\$\\\\])
(['\"`\\/]).*?(?!<\\\\)\\1
([\"'`\\\\])
([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?
([\"`])(\\\\.|(?!\\1)[^\\\\])*\\1[cwd]?
([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1
(['\"`])bare\\x12@([\\w\\.\\-\\/\\\\]+)\\1
([\\\"<>&\\x
([\\#\\&\\;\\`\\|\\*\\?<>\\^\\(\\)\\[\\]\\{\\}\\$\\,\\x0A\\xFF\\' \\\"\\\\])
([\\#\\^\\$\\*\\+\\|\\(\\)\\{\\}\\[\\]\\\\])
([\\$\\\"\\\\])
([\\$\\#\\_\\^\\%])
([\\$\\@\\%]\\s*)\\Q${\\SQL_MARK}\\E
([\\$\\\\])
([\\$\\^\\.\\*\\+\\?\\(\\)\\{\\}\\[\\]\\|\\\\])
([\\$>\\\\])
([\\&\\_\\$\\{\\#])
([\\(\\)\\,\\:\\[\\]\\_\\'\\x00-\\x1f\\x7f])
([\\(\\)\\\\])
([\\(\\[\u00ab])[ \u200c]*[
([\\(=:]\\s*)\\/[^\\*\\/][^\\n]*?[^\\*\\n\\\\](?!\\\\\\/)\\/
([\\)\\(]|\\s+|
([\\*\\(\\)\\\\])
([\\*\\.\\?\\+\\$\\^\\[\\]\\(\\)\\{\\}\\|\\/\\\\])
([\\,\\;\\\\])
([\\,\\;\\s(and)]{0,4}
([\\-.*+?\\^${}()|\\[\\]\\/\\\\])
([\\-.*+?^${}()|[\\]\\/\\\\])
([\\-.*+?^=!:${}()|\\[\\]\\/\\\\])
([\\.\\$\\^\\{\\[\\(\\|\\)\\*\\+\\?\\\\])
([\\.\\(\\)\\^\\$\\*\\+\\?\\|\\[\\]\\{\\}\\\\])
([\\.\\*\\_\\'\\(\\)\\{\\}\\+\\?\\\\])
([\\.\\?\\!:\\\\]\\s*)(\\w)
([\\.\\\\])
([\\.\\^\\$\\?\\+\\[\\]\\{\\}\\(\\)\\|\\\\])
([\\.\\_])+
([\\.\\p{Alnum}]+)\\.[\\p{Alnum}]+
([\\/()[\\]{}|*+-.,^$?\\\\])
([\\/()\\[\\]{}|*+-.,^$?\\\\])
([\\/\"%;\\t\\\\])
([\\/\\.\\*\\+\\?\\|\\(\\)\\[\\]\\{\\}\\\\])
([\\/\\\\])
([\\/\\\\]\\.)|(node_modules)
([\\/\\\\]_)|(^_)
([\\/\\\\]|::)
([\\/\\\\]|^)[^\\/\\\\]+$
([\\/\\{]{2})*(\\s*)(?<!\\[\\[)\\s*(http:\\/\\/[_\\p{IsDigit}\\p{IsAlpha}\\p{IsXDigit};&?:.\\-='\"\\/]{7,})(?!\\|)
([\\/\\{]{2})*(\\s*)(?<!\\[\\[)\\s*(http:\\/\\/[_\\p{IsDigit}\\p{IsAlpha}\\p{IsXDigit};&?:.='\"\\/]{7,})(?!\\|)
([\\:\\-\\_\\.]+(.))
([\\:\\-\\_]+(.))
([\\:\\]\\\\])
([\\[(\\^=,{}:;&|!*?]\\s*)(\\/(\\\\\\/|[^\\/*])(\\\\.|[^\\/\\n\\\\])*\\/[mgi]*)
([\\[\\(])(??{\"[^$close{$1}]+[$close{$1}]\"})
([\\[\\]\\\\])
([\\'\\\"%\\\\])
([\\'\\\"\\(,]\\s*|# sourceMappingURL=)([^\\s\\'\\\"\\)\\(>]+(
([\\'\"\\\\])
([\\'\"])(.*?)(?<!\\\\)(\\1)
([\\'\"])(?P<src>(?:(?!\\1).)+)\\1\\s*,\\s*(?P<val>\\d+)
([\\'\\\\])
([\\-\\_\\s])(\\w)
([\\-\\_])
([\\-\\_]?)([\\%0-9]+)
([\\-\\_]?)([0-9]+)
([\\-\\_][a-z0-9])
([\\-\\s])\\\\ham\\{a\\}([^\\\\])
([\\-\\s])\\\\ham{a}([^\\\\])
([\\\\])
(['\\\\])
([\\\\]*)\\\"
([\\\\]*)\\z
(['\\]\\\\])
([\\\\]+)$
([\\\\]+)\\\\\"
([\\\\]+|/{2,})
([\\^$(){}+*?\\-|\\[\\]\\:\\\\])
([\\^\\$\\(\\)\\[\\]\\{\\}\\*\\.\\+\\?\\|\\\\])
([\\^\\$\\?\\[\\]\\*\\+\\-\\.\\(\\)\\|\\\\])
([\\^\\$\\[\\]\\*\\.\\\\])
([\\^\\/.*+?|()[\\]{}\\\\])
([\\^\\-\\]\\:\\\\])
([\\\\_%])
([\\_\\.\\^]?\\w)\\\\shadda\\{\\}
([\\_\\.\\^]?\\w)\\\\shadda{}
([\\\\_]+)(.)
([\\_A-Z]+)=([a-z0-9]+)
([\\\\`\\*\\_])
([\\`]*
([\\{\\}\\[\\]\\(\\)\\^\\$\\.\\|\\*\\+\\?\\\\])
([\\{\\}\\\\_])
([\\+\\-!\\(\\)\\{\\}\\[\\]\\^\"~\\*\\?:\\\\])
([\\+\\?\\*\\$\\@\\(\\)\\[\\]\\{\\}\\|\\\\])
([\\+\\-\\!\\(\\)\\{\\}\\[\\]\\^\\~\\*\\?\\:\\\\])
([\\>\\\\])
([\\0\\n\\r\\032\\'\\\"\\\\])
([\\000-\\037\\200-\\377()\\\\])
([\\A(]|^asdf(df)s)
([\\A)]|^asdf(df)s)
([\\A\\[~]|^asdf(df)s)
([\\A\\]]|^asdf(df)s)
([\\A]|^asdf(df)s)
([\\d\\.\\-]+)\\\\([\\d\\.\\-]+)
([\\d]|
([\\d_-]\\Q$err\\E|\\Q$err\\E[\\d_-])
([\\d+-\\.]+)\\s*(
([\\h:]*)\\/(\\d.*)$
([\\n\\r\\t\\f\\b\"'\\\\])
([\\p{Alpha}\\p{Digit}$])
([\\p{Alpha}])([^\\p{Space}])
([\\p{Alpha}_][\\p{Alpha}\\p{Digit}@$#_]*)(?:\\(([<>=](?:,\\s*[<>=])*)?(:)?\\))?
([\\p{Digit}])(,|:)([^\\p{Digit}])
([\\p{Han}#]+)
([\\p{Han}+[:alnum:]+#&\\._]+)
([\\p{Hiragana}\\p{Katakana}\u30fc\u2010\u30fb]*)?(?:\u3010(.*)\u3011)?
([\\p{IsAlnum}\\.\\-]*)([\\'\\\"\\)\\]\\%\\p{IsPf}]*)(\\.+)$
([\\p{Letter}\\p{Mark}]+)
([\\pL`]+)
([\\\\\\Q!~<>|\"\\E\\x{FF0D}]+)
([\\Q$bre\\E])
([\\Q$cruftSet\\E]+)$
([\\Q$escapes\\E])
([\\Q$keys\\E])}\n                
([\\Q$match\\E].*){$more,}
([\\Q$separators\\E]+\\s*)
([\\Q+-&|!(){}[]^\"~*?:\\\\\\E])
([\\r\\n:\\\\])
([\\r\\n\\\\])
([\\s;]?)require\\(['\"]([\\w\\_\\-\\.\\/\\@]+)['\"]\\)
([\\s\\\"\\'\\\\]+)
([\\s'\\\\])(?!(?:[^{]|\\{(?!%))*%\\})|(?:\\{%(=|#)([\\s\\S]+?)%\\})|(\\{%)|(%\\})
([\\s\\n]*
([\\s]|[^\\\\]|\\\\\\\\)+
([-\\s]+)(?u)
([\\s]+|origin\\/)(
([\\s|\\-|\\_|\\n])([^\\s|\\-|\\_|\\n]?)
([\\t\\n\\\\])
([\\t\\n\\r\\\"\\\\])}
([\\t\\n\\r\\\\])
([\\u0080-\\uFFFF\\x00-\\x1f\\\"\\'\\\\])
([\\u0080-\\uFFFF]+)|[\\n\\r\\t\"'\\\\]
([\\u{20}-\\u{7e}])
([\\u3040-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff])([a-z0-9`@&%=\\$\\^\\*\\-\\+\\|\\/\\\\])
([\u3042-\u3093](?:[\u3041-\u3093\u30fc\u30fd\u30fe]|\\\\CID\\{12107\\})*?)\u300a(.+?)\u300b
([\u30a2-\u30f4](?:[\u30a1-\u30f4\u30fc\u309d\u309e]|\\\\CID\\{12107\\})*?)\u300a(.+?)\u300b
([\\w :\\\\])
([\\w\\*\\s]+\\(\\*\\w*\\)\\(.*?\\)|[\\w\\*\\s\\[\\]]+)(?:
([\\w\\.\\-\\_]*?)[:\\s]*\\{(([^{}]*|(?R))+)\\}
([\\w\\.\\-\\_]+)[\\s:]+(.+?);
([\\w\\.\\-\\_]+?)([\\s:]*)\\{(([^{}]+|(?R))+)\\}
([\\w\\.\\-\\+\\_]+\\@[\\w\\-\\.]+)
([\\w\\.]+)\\s+in\\s+\\(([^()]|(?R))*\\)
([\\w\\-\\_]+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)
([\\w\\-\\+\\.\\_]+)@([\\w\\-\\+\\.]+)
([\\w\\\\]*?)(::)(?=\\b|\\$)
([\\w\\\\]+)::(\\w+)\\((.*)\\)
([\\w\\_\\.]|%[A-Fa-f0-9]{2})+
([\\w\\_\\d]+)\\(([\\w\\W]*)\\)
([\\w\\_]+).*\\[([\\w\\_\\/\\.]+)\\:(\\d+)\\]
([\\w\\_]+)\\.bas$
([\\w\\d\\.\\-\\_]+)\\s+((?<![><=])[\\w\\d\\.\\-\\_]+?(?!\\*))(\\s+[\\w\\d\\.\\_]+)?$
([\\w\\s\\.\\-\\_\\:\\/\\\\\\\"\\'\\`\\#\\+\\{\\}\\[\\]\\;\\*]+)\\(?([\\w\\s\\.\\-\\_\\:\\/\\\\\\\"\\'\\`\\#\\+\\{\\}\\[\\]\\;\\*]+)?\\)?
([\\w-]+)\\s*\\:\\s*(
([\\w]+\\s+)?\\bKEY\\s+(`[^`]+`)?\\s*\\([^)]+(\\(\\d++\\))*\\)
([\\w_.]++)\\s*(?:(=|<>)\\s*(?>'(?>[^']++|'')*+'|[\\d-.]++|([\\w_.]++))|(?:NOT )?IN\\s*\\((?>'(?>[^']++|'')*+',? ?|[\\d-.]++,? ?)*+\\))
([\\w_]++)\\s*=\\s*('(?:[^']++|'')*+'|[\\d-.]++)
([\\w|\\\\]+)(?:\\s+(.*))?
([\\x
([\\x0-\\x1f])
([\\x00-\\x08\\x0B\\x0C\\x0E\\x1F\\x7F-\\x
([\\x00-\\x1F\\*\\(\\)\\\\])
([\\x00-\\x1F\\x7F\"\\\\])
([\\x00-\\x20\\x7F\",;\\\\])
([\\x{0000}-\\x{001f}])
([\\x{0600}-\\x{06FF}])
([\\x{06F0}-\\x{06F9}]+)
([\\x{1000}-\\x{1021}])\\x{1031}([\\x{103b}\\x{103c}\\x{103d}\\x{103e}]+)
([\\x{1000}-\\x{1021}])\\x{1031}(\\x{1039}[\\x{1000}-\\x{1021}])
([\\x{1000}-\\x{1021}])\\x{103b}\\x{1031}\\x{103d}(\\x{103e})?
([\\x{1000}-\\x{1021}])\\x{103c}\\x{1031}\\x{103d}
([\\x{1000}-\\x{1021}])\\x{103c}\\x{103a}
([\\x{1000}-\\x{1021}])\\x{103d}\\x{1031}\\x{103b}
([\\x{1000}-\\x{1021}])\\x{1064}
([\\x{1000}-\\x{1021}])\\x{108b}
([\\x{1000}-\\x{1021}])\\x{108c}
([\\x{1000}-\\x{1021}])\\x{108d}
([\\x{10000}-\\x{10ffff}])
([\\x{10000}-\\x{1FFFF}])
([\\x{20000}-\\x{2FFFF}])
([\\x{2018}-\\x{201f}]|'|\")
([\\x21-\\x7E]
([\\x{256}-\\x{1000}])
([\\x{3041}-\\x{309f}\\.]+)\\s*
([\\x{30a1}-\\x{30ff}]+)\\s*
([\\x80-\\x{10FFFF}])
([-]{1,2}+)([0-9]+)([hdwmy])
([]>]+)\\Q$decimal\\E([[<]+)
([^
([^ !\"\"\\#\\$%&''()*+,\\-.\\/0-9:;<=>?\\@A-Z[\\\\\\]^_`a-z
([^ !\"\\#\\$%&'()*+,\\-.\\/0-9:;<=>?\\@A-Z[\\\\\\]^_`a-z
([^ =]++)=\"([^\"]*)
([^ a-zA-Z0-9\\.\\\\\\-\\/\\_]+)
([^!#&()*+,\\-.\\/0123456789:;<=>?ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\]\\^_`abcdefghijklmnopqrstuvwxyz
([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+
([^#]#|^#)titlepage(\\[(?P<plain>plain)\\])*
-([^$chanmodes->[3]])
([^%]*)(%\\d*)?(
([^%]*)?%([$
([^&]*
([^*?]*)(?:^|[^\\\\])?[*?]
([^,()]+|\\((?:(?1)|,)*\\))+
([^/\\\\])[\\\\/]+$
([^/\\\\])\\.[^./\\\\]*$
([^/\\\\]+)$
([^/\\\\\\\\]+)$
([^/\\\\]+)\\.t$
([^/\\\\]+)\\.vue$
([^/|\\\\]+)
([^:/\\\\])(?=[/\\\\]|$)
([^:\\s\\%\\3\\A])\\/+
([^:])[\\/\\\\]{2,}
([^:]+):\\s+([^]+)
([^:]+://)?((?P<user>[a-z_][a-z0-9_]{0,30})@)?
([^:=\\\\s][^:=]*)\\\\s*(?P<vi>[:=])\\\\s*(.*)$
([^?]*)\\?(?:\\s*'((?:\\\\.|[^'\\\\])*)'\\s*):\\s*'((?:\\\\.|[^'\\\\])*)'\\s*
([^?]*)\\?(?:\\s*\"((?:\\\\.|[^\"\\\\])*)\"\\s*):\\s*\"((?:\\\\.|[^\"\\\\])*)\"\\s*
([^\" ]+)\\.(
([^\"\\\\])\"\"\\s*\\:
([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"
([^\"\\\\]|\\\\(.|$))+
([^\"\\\\]|\\\\.)*
([^\\\"\\\\]|\\\\.)*\\\"
'([^\\\\\"]|\\\\([abfnrtv\\\\\"'&]|\\^[A-Z@[\\]\\^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'
([^\\#a-zA-Z0-9\\-\\_\\.\\!\\*\\?\\[\\]\\{\\}\\:])
([^\\/\\\\]*)$
([^\\/\\\\]*)\\.[^\\.]*$
([^\\/\\\\]+)$
([^\\/\\\\]+)-([^\\/\\\\]+)\\.([^.]+)$
([^\\/\\\\]+)\\.pm$
([^\\/\\\\]+)\\.pod$
([^\\/\\\\]+)\\.t$
([^\\/\\\\]+)\\.vue$
([^\\/\\\\]+?Initializer).php$
([^\\/\\s]+)\\s*(?:\\/((?:[^\\/\\\\]|(?:\\\\\\/?))+)\\/)?\\s*(-?)
([^\\/\\s]+)\\s*(?:\\/((?:[^\\/\\\\]|(?:\\\\\\/?))+)\\/\\s*(?:\\(((?:[^\\\\\\)]|(?:\\\\[^\\n]))*)\\))?)?\\s*((?:\\^+)|(?:[a-zA-Z_][a-zA-Z_0-9]*))?\\s*(-?)
([^\\/^\\\\]+)
([^\\[]*+)\\[(.*)\\]
([^\\[]*+)\\[(.+)\\]
([^\\[]+)\\[{1}([\\w\\_\\-/]+)
([^\\'\\\\]|\\\\.)*\\'
'([^\\'\\\\\\n\\r]|
([^\\-\\s])(\\\\ham\\{i\\})
([^\\-\\s])(\\\\ham{i})
([^\\\\](?:\\\\\\\\)*)\\.
([^\\\\]([\\\\]{2})*)\\\\\"
([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*
([^\\\\]) 
([^\\\\])'
([^\\\\])#.*$
([^\\\\])#.*\\Z
([^\\\\])%
([^\\\\])%$
([^\\\\])%name
([^\\\\])((?:\\\\\\\\)*)#
([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))
([^\\\\])(['\"])(.*?)([^\\\\])\\2
([^\\\\])(\\$(\\{.*?\\}|[\\w\\.]+))
([^\\\\])(\\$)
([^\\\\])(\\\\(?!\\\\))
([^\\\\])(\\\\\\\\)*\\.
([^\\\\])(\\\\*)\\2\\\\n
([^\\\\])(\\,)
([^\\\\])(\\\\[^nrt\\\\])
([^\\\\])(\\\\n|\\\\ )+
([^\\\\])(\\s)
([^\\\\])({\\s*([a-zA-Z0-9-_$\\.]+)\\s*})
([^\\\\]),
([^\\\\])','
([^\\\\]),(\\s*,\\s*)*
([^\\\\])/
([^\\\\])/$
([^\\\\]):
([^\\\\])?\\{(\\w+)\\}
([^\\\\])[ \\t\\n]+
([^\\\\])[()]
([^\\\\])\\\\'
([^\\\\])\\-
([^\\\\])\"
([^\\\\])\\\"
([^\\\\])\\\\\\\\\"
([^\\\\])\\\".*?[^\\\\]\\\"
([^\\\\])\"|^\"
([^\\\\])\\$
([^\\\\])\\$$
([^\\\\])\\$\\{\\d+\\}
([^\\\\])\\\\([^\\\\])
([^\\\\])\\\\([^\\\\]|$)
([^\\\\])\\\\(\\d{1,3})
([^\\\\])\\*
([^\\\\])\\.
([^\\\\])\\/
([^\\\\])\\\\:
([^\\\\])\\?
([^\\\\])\\?$
([^\\\\])\\[
([^\\\\])\\|
([^\\\\])\\\\+([^\\\\])
([^\\\\])\\\\=
([^\\\\])\\\\\\\\=
([^\\\\])\\\\n
([^\\\\])\\\\o
([^\\\\])\\\\r
([^\\\\])\\s+$
([^\\\\])\\s+(.*)
([^\\\\])|(\\\\.)
([^\\\\]')|(^')
([^\\\\])~
([^\\\\])a
([^\\\\])A
([^\\\\])ALO
([^\\\\])D
([^\\\\])F
([^\\\\])l
([^\\\\])M
([^\\\\])S
'([^\\\\']*(?:(?:\\\\'|\\\\)[^\\\\']*)*)'
([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'
('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')
'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'
([^\\\\]*)\\..*$
([^\\\\]*?)\\..*?$
([^\\\\]*\\\\)?([^\\\\]*)\\.(sock|spec|json)$
([^\\\\]*\\\\?)
([^\\\\]?)\\\\
([^\\\\]?)\\\\n
([^\\\\]?)<
([^\\\\]-[^\\\\] | [_ ] | \\\\[trnws])
([^\\\\\\\\]\\\"\\\\z|\\\\A\\\"\\\\z)
([^\\\\]\\:|\\s)0(?:em|ex|ch|rem|vw|vh|vm|vmin|cm|mm|in|px|pt|pc|%)
([^\\\\]\\\\\\]$|\\[\\n\\]$)
([^\\]\\='\"]|^)(https?\\:\\/\\/[a-zA-Z0-9\\:\\/\\-\\?\\&\\;\\.\\=\\_\\~\\#\\%\\$\\!\\+\\,]+)
([^\\\\]\\s)*$
([^\\\\]{1,1})%
([^\\\\]{1,1})_
([^'\\\\]|\\\\(.|$))+
'([^\\\\']|\\\\([abfnrtv\\\\\"'&]|\\^[A-Z@[\\]\\^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'
([^\\\\]|\\\\\\\\)\\s*\\n\\s*$
'([^'\\\\]|\\\\.)*'
'([^'\\\\]|\\\\.)*$
([^\\\\]|\\A);
([^\\\\]|^)'
([^\\\\]|^)&
([^\\\\]|^)((?:\\\\\\\\)*)\\\\s
([^\\\\]|^)((?:\\\\\\\\)*)\\\\W
([^\\\\]|^)(\\\\\\\\)*\\$$
([^\\\\]|^)(\\\\\\\\)*\\\\\\d+
([^\\\\]|^)(\\\\\\\\)*\\\\n
([^\\\\]|^)[[*?]
([^\\\\]|^)\"
([^\\\\]|^)\\\\\\$
([^\\\\]|^)\\[
([^\\\\]|^)\\\\`
([^\\\\]|^)\\\\{
([^\\\\]|^)\\n
([^\\\\]|^)<
([^\\\\]|^)>
([^\\\\]|^|[^\\\\])([\\\\]{2})*[
([^\\\\]+)$
([^\\\\]+)\\\\([^\\\\]+)
([^\\\\]+)\\\\?
([^\\\\]+)\\\\altaffilmark{([^\\\\]+)}
([^\\\\]+)Controller$
([^\\\\]+)Generator
([^\\\\]+)Vertex$
([^\\\\]+?)(flow)?$
([^\\\\]+?)(type)?$
([^\\\\]+|\\A)[~/]\\Z
([^\\\\]++\\\\)++
([^\\`\\\\]+$)
([^\\}\\s])\\\\ham\\{a\\}
([^\\}\\s])\\\\ham{a}
([^\\}])(\\\\ham\\{w\\})
([^\\}])(\\\\ham\\{y\\})
([^\\}])(\\\\ham{w})
([^\\}])(\\\\ham{y})
([^\\047\"/\\000-\\040]+)|((?:(?:\\047[^\\047\\\\\\r\\n]*(?:\\\\(?:[^\\r\\n]|\\r?\\n|\\r)[^\\047\\\\\\r\\n]*)*\\047)|(?:\"[^\"\\\\\\r\\n]*(?:\\\\(?:[^\\r\\n]|\\r?\\n|\\r)[^\"\\\\\\r\\n]*)*\"))[^\\047\"/\\000-\\040]*)|(?:(?<=[(,=:\\[!&|?{};\\r\\n])(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))*((?:/(?![\\r\\n/*])[^/\\\\\\[\\r\\n]*(?:(?:\\\\[^\\r\\n]|(?:\\[[^\\\\\\]\\r\\n]*(?:\\\\[^\\r\\n][^\\\\\\]\\r\\n]*)*\\]))[^/\\\\\\[\\r\\n]*)*/)[^\\047\"/\\000-\\040]*))|(?:(?<=[\\000-#%-,./:-@\\[-^`{-~-]return)(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))*((?:/(?![\\r\\n/*])[^/\\\\\\[\\r\\n]*(?:(?:\\\\[^\\r\\n]|(?:\\[[^\\\\\\]\\r\\n]*(?:\\\\[^\\r\\n][^\\\\\\]\\r\\n]*)*\\]))[^/\\\\\\[\\r\\n]*)*/)[^\\047\"/\\000-\\040]*))|(?<=[^\\000-!#%&(*,./:-@\\[\\\\^`{|~])(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))*(?:((?:(?://[^\\r\\n]*)?[\\r\\n]))(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))*)+(?=[^\\000-#%-\\047)*,./:-@\\\\-^`|-~])|(?<=[^\\000-#%-,./:-@\\[-^`{-~-])((?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/)))+(?=[^\\000-#%-,./:-@\\[-^`{-~-])|(?<=\\+)((?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/)))+(?=\\+\\+)|(?<=-)((?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/)))+(?=--)|(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))+|(?:(?:(?://[^\\r\\n]*)?[\\r\\n])(?:[\\000-\\011\\013\\014\\016-\\040]|(?:/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/))*)+